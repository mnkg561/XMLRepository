<?xml version="1.0" encoding="UTF-8"?>
<exp:Export Version="3.0"
    xmlns:L7p="http://www.layer7tech.com/ws/policy"
    xmlns:exp="http://www.layer7tech.com/ws/policy/export" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <exp:References>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="447a9ac4-30e5-4b27-9549-fee34852915f" included="true"
            name="Initialize Static Variables" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: Initialize Static Variables"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_Initialize_Static_Variables_Fragment_JUL2016_04282016_BUILD_02"/>
                    </L7p:CommentAssertion>
                    <wsp:All wsp:Usage="Required">
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnVybC5wYXRofQ=="/>
                            <L7p:VariableToSet stringValue="service"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnVybH0="/>
                            <L7p:VariableToSet stringValue="URL"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Store the request IP Address."/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRjcC5yZW1vdGVBZGRyZXNzfQ=="/>
                            <L7p:VariableToSet stringValue="requestIP"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Store the timestamp in case of an error."/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwuaXNvODYwMX0="/>
                            <L7p:VariableToSet stringValue="timeStamp"/>
                        </L7p:SetVariable>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:CaptureVar stringValue="urlValues"/>
                                    <L7p:OtherTargetMessageVariable stringValue="service"/>
                                    <L7p:Regex stringValue="^\/(ac2|extws|wsprod)\/services\/(.*)(.*[0-9]{4})"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:CaptureVar stringValue="urlValues"/>
                                    <L7p:OtherTargetMessageVariable stringValue="service"/>
                                    <L7p:Regex stringValue="^\/(ac2|extws|wsprod)\/services\/(.*)(.*[0-9]{2})"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                </wsp:OneOrMore>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHt1cmxWYWx1ZXNbMl19"/>
                                    <L7p:VariableToSet stringValue="connectType"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHt1cmxWYWx1ZXNbM119"/>
                                    <L7p:VariableToSet stringValue="agentConnectVersion"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="Z2F0ZXdheQ=="/>
                                    <L7p:VariableToSet stringValue="setPrefix"/>
                                </L7p:SetVariable>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnVybC5ob3N0fQ=="/>
                                    <L7p:VariableToSet stringValue="urlHostName"/>
                                    </L7p:SetVariable>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:CaptureVar stringValue="output"/>

                                    <L7p:OtherTargetMessageVariable stringValue="urlHostName"/>
                                    <L7p:Regex stringValue="(d|D|q|Q)\d"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtvdXRwdXRbMF19"/>
                                    <L7p:VariableToSet stringValue="environment"/>
                                    </L7p:SetVariable>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${environment}"/>
                                    <L7p:Expression2 stringValue="q1"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Negate booleanValue="true"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:RightValue stringValue="q1"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="Z2F0ZXdheS4ke2Vudmlyb25tZW50fQ=="/>
                                    <L7p:VariableToSet stringValue="setPrefix"/>
                                    </L7p:SetVariable>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:Detail stringValue="${requestId} Dev/Dev QA environment"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:TrueAssertion/>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:Detail stringValue="${requestId} Prod/Ext/Q1 environment"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle with hostname"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:OneOrMore>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Q1, Ext, Prod"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:CaptureVar stringValue="urlValues"/>
                                    <L7p:OtherTargetMessageVariable stringValue="service"/>
                                    <L7p:Regex stringValue="^\/(.*)\/ac2\/services\/(.*)(.*[0-9]{4})(.*)"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:CaptureVar stringValue="urlValues"/>
                                    <L7p:OtherTargetMessageVariable stringValue="service"/>
                                    <L7p:Regex stringValue="^\/(.*)\/ac2\/services\/(.*)(.*[0-9]{2})(.*)"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                </wsp:OneOrMore>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHt1cmxWYWx1ZXNbMV19"/>
                                    <L7p:VariableToSet stringValue="environment"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHt1cmxWYWx1ZXNbMl19"/>
                                    <L7p:VariableToSet stringValue="connectType"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHt1cmxWYWx1ZXNbM119"/>
                                    <L7p:VariableToSet stringValue="agentConnectVersion"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="Z2F0ZXdheS4ke2Vudmlyb25tZW50fQ=="/>
                                    <L7p:VariableToSet stringValue="setPrefix"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:Detail stringValue="${requestId} Dev environment"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Dev, Dev QA"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Process URL"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${connectType}"/>
                                    <L7p:Expression2 stringValue="AgentConnect"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="AgentConnect"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="QUMke2FnZW50Q29ubmVjdFZlcnNpb259LlByb3h5"/>
                                    <L7p:VariableToSet stringValue="customLoggerName"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="aHR0cDovL3d3dy5tb25leWdyYW0uY29tL0FnZW50Q29ubmVjdCR7YWdlbnRDb25uZWN0VmVyc2lvbn0="/>
                                    <L7p:VariableToSet stringValue="currentNameSpace"/>
                                </L7p:SetVariable>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${connectType}"/>
                                    <L7p:Expression2 stringValue="ServiceConnect"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="ServiceConnect"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="U0Mke2FnZW50Q29ubmVjdFZlcnNpb259LlByb3h5"/>
                                    <L7p:VariableToSet stringValue="customLoggerName"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="aHR0cDovL3d3dy5tb25leWdyYW0uY29tL1NlcnZpY2VDb25uZWN0JHthZ2VudENvbm5lY3RWZXJzaW9ufQ=="/>
                                    <L7p:VariableToSet stringValue="currentNameSpace"/>
                                </L7p:SetVariable>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handling Name Space"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                            <L7p:Detail stringValue="${requestId} Start of the request, requestIP = ${requestIP},Service= ${URL}"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <wsp:All wsp:Usage="Required">
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="JHtzZXRQcmVmaXh9LmFwcC5lc2IudXJs"/>
                                <L7p:VariableToSet stringValue="esbUrlProperty"/>
                            </L7p:SetVariable>
                            <L7p:LookupDynamicContextVariables>
                                <L7p:SourceVariable stringValue="${esbUrlProperty}"/>
                                <L7p:TargetDataType variableDataType="string"/>
                                <L7p:TargetOutputVariablePrefix stringValue="lookup1"/>
                            </L7p:LookupDynamicContextVariables>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="JHtsb29rdXAxLm91dHB1dH0="/>
                                <L7p:VariableToSet stringValue="esbUrl"/>
                            </L7p:SetVariable>
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} ESB Url = ${esbUrl}"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handling ESB URL"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="JHtzZXRQcmVmaXh9LmFwcC5ydHMudXJs"/>
                                <L7p:VariableToSet stringValue="rtsUrlProperty"/>
                            </L7p:SetVariable>
                            <L7p:LookupDynamicContextVariables>
                                <L7p:SourceVariable stringValue="${rtsUrlProperty}"/>
                                <L7p:TargetDataType variableDataType="string"/>
                                <L7p:TargetOutputVariablePrefix stringValue="lookup2"/>
                            </L7p:LookupDynamicContextVariables>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="JHtsb29rdXAyLm91dHB1dH0="/>
                                <L7p:VariableToSet stringValue="rtsUrlProperty"/>
                            </L7p:SetVariable>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="MTUxMw=="/>
                                    <L7p:VariableToSet stringValue="rtsCheckSecurityVersion"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtydHNVcmxQcm9wZXJ0eX0vQWdlbnRDb25uZWN0JHtydHNDaGVja1NlY3VyaXR5VmVyc2lvbn0="/>
                                    <L7p:VariableToSet stringValue="rtsBackEndUrl"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} RTS Check Security Url = ${rtsBackEndUrl}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtydHNGYWxsQmFjay5vdXRwdXR9"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="rtsFallBackUrl"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtydHNVcmxQcm9wZXJ0eX0vQWdlbnRDb25uZWN0JHthZ2VudENvbm5lY3RWZXJzaW9ufQ=="/>
                                    <L7p:VariableToSet stringValue="rtsFallBackUrl"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} RTS Fall back Url = ${rtsFallBackUrl}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handling RTS Fall Back URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="aHR0cDovL3d3dy5tb25leWdyYW0uY29tL0FnZW50Q29ubmVjdCR7cnRzQ2hlY2tTZWN1cml0eVZlcnNpb259"/>
                                <L7p:VariableToSet stringValue="rtsNameSpace"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handling RTS URL"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXRQcmVmaXh9LmFwcC5ydHBzLnN0ZC51cmw="/>
                                    <L7p:VariableToSet stringValue="rtpsStdUrlProperty"/>
                                </L7p:SetVariable>
                                <L7p:LookupDynamicContextVariables>
                                    <L7p:SourceVariable stringValue="${rtpsStdUrlProperty}"/>
                                    <L7p:TargetDataType variableDataType="string"/>
                                    <L7p:TargetOutputVariablePrefix stringValue="lookup3"/>
                                </L7p:LookupDynamicContextVariables>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtsb29rdXAzLm91dHB1dH0="/>
                                    <L7p:VariableToSet stringValue="rtpsStandardBackEndUrl"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} RTPS Standard Url = ${rtpsStandardBackEndUrl}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="RTPS Standard URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXRQcmVmaXh9LmFwcC5ydHBzLnJsdC51cmw="/>
                                    <L7p:VariableToSet stringValue="rtpsRealTimeUrlProperty"/>
                                </L7p:SetVariable>
                                <L7p:LookupDynamicContextVariables>
                                    <L7p:SourceVariable stringValue="${rtpsRealTimeUrlProperty}"/>
                                    <L7p:TargetDataType variableDataType="string"/>
                                    <L7p:TargetOutputVariablePrefix stringValue="lookup4"/>
                                </L7p:LookupDynamicContextVariables>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtsb29rdXA0Lm91dHB1dH0="/>
                                    <L7p:VariableToSet stringValue="rtpsRealTimeBackEndUrl"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} RTPS Real Time Url = ${rtpsRealTimeBackEndUrl}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="RTPS Real Time URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handling RTPS URLs"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICAgIDxzb2FwZW52OkJvZHk+DQogICAgICAgIDxzb2FwZW52OkZhdWx0Pg0KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPg0KICAgICAgICAgICAgPGZhdWx0c3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvZmF1bHRzdHJpbmc+DQogICAgICAgICAgICA8ZGV0YWlsPg0KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTQ5PC9hYzplcnJvckNvZGU+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPg0KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+DQogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4NCiAgICAgICAgICAgIDwvZGV0YWlsPg0KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+DQogICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                                <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                <L7p:DataType variableDataType="message"/>
                                <L7p:VariableToSet stringValue="esbErrorTemplate"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICAgIDxzb2FwZW52OkJvZHk+DQogICAgICAgIDxzb2FwZW52OkZhdWx0Pg0KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPg0KICAgICAgICAgICAgPGZhdWx0c3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvZmF1bHRzdHJpbmc+DQogICAgICAgICAgICA8ZGV0YWlsPg0KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTQ1PC9hYzplcnJvckNvZGU+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPg0KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+DQogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4NCiAgICAgICAgICAgIDwvZGV0YWlsPg0KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+DQogICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                                <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                <L7p:DataType variableDataType="message"/>
                                <L7p:VariableToSet stringValue="rtsErrorTemplate"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICAgIDxzb2FwZW52OkJvZHk+DQogICAgICAgIDxzb2FwZW52OkZhdWx0Pg0KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPg0KICAgICAgICAgICAgPGZhdWx0c3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvZmF1bHRzdHJpbmc+DQogICAgICAgICAgICA8ZGV0YWlsPg0KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTQ0PC9hYzplcnJvckNvZGU+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPg0KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+DQogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4NCiAgICAgICAgICAgIDwvZGV0YWlsPg0KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+DQogICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                                <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                <L7p:DataType variableDataType="message"/>
                                <L7p:VariableToSet stringValue="rtpsErrorTemplate"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICAgIDxzb2FwZW52OkJvZHk+DQogICAgICAgIDxzb2FwZW52OkZhdWx0Pg0KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPg0KICAgICAgICAgICAgPGZhdWx0c3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvZmF1bHRzdHJpbmc+DQogICAgICAgICAgICA8ZGV0YWlsPg0KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTUzPC9hYzplcnJvckNvZGU+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPg0KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+DQogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4NCiAgICAgICAgICAgIDwvZGV0YWlsPg0KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+DQogICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                                <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                <L7p:DataType variableDataType="message"/>
                                <L7p:VariableToSet stringValue="layer7ErrorTemplate"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Error Templates"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Prepare Static Variables"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <L7p:ExportVariables>
                        <L7p:ExportedVars stringArrayValue="included">
                            <L7p:item stringValue="agentConnectVersion"/>
                            <L7p:item stringValue="connectType"/>
                            <L7p:item stringValue="currentNameSpace"/>
                            <L7p:item stringValue="customLoggerName"/>
                            <L7p:item stringValue="environment"/>
                            <L7p:item stringValue="esbErrorTemplate"/>
                            <L7p:item stringValue="esbUrl"/>
                            <L7p:item stringValue="esbUrlProperty"/>
                            <L7p:item stringValue="layer7ErrorTemplate"/>
                            <L7p:item stringValue="requestIP"/>
                            <L7p:item stringValue="rtpsErrorTemplate"/>
                            <L7p:item stringValue="rtpsRealTimeBackEndUrl"/>
                            <L7p:item stringValue="rtpsRealTimeUrlProperty"/>
                            <L7p:item stringValue="rtpsStandardBackEndUrl"/>
                            <L7p:item stringValue="rtpsStdUrlProperty"/>
                            <L7p:item stringValue="rtsBackEndUrl"/>
                            <L7p:item stringValue="rtsCheckSecurityVersion"/>
                            <L7p:item stringValue="rtsErrorTemplate"/>
                            <L7p:item stringValue="rtsFallBackUrl"/>
                            <L7p:item stringValue="rtsNameSpace"/>
                            <L7p:item stringValue="service"/>
                            <L7p:item stringValue="setPrefix"/>
                            <L7p:item stringValue="timeStamp"/>
                            <L7p:item stringValue="URL"/>
                        </L7p:ExportedVars>
                    </L7p:ExportVariables>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="69815253-1d36-467d-9095-edf3e560f0b6" included="true"
            name="Decompression Handler" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: Decompression Handler"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_Decompression_Handler_Fragment_MAR2016_02252016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <L7p:Encapsulated>
                        <L7p:EncapsulatedAssertionConfigGuid stringValue="c82497d6-6a37-4274-a072-7e9af6a4f54c"/>
                        <L7p:EncapsulatedAssertionConfigName stringValue="Decompress Request Message"/>
                        <L7p:Parameters mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="CustomLoggerName"/>
                                <L7p:value stringValue="${customLoggerName}"/>
                            </L7p:entry>
                        </L7p:Parameters>
                    </L7p:Encapsulated>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} SOAP Version= ${request.soap.version},SOAP Name Space= ${request.soap.envelopeNs},operation = ${request.soap.operation}, Content-type = ${request.http.header.content-type}."/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnNvYXAub3BlcmF0aW9ufQ=="/>
                        <L7p:VariableToSet stringValue="operationName"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnNvYXAudmVyc2lvbn0="/>
                        <L7p:VariableToSet stringValue="soapVersion"/>
                    </L7p:SetVariable>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:ComparisonAssertion>
                                <L7p:Expression1 stringValue="${operationName}"/>
                                <L7p:Expression2 stringValue=""/>
                                <L7p:ExpressionIsVariable booleanValue="false"/>
                                <L7p:Negate booleanValue="true"/>
                                <L7p:Operator operator="EMPTY"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue=""/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:ComparisonAssertion>
                                <L7p:Expression1 stringValue="${soapVersion}"/>
                                <L7p:Expression2 stringValue=""/>
                                <L7p:ExpressionIsVariable booleanValue="false"/>
                                <L7p:Negate booleanValue="true"/>
                                <L7p:Operator operator="EMPTY"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue=""/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="MjAw"/>
                                <L7p:VariableToSet stringValue="httpStatusCode"/>
                            </L7p:SetVariable>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} ERROR: SOAP Version and SOAP Operation names can not be empty. Probably Content-type = ${request.http.header.content-type} might not be supported. Service = ${URL}"/>
                                <L7p:Level stringValue="WARNING"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:SetVariable>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Store the timestamp in case of an error."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwuaXNvODYwMX0="/>
                                <L7p:VariableToSet stringValue="timeStamp"/>
                            </L7p:SetVariable>
                            <L7p:HardcodedResponse>
                                <L7p:Base64ResponseBody stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPgogICAgPHNvYXBlbnY6Qm9keT4KICAgICAgICA8c29hcGVudjpGYXVsdD4KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPgogICAgICAgICAgICA8ZmF1bHRzdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9mYXVsdHN0cmluZz4KICAgICAgICAgICAgPGRldGFpbD4KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+CiAgICAgICAgICAgICAgICAgICAgPGFjOmVycm9yQ29kZT45NTM8L2FjOmVycm9yQ29kZT4KICAgICAgICAgICAgICAgICAgICA8YWM6ZXJyb3JTdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9hYzplcnJvclN0cmluZz4KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPgogICAgICAgICAgICAgICAgPC9hYzplcnJvcj4KICAgICAgICAgICAgICAgIDxuczE6ZXhjZXB0aW9uTmFtZSB4bWxuczpuczE9Imh0dHA6Ly94bWwuYXBhY2hlLm9yZy9heGlzLyI+Y29tLm1vbmV5Z3JhbS5hZ2VudGNvbm5lY3Quc29hcC5BQ0V4Y2VwdGlvbjwvbnMxOmV4Y2VwdGlvbk5hbWU+CiAgICAgICAgICAgIDwvZGV0YWlsPgogICAgICAgIDwvc29hcGVudjpGYXVsdD4KICAgIDwvc29hcGVudjpCb2R5Pgo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                                <L7p:EarlyResponse booleanValue="true"/>
                                <L7p:ResponseStatus stringValue="500"/>
                            </L7p:HardcodedResponse>
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} ERROR: Layer7 error [953] sent to client"/>
                                <L7p:Level stringValue="WARNING"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} End of the request, response time = ${request.elapsedTime} service = ${URL}"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:FalseAssertion/>
                            <L7p:AddHeader>
                                <L7p:HeaderName stringValue="Pragma"/>
                                <L7p:HeaderValue stringValue="no-cache"/>
                                <L7p:Target target="RESPONSE"/>
                            </L7p:AddHeader>
                            <L7p:AddHeader>
                                <L7p:HeaderName stringValue="Cache-Control"/>
                                <L7p:HeaderValue stringValue="no-store"/>
                                <L7p:Target target="RESPONSE"/>
                            </L7p:AddHeader>
                        </wsp:All>
                    </wsp:OneOrMore>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <EncapsulatedAssertionReference RefType="com.l7tech.console.policy.exporter.EncapsulatedAssertionReference">
            <Name>Decompress Request Message</Name>
            <Guid>c82497d6-6a37-4274-a072-7e9af6a4f54c</Guid>
        </EncapsulatedAssertionReference>
        <ExternalSchema
            RefType="com.l7tech.console.policy.exporter.ExternalSchemaReference" schemaLocation="May_AgentConnect1510.xsd"/>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="4844d83b-a8ba-4820-b1e7-c2fd7582935b" included="true"
            name="Schema Failure Error Response" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: Schema Failure Error Response"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_Schema_Failure_Error_Response_Fragment_MAR2016_02252016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} ERROR: AgentConnect XML Schema validation is failedwith error ${schema.failure}, service = ${URL}"/>
                        <L7p:Level stringValue="WARNING"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="PHNjaGVtYUZhaWx1cmU+JHtzY2hlbWEuZmFpbHVyZX08L3NjaGVtYUZhaWx1cmU+"/>
                        <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="response"/>
                    </L7p:SetVariable>
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="2"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="msxsl" version="1.0" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="yes" method="xml"/> 
    <xsl:param name="currentNameSpace"/>
    <xsl:template match="/">
    	<xsl:variable name="schemaErrorString">
	<xsl:value-of select="schemaFailure"/>
	</xsl:variable>
	<xsl:variable name="errorString" select="substring-after($schemaErrorString, &quot;org.xml.sax.SAXParseException; &quot;)"/>
	<xsl:variable name="offendingField" select="substring-before(substring-after($schemaErrorString, &quot;element '&quot;),&quot;'&quot;)"/>
	
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <soapenv:Body>
            <soapenv:Fault>
                <faultcode>soapenv:Server</faultcode>
                    <faultstring/>
                    <detail>
                            <ac:error xmlns:ac="${currentNameSpace}">                                
                                <ac:errorString>
								<xsl:value-of select="$errorString"/>
								</ac:errorString>
								<ac:offendingField>{${currentNameSpace}} <xsl:value-of select="$offendingField"/></ac:offendingField>                                							
                            </ac:error>
                            <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>
    </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="RESPONSE"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="NTAw"/>
                        <L7p:VariableToSet stringValue="httpStatusCode"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                        <L7p:VariableToSet stringValue="isErrorOccured"/>
                    </L7p:SetVariable>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <EncapsulatedAssertionReference RefType="com.l7tech.console.policy.exporter.EncapsulatedAssertionReference">
            <Name>RTS Security Authentication</Name>
            <Guid>bafd9483-3cca-4270-bd1e-8f397c372f67</Guid>
        </EncapsulatedAssertionReference>
        <EncapsulatedAssertionReference RefType="com.l7tech.console.policy.exporter.EncapsulatedAssertionReference">
            <Name>Log XML Request Message</Name>
            <Guid>8b60ca61-e0d2-4ab0-9eb5-91830bfe1485</Guid>
        </EncapsulatedAssertionReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="246e48c7-34f6-4b3d-8169-df0ce2ae22ad" included="true"
            name="sendValidationRequst_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="AC1211.Proxy"/>
                        <L7p:Detail stringValueReference="inline"><![CDATA[Policy Fragment: Start sendValidationRequest masking rules.
]]></L7p:Detail>
                        <L7p:Enabled booleanValue="false"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsSendValidationRequest"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:sendValidationRequest/real:accountNumber">
        <accountNumber>********************</accountNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:sendValidationRequest/real:senderPhotoIdNumber">
        <senderPhotoIdNumber>********************</senderPhotoIdNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:sendValidationRequest/real:senderLegalIdNumber">
        <senderLegalIdNumber>********************</senderLegalIdNumber>
    </xsl:template>

    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:sendValidationRequest/real:thirdPartyPhotoIdNumber">
        <thirdPartyPhotoIdNumber>********************</thirdPartyPhotoIdNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:sendValidationRequest/real:thirdPartyLegalIdNumber">
        <thirdPartyLegalIdNumber>********************</thirdPartyLegalIdNumber>
    </xsl:template>

</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="AC1211.Proxy"/>
                        <L7p:Detail stringValue="Policy Fragment: Finish sendValidationRequest masking rules."/>
                        <L7p:Enabled booleanValue="false"/>
                    </L7p:AuditDetailAssertion>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="e23a2b32-eea4-4337-bf2e-07d470046adf" included="true"
            name="sendValidationResponse_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="AC1211.Proxy"/>
                        <L7p:Detail stringValue="Policy Fragment: Start sendValidationResponse masking rules."/>
                        <L7p:Enabled booleanValue="false"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsSendValidationResponse"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>
    <!-- Nothing to mask
    <xsl:template match="/soapenv:Envelope/soapenv:Body/b:sendValidationResponse/b:sendAmounts/b:sendCurrency">
        <b:sendCurrency>********************</b:sendCurrency>
    </xsl:template>
     -->
</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="Proxy1211.log"/>
                        <L7p:Detail stringValue="Policy Fragment: Finish sendValidationResponse masking rules."/>
                        <L7p:Enabled booleanValue="false"/>
                    </L7p:AuditDetailAssertion>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <EncapsulatedAssertionReference RefType="com.l7tech.console.policy.exporter.EncapsulatedAssertionReference">
            <Name>Log XML Response Message</Name>
            <Guid>910cb930-904b-4a60-9e59-01a2f9e0576e</Guid>
        </EncapsulatedAssertionReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="4b13a7ed-c321-49e7-8db6-f9a80d8a8d17" included="true"
            name="commitTransactionRequest_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsCommitTransactionRequest"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>
    
    <!-- Nothing to Mask
    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:commitTransactionRequest/real:agentSequence">
        <real:agentSequence>********************</real:agentSequence>
    </xsl:template>
    -->
</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="1de82213-97a9-4f8d-86ef-8189ee88d801" included="true"
            name="commitTransactionResponse_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsCommitTransactionResponse"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

    <!-- Nothing to mask out ->
    <xsl:template match="/soapenv:Envelope/soapenv:Body/b:commitTransactionResponse/b:freePhoneCallPIN">
        <b:freePhoneCallPIN>********************</b:freePhoneCallPIN>
    </xsl:template>
    -->
</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="f577bc80-d669-4ec1-a0f6-9aa9b6f73a7f" included="true"
            name="bpValidationRequest_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsBpValidationRequest"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:billerAccountNumber">
        <billerAccountNumber>********************</billerAccountNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:senderPhotoIdNumber">
        <senderPhotoIdNumber>********************</senderPhotoIdNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:senderLegalIdNumber">
        <senderLegalIdNumber>********************</senderLegalIdNumber>
    </xsl:template>


    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:senderLegalIdNumber">
        <senderLegalIdNumber>********************</senderLegalIdNumber>
    </xsl:template>


</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="f898c65f-b29f-4578-a469-0b6ad3a6633d" included="true"
            name="bpValidationResponse_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: bpValidationResponse_RTPS_mask"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsBpValidationResponse"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>
    <!-- No masking for this result
    <xsl:template match="/soapenv:Envelope/soapenv:Body/b:bpValidationResponse/b:sendAmounts/b:sendCurrency">
        <b:sendCurrency>********************</b:sendCurrency>
    </xsl:template>
    -->

</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="0b3fc5e1-8ef9-40bf-bbc9-f2d8f8c6c7ac" included="true"
            name="saveRegistrationRequest_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsMGSaveRegistrationRequest"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

    <xsl:template match="/soapenv:Envelope/soapenv:Body/real:saveRegistrationRequest/real:fieldValues/real:keyValuePair/real:value">
        <value>********************</value>
    </xsl:template>
     
 
</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="107dec85-214b-421b-9c34-02070537647d" included="true"
            name="saveRegistrationResponse_RTPS_mask" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:XslTransformation>
                        <L7p:Direction intValue="-1"/>
                        <L7p:OtherTargetMessageVariable stringValue="rtpsMGSaveRegistrationResponse"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>
    <!-- Nothing to mask in response 
    <xsl:template match="/soapenv:Envelope/soapenv:Body/b:saveRegistrationResponse/b:mgCustomerReceiveNumber">
        <b:mgCustomerReceiveNumber>********************</b:mgCustomerReceiveNumber>
    </xsl:template>
 -->
</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="OTHER"/>
                        <L7p:TransformName stringValue=""/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <EncapsulatedAssertionReference RefType="com.l7tech.console.policy.exporter.EncapsulatedAssertionReference">
            <Name>Extract Attributes for ESB Header</Name>
            <Guid>d2cd5846-b9db-4d66-a100-31f18aecdddf</Guid>
        </EncapsulatedAssertionReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="7cfe2c72-96fe-40d1-a343-45c653e0be09" included="true"
            name="ESB Routing Handler" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: ESB Routing Handler"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_ESB_Routing_Handler_Fragment_JUL2016_04282016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:Encapsulated>
                                <L7p:EncapsulatedAssertionConfigGuid stringValue="69ac3b3d-4b66-427d-aa0b-8901dd8853f9"/>
                                <L7p:EncapsulatedAssertionConfigName stringValue="Route to MoneyGram ESB"/>
                                <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="agentID"/>
                                    <L7p:value stringValue="${agentID.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="agentSequence"/>
                                    <L7p:value stringValue="${agentSequence.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="apiName"/>
                                    <L7p:value stringValue="${operationName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="apiVersion"/>
                                    <L7p:value stringValue="${agentConnectVersion}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="BackendURL"/>
                                    <L7p:value stringValue="${esbUrl}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="clientSoftwareVersion"/>
                                    <L7p:value stringValue="${clientSoftwareVersion.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="esbClientSystemId"/>
                                    <L7p:value stringValue="L7-AgentConnect"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ESBOrchestratorName"/>
                                    <L7p:value stringValue="${esbOrchestratorName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="guId"/>
                                    <L7p:value stringValue="${requestId}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="language"/>
                                    <L7p:value stringValue="${language.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="poeType"/>
                                    <L7p:value stringValue=""/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="referenceNumber"/>
                                    <L7p:value stringValue="${referenceNumber.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="serviceFunctionID"/>
                                    <L7p:value stringValue="${serviceFunctionId}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="targetAudience"/>
                                    <L7p:value stringValue=""/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="timestamp"/>
                                    <L7p:value stringValue="${timestamp.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="unitProfileID"/>
                                    <L7p:value stringValue="${unitProfileID.result}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="userID"/>
                                    <L7p:value stringValue="${userID.result}"/>
                                    </L7p:entry>
                                </L7p:Parameters>
                            </L7p:Encapsulated>
                            <wsp:OneOrMore wsp:Usage="Required">
                                <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Comparing the response code if ESB is down"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="500"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="239da509-2dce-4e38-af8d-7e39cb4f0085"/>
                                    </L7p:Include>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ERROR"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:TrueAssertion/>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="response"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING from ESB to Layer7"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="SUCCESS Scenario"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                            </wsp:OneOrMore>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ESB Routing"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle ESB Routing"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <EncapsulatedAssertionReference RefType="com.l7tech.console.policy.exporter.EncapsulatedAssertionReference">
            <Name>Route to MoneyGram ESB</Name>
            <Guid>69ac3b3d-4b66-427d-aa0b-8901dd8853f9</Guid>
        </EncapsulatedAssertionReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="239da509-2dce-4e38-af8d-7e39cb4f0085" included="true"
            name="ESB Connectivity Failure [949] Error Response"
            soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: ESB Connectivity Failure [949] Error Response"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_ESB_Connectivity_Failure_Fragment_JUL2016_04282016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <L7p:SetVariable>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Store the timestamp in case of an error."/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwuaXNvODYwMX0="/>
                        <L7p:VariableToSet stringValue="timeStamp"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICAgIDxzb2FwZW52OkJvZHk+DQogICAgICAgIDxzb2FwZW52OkZhdWx0Pg0KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPg0KICAgICAgICAgICAgPGZhdWx0c3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvZmF1bHRzdHJpbmc+DQogICAgICAgICAgICA8ZGV0YWlsPg0KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTQ5PC9hYzplcnJvckNvZGU+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPg0KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+DQogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4NCiAgICAgICAgICAgIDwvZGV0YWlsPg0KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+DQogICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                        <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="response"/>
                    </L7p:SetVariable>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} ERROR: ESB Connectivity issue, 949 Error sent to client. service = ${service}"/>
                        <L7p:Level stringValue="WARNING"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="NTAw"/>
                        <L7p:VariableToSet stringValue="httpStatusCode"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                        <L7p:VariableToSet stringValue="isErrorOccured"/>
                    </L7p:SetVariable>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="455bb960-24fb-4531-9616-db40cbd7d36b" included="true"
            name="Business Error Handler" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: Bussiness Error Handler"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_Business_Error_Handler_Fragment_MAR2016_02252016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <L7p:SetVariable>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Store the timestamp in case of an error."/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwuaXNvODYwMX0="/>
                        <L7p:VariableToSet stringValue="timeStamp"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="NTAw"/>
                        <L7p:VariableToSet stringValue="httpStatusCode"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="save response in a context variabe for masking and auditing"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                        <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="esbFaultResp"/>
                    </L7p:SetVariable>
                    <L7p:Regex>
                        <L7p:AutoTarget booleanValue="false"/>
                        <L7p:FindAll booleanValue="true"/>
                        <L7p:OtherTargetMessageVariable stringValue="esbFaultResp"/>
                        <L7p:Regex stringValue="\n"/>
                        <L7p:RegexName stringValue="RemovingNewLineCharacter"/>
                        <L7p:RegexVar stringValue="Logging"/>
                        <L7p:Replace booleanValue="true"/>
                        <L7p:Replacement stringValue=""/>
                        <L7p:Target target="OTHER"/>
                    </L7p:Regex>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} ERROR: Fault received from ESB to Gateway"/>
                        <L7p:Level stringValue="WARNING"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:XslTransformation>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Fault Conversion"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:Direction intValue="2"/>
                        <L7p:ResourceInfo staticResourceInfo="included">
                            <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="a b" version="1.0" xmlns:a="http://moneygram.com/common_v1" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="no" method="xml"/>
  <xsl:param name="timeStamp"/>
  <xsl:param name="currentNamespace"/>
  <xsl:variable name="serviceError" select="//*[local-name()='esbEnvelope']/*[local-name()='serviceErrors']/*[local-name()='serviceError']"/>
  <xsl:template match="/">
    <!-- The XPath mentioned above needs to be updated after the fault schema specification is provided by the ESB team -->
    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <soapenv:Body>
        <soapenv:Fault>
          <faultcode>soapenv:Server</faultcode>
          <faultstring>
            <xsl:value-of select="$serviceError/*[local-name()='errorMessage']"/>
          </faultstring>
          <detail>
            <ac:error xmlns:ac="${currentNamespace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
              <ac:errorCode>
                <xsl:value-of select="$serviceError/*[local-name()='errorCode']"/>
              </ac:errorCode>
              <ac:errorString>
                <xsl:value-of select="$serviceError/*[local-name()='errorMessage']"/>
              </ac:errorString>
              <xsl:if test="string-length($serviceError/*[local-name()='relatedErrors']/*[local-name()='error']/*[local-name()='code'])!=0">
                <ac:subErrorCode>
                  <xsl:value-of select="$serviceError/*[local-name()='relatedErrors']/*[local-name()='error']/*[local-name()='code']"/>
                </ac:subErrorCode>
              </xsl:if>
              <xsl:if test="$serviceError/*[local-name()='errorCategoryCode']!='ServiceSystemError'">
              <xsl:if test="string-length($serviceError/*[local-name()='offendingField'])!=0">
                <ac:offendingField>
                  <xsl:value-of select="$serviceError/*[local-name()='offendingField']"/>
                </ac:offendingField>
              </xsl:if>
              </xsl:if>
              <ac:timeStamp>
                <xsl:value-of select=" substring('${timeStamp}',1,29)"/>
              </ac:timeStamp>
               <xsl:if test="string-length($serviceError/*[local-name()='relatedErrors']/*[local-name()='error']/*[local-name()='message'])!=0">
              <ac:detailString>
                      <xsl:value-of select="$serviceError/*[local-name()='relatedErrors']/*[local-name()='error']/*[local-name()='message']"/>
              </ac:detailString>
              </xsl:if>
            </ac:error>
            <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
          </detail>
        </soapenv:Fault>
      </soapenv:Body>
    </soapenv:Envelope>
  </xsl:template>

</xsl:stylesheet>]]></L7p:Document>
                        </L7p:ResourceInfo>
                        <L7p:Target target="RESPONSE"/>
                        <L7p:TransformName stringValue="FaultConversionXSL"/>
                        <L7p:XsltVersion stringValue="1.0"/>
                    </L7p:XslTransformation>
                    <L7p:SetVariable>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="save response in a context variabe for masking and auditing"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                        <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="acFaultResp"/>
                    </L7p:SetVariable>
                    <L7p:Regex>
                        <L7p:AutoTarget booleanValue="false"/>
                        <L7p:FindAll booleanValue="true"/>
                        <L7p:OtherTargetMessageVariable stringValue="acFaultResp"/>
                        <L7p:Regex stringValue="\n"/>
                        <L7p:RegexName stringValue="RemovingNewLineCharacter"/>
                        <L7p:RegexVar stringValue="Logging"/>
                        <L7p:Replace booleanValue="true"/>
                        <L7p:Replacement stringValue=""/>
                        <L7p:Target target="OTHER"/>
                    </L7p:Regex>
                    <L7p:ExportVariables>
                        <L7p:ExportedVars stringArrayValue="included">
                            <L7p:item stringValue="httpStatusCode"/>
                        </L7p:ExportedVars>
                    </L7p:ExportVariables>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="0d9962ca-c32a-496a-a459-d2499b6b02bd" included="true"
            name="RTS Fallback Handler" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: RTS Fallback Handler"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_RTS_Fallback_Handler_Fragment_JUL2016_04282016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:ComparisonAssertion>
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Expression1 stringValue="${isErrorOccured}"/>
                                <L7p:ExpressionIsVariable booleanValue="false"/>
                                <L7p:Operator operatorNull="null"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="true"/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:TrueAssertion/>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="If there is an error skip this step"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} Fallback to RTS, operationName = ${operationName}"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:HttpRoutingAssertion>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Route to RTS since the API did not have a match"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:ConnectionTimeout stringValue="5000"/>
                                <L7p:FailOnErrorStatus booleanValue="false"/>
                                <L7p:MaxRetries intValue="0"/>
                                <L7p:ProtectedServiceUrl stringValue="${rtsFallBackUrl}"/>
                                <L7p:ProxyPassword stringValueNull="null"/>
                                <L7p:ProxyUsername stringValueNull="null"/>
                                <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SSLClientCertSubject"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                </L7p:RequestHeaderRules>
                                <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                </L7p:RequestParamRules>
                                <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                </L7p:ResponseHeaderRules>
                                <L7p:ResponseSize stringValue="8621440"/>
                                <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256"/>
                                <L7p:TlsVersion stringValue="TLSv1"/>
                                <L7p:UsesNoKey booleanValue="true"/>
                            </L7p:HttpRoutingAssertion>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="JHtodHRwUm91dGluZy5yZWFzb25Db2RlfQ=="/>
                                <L7p:VariableToSet stringValue="httpStatusCode"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="FALLBACK ---Handle ALL OTHER operations"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:Include>
                                <L7p:PolicyGuid stringValue="01a9d34a-46bf-435d-b760-d6f24de5f79c"/>
                            </L7p:Include>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="RTS Connectivity Failure"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                    </wsp:OneOrMore>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="01a9d34a-46bf-435d-b760-d6f24de5f79c" included="true"
            name="RTS Connectivity Failure [945] Error Response"
            soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: RTS Connectivity Failure [945] Error Response"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_RTS_Connectivity_Failure_Fragment_JUL2016_04282016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <L7p:SetVariable>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Store the timestamp in case of an error."/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwuaXNvODYwMX0="/>
                        <L7p:VariableToSet stringValue="timeStamp"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICAgIDxzb2FwZW52OkJvZHk+DQogICAgICAgIDxzb2FwZW52OkZhdWx0Pg0KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPg0KICAgICAgICAgICAgPGZhdWx0c3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvZmF1bHRzdHJpbmc+DQogICAgICAgICAgICA8ZGV0YWlsPg0KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iJHtjdXJyZW50TmFtZVNwYWNlfSI+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTQ1PC9hYzplcnJvckNvZGU+DQogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPg0KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+DQogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4NCiAgICAgICAgICAgIDwvZGV0YWlsPg0KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+DQogICAgPC9zb2FwZW52OkJvZHk+"/>
                        <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="response"/>
                    </L7p:SetVariable>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} ERROR: RTS Connectivity Failed, Error [945] sent to client."/>
                        <L7p:Level stringValue="WARNING"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="NTAw"/>
                        <L7p:VariableToSet stringValue="httpStatusCode"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                        <L7p:VariableToSet stringValue="isErrorOccured"/>
                    </L7p:SetVariable>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="3fecf6b4-43c2-4677-ae74-1a5cd6ef11a4" included="true"
            name="Handle Client Response [SOAP Versions, Compressions, Status Codes]"
            soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: Handle Client Response [SOAP Versions, Compressions, Status Codes]"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:CommentAssertion>
                        <L7p:Comment stringValue="Build Tag: Layer7_Handle_Client_Response_Fragment_MAR2016_02252016_BUILD_01"/>
                    </L7p:CommentAssertion>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} Status code = ${httpStatusCode}"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:ComparisonAssertion>
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Expression1 stringValue="${soapVersion}"/>
                                <L7p:Operator operatorNull="null"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="1.1"/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:XslTransformation>
                                <L7p:Direction intValue="2"/>
                                <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:param name="currentNameSpace"/>
  <xsl:template match="/">
    <soapenv:Envelope>
      <xsl:apply-templates select="*/*"/>
    </soapenv:Envelope>
  </xsl:template>
  <xsl:template match="*/*">
    <xsl:element name="{name()}" xmlns:ac="${currentNameSpace}" xmlns:agen="${currentNameSpace}" xmlns:cal="http://moneygram.com/service/callcentertaskservice_v1" xmlns:com="http://moneygram.com/common_v1" xmlns:ns1="http://xml.apache.org/axis/" xmlns:sc="http://www.moneygram.com/ServiceConnect1513" xmlns:ser="http://www.moneygram.com/ServiceConnect1513">
      <xsl:apply-templates select="@* | node() "/>
    </xsl:element>
  </xsl:template>
    <xsl:template match="@xsi:type">
    <xsl:copy-of select="."/>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                </L7p:ResourceInfo>
                                <L7p:Target target="RESPONSE"/>
                                <L7p:TransformName stringValue=""/>
                                <L7p:XsltVersion stringValue="1.0"/>
                            </L7p:XslTransformation>
                            <wsp:OneOrMore wsp:Usage="Required">
                                <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${inputContentType}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="gzip"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:HardcodedResponse>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="DO NOT CHECK the send response immediately check box"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ResponseContentType stringValue="application/x-gzip; charset=utf-8"/>
                                    <L7p:ResponseStatus stringValue="${httpStatusCode}"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:CustomAssertion>
                                    <L7p:base64SerializedValue>rO0ABXNyADFjb20ubDd0ZWNoLnBvbGljeS5hc3NlcnRpb24uQ3VzdG9tQXNzZXJ0aW9uSG9sZGVyZtcreFwddTICAAlaAAxpc1VpQXV0b09wZW5MAApjYXRlZ29yaWVzdAAPTGphdmEvdXRpbC9TZXQ7TAAIY2F0ZWdvcnl0ACpMY29tL2w3dGVjaC9wb2xpY3kvYXNzZXJ0aW9uL2V4dC9DYXRlZ29yeTtMAA9jdXN0b21Bc3NlcnRpb250ADFMY29tL2w3dGVjaC9wb2xpY3kvYXNzZXJ0aW9uL2V4dC9DdXN0b21Bc3NlcnRpb247TAAUY3VzdG9tTW9kdWxlRmlsZU5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAA9kZXNjcmlwdGlvblRleHRxAH4ABEwAD3BhbGV0dGVOb2RlTmFtZXEAfgAETAAOcG9saWN5Tm9kZU5hbWVxAH4ABEwAHnJlZ2lzdGVyZWRDdXN0b21GZWF0dXJlU2V0TmFtZXEAfgAEeHIAJWNvbS5sN3RlY2gucG9saWN5LmFzc2VydGlvbi5Bc3NlcnRpb27bX2OZPL2isQIAAloAB2VuYWJsZWRMABBhc3NlcnRpb25Db21tZW50dAAvTGNvbS9sN3RlY2gvcG9saWN5L2Fzc2VydGlvbi9Bc3NlcnRpb24kQ29tbWVudDt4cAFwAXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAABA/QAAAAAAAAXNyAChjb20ubDd0ZWNoLnBvbGljeS5hc3NlcnRpb24uZXh0LkNhdGVnb3J5WrCcZaFE/jUCAAJJAAVteUtleUwABm15TmFtZXEAfgAEeHAAAAALdAAQQ3VzdG9tQXNzZXJ0aW9uc3hwc3IAMWNvbS5sN3RlY2guZXh0ZXJuYWwuYXNzZXJ0aW9ucy5nemlwLkd6aXBBc3NlcnRpb276omWFBjk+GgIAB1oAEmJhc2U2NUVuY29kZURlY29kZVoACmNvbXByZXNzZWRMABFjb21wcmVzc2lvbkZvcm1hdHQARUxjb20vbDd0ZWNoL2V4dGVybmFsL2Fzc2VydGlvbnMvZ3ppcC9HemlwQXNzZXJ0aW9uJENvbXByZXNzaW9uRm9ybWF0O0wAC2NvbnRlbnRUeXBlcQB+AARMAA5zb3VyY2VWYXJpYWJsZXEAfgAETAAOdGFyZ2V0RGF0YVR5cGV0ACVMY29tL2w3dGVjaC9wb2xpY3kvdmFyaWFibGUvRGF0YVR5cGU7TAAOdGFyZ2V0VmFyaWFibGVxAH4ABHhwAAF+cgBDY29tLmw3dGVjaC5leHRlcm5hbC5hc3NlcnRpb25zLmd6aXAuR3ppcEFzc2VydGlvbiRDb21wcmVzc2lvbkZvcm1hdAAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQAA1pJUHQAIWFwcGxpY2F0aW9uL3gtZ3ppcDsgY2hhcnNldD11dGYtOHQACHJlc3BvbnNlc3IAI2NvbS5sN3RlY2gucG9saWN5LnZhcmlhYmxlLkRhdGFUeXBlb86fXcE09MwCAANMAARuYW1lcQB+AARMAAlzaG9ydE5hbWVxAH4ABFsADHZhbHVlQ2xhc3Nlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdAAHTWVzc2FnZXQAB21lc3NhZ2V1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAF2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB0AAhyZXNwb25zZXQAF0d6aXBBc3NlcnRpb24tMS4wLTEuamFydAATR1ppcCBvciBHVW56aXAgZGF0YXQAEkdaaXAgLyBHVW56aXAgRGF0YXQAEkdaaXAgLyBHVW56aXAgRGF0YXA=</L7p:base64SerializedValue>
                                    </L7p:CustomAssertion>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Compression done on SOAP 1.1"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                </wsp:All>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="${httpStatusCode}"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} SOAP 1.1 version"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                </wsp:All>
                            </wsp:OneOrMore>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="SOAP 1.1"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:ComparisonAssertion>
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Expression1 stringValue="${soapVersion}"/>
                                <L7p:Operator operatorNull="null"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="1.2"/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:XslTransformation>
                                <L7p:Direction intValue="2"/>
                                <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:param name="currentNameSpace"/>
  <xsl:template match="/">
    <soapenv:Envelope>
    <xsl:apply-templates select="*/*"/>
    </soapenv:Envelope>
  </xsl:template>
     <xsl:template match="*/*">   
    <xsl:element name="{name()}" xmlns:ac="${currentNameSpace}" xmlns:agen="${currentNameSpace}" xmlns:cal="http://moneygram.com/service/callcentertaskservice_v1" xmlns:com="http://moneygram.com/common_v1" xmlns:ns1="http://xml.apache.org/axis/" xmlns:sc="http://www.moneygram.com/ServiceConnect1513" xmlns:ser="http://www.moneygram.com/ServiceConnect1513">
      <xsl:apply-templates select="@* | node() "/>
    </xsl:element>   
  </xsl:template>  
    <xsl:template match="@xsi:type">
    <xsl:copy-of select="."/>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                </L7p:ResourceInfo>
                                <L7p:Target target="RESPONSE"/>
                                <L7p:TransformName stringValue=""/>
                                <L7p:XsltVersion stringValue="1.0"/>
                            </L7p:XslTransformation>
                            <wsp:OneOrMore wsp:Usage="Required">
                                <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${inputContentType}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="gzip"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:HardcodedResponse>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="DO NOT CHECK the send response immediately check box"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ResponseContentType stringValue="application/x-gzip; charset=utf-8"/>
                                    <L7p:ResponseStatus stringValue="${httpStatusCode}"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:CustomAssertion>
                                    <L7p:base64SerializedValue>rO0ABXNyADFjb20ubDd0ZWNoLnBvbGljeS5hc3NlcnRpb24uQ3VzdG9tQXNzZXJ0aW9uSG9sZGVyZtcreFwddTICAAlaAAxpc1VpQXV0b09wZW5MAApjYXRlZ29yaWVzdAAPTGphdmEvdXRpbC9TZXQ7TAAIY2F0ZWdvcnl0ACpMY29tL2w3dGVjaC9wb2xpY3kvYXNzZXJ0aW9uL2V4dC9DYXRlZ29yeTtMAA9jdXN0b21Bc3NlcnRpb250ADFMY29tL2w3dGVjaC9wb2xpY3kvYXNzZXJ0aW9uL2V4dC9DdXN0b21Bc3NlcnRpb247TAAUY3VzdG9tTW9kdWxlRmlsZU5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAA9kZXNjcmlwdGlvblRleHRxAH4ABEwAD3BhbGV0dGVOb2RlTmFtZXEAfgAETAAOcG9saWN5Tm9kZU5hbWVxAH4ABEwAHnJlZ2lzdGVyZWRDdXN0b21GZWF0dXJlU2V0TmFtZXEAfgAEeHIAJWNvbS5sN3RlY2gucG9saWN5LmFzc2VydGlvbi5Bc3NlcnRpb27bX2OZPL2isQIAAloAB2VuYWJsZWRMABBhc3NlcnRpb25Db21tZW50dAAvTGNvbS9sN3RlY2gvcG9saWN5L2Fzc2VydGlvbi9Bc3NlcnRpb24kQ29tbWVudDt4cAFwAXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAABA/QAAAAAAAAXNyAChjb20ubDd0ZWNoLnBvbGljeS5hc3NlcnRpb24uZXh0LkNhdGVnb3J5WrCcZaFE/jUCAAJJAAVteUtleUwABm15TmFtZXEAfgAEeHAAAAALdAAQQ3VzdG9tQXNzZXJ0aW9uc3hwc3IAMWNvbS5sN3RlY2guZXh0ZXJuYWwuYXNzZXJ0aW9ucy5nemlwLkd6aXBBc3NlcnRpb276omWFBjk+GgIAB1oAEmJhc2U2NUVuY29kZURlY29kZVoACmNvbXByZXNzZWRMABFjb21wcmVzc2lvbkZvcm1hdHQARUxjb20vbDd0ZWNoL2V4dGVybmFsL2Fzc2VydGlvbnMvZ3ppcC9HemlwQXNzZXJ0aW9uJENvbXByZXNzaW9uRm9ybWF0O0wAC2NvbnRlbnRUeXBlcQB+AARMAA5zb3VyY2VWYXJpYWJsZXEAfgAETAAOdGFyZ2V0RGF0YVR5cGV0ACVMY29tL2w3dGVjaC9wb2xpY3kvdmFyaWFibGUvRGF0YVR5cGU7TAAOdGFyZ2V0VmFyaWFibGVxAH4ABHhwAAF+cgBDY29tLmw3dGVjaC5leHRlcm5hbC5hc3NlcnRpb25zLmd6aXAuR3ppcEFzc2VydGlvbiRDb21wcmVzc2lvbkZvcm1hdAAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQAA1pJUHQAIWFwcGxpY2F0aW9uL3gtZ3ppcDsgY2hhcnNldD11dGYtOHQACHJlc3BvbnNlc3IAI2NvbS5sN3RlY2gucG9saWN5LnZhcmlhYmxlLkRhdGFUeXBlb86fXcE09MwCAANMAARuYW1lcQB+AARMAAlzaG9ydE5hbWVxAH4ABFsADHZhbHVlQ2xhc3Nlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdAAHTWVzc2FnZXQAB21lc3NhZ2V1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAF2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB0AAhyZXNwb25zZXQAF0d6aXBBc3NlcnRpb24tMS4wLTEuamFydAATR1ppcCBvciBHVW56aXAgZGF0YXQAEkdaaXAgLyBHVW56aXAgRGF0YXQAEkdaaXAgLyBHVW56aXAgRGF0YXA=</L7p:base64SerializedValue>
                                    </L7p:CustomAssertion>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Compression done on SOAP 1.2"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                </wsp:All>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseContentType stringValue="application/soap+xml; charset=UTF-8"/>
                                    <L7p:ResponseStatus stringValue="${httpStatusCode}"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} SOAP 1.2 version"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                </wsp:All>
                            </wsp:OneOrMore>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="SOAP 1.2"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle SOAP Version and compression"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} End of the request, response time = ${request.elapsedTime}ms, service = ${URL}"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="Layer7ACPerfStats.Log"/>
                        <L7p:Detail stringValue="${request.time.local.iso8601},${requestId},${unitProfileID.result},${agentID.result},${agentConnectVersion},${agentSequence.result},${operationName},${httpRouting.reasonCode},${requestSize.mainpart.size},${response.mainpart.size},${httpRouting.latency}"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                    <L7p:AddHeader>
                        <L7p:HeaderName stringValue="Pragma"/>
                        <L7p:HeaderValue stringValue="no-cache"/>
                        <L7p:Target target="RESPONSE"/>
                    </L7p:AddHeader>
                    <L7p:AddHeader>
                        <L7p:HeaderName stringValue="Cache-Control"/>
                        <L7p:HeaderValue stringValue="no-store"/>
                        <L7p:Target target="RESPONSE"/>
                    </L7p:AddHeader>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <CustomAssertionReference RefType="com.l7tech.console.policy.exporter.CustomAssertionReference">
            <CustomAssertionName>GZip / GUnzip Data</CustomAssertionName>
        </CustomAssertionReference>
    </exp:References>
    <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
        <wsp:All wsp:Usage="Required">
            <L7p:AuditAssertion>
                <L7p:SaveRequest booleanValue="true"/>
                <L7p:SaveResponse booleanValue="true"/>
            </L7p:AuditAssertion>
            <L7p:CommentAssertion>
                <L7p:Comment stringValue="AgentConnect1510 proxy"/>
            </L7p:CommentAssertion>
            <L7p:CommentAssertion>
                <L7p:Comment stringValue="Build Tag: Layer7_AgentConnect1510_PROXY_JUL2016_05032016_BUILD_02"/>
            </L7p:CommentAssertion>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="447a9ac4-30e5-4b27-9549-fee34852915f"/>
            </L7p:Include>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="69815253-1d36-467d-9095-edf3e560f0b6"/>
            </L7p:Include>
            <wsp:OneOrMore wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:SchemaValidation>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Validating XML schema with Actual XML Input"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:ResourceInfo globalResourceInfo="included">
                            <L7p:Id stringValue="May_AgentConnect1510.xsd"/>
                        </L7p:ResourceInfo>
                        <L7p:Target target="REQUEST"/>
                    </L7p:SchemaValidation>
                    <L7p:AuditDetailAssertion>
                        <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                        <L7p:Detail stringValue="${requestId} ${connectType} XML Schema validation is successful"/>
                        <L7p:LoggingOnly booleanValue="true"/>
                    </L7p:AuditDetailAssertion>
                </wsp:All>
                <wsp:All wsp:Usage="Required">
                    <L7p:Include>
                        <L7p:PolicyGuid stringValue="4844d83b-a8ba-4820-b1e7-c2fd7582935b"/>
                    </L7p:Include>
                </wsp:All>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="Handle Request Schema Validation"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:OneOrMore>
            <wsp:OneOrMore wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${isErrorOccured}"/>
                        <L7p:ExpressionIsVariable booleanValue="false"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:RightValue stringValue="true"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:TrueAssertion/>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="If there is an error skip this step"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <wsp:All wsp:Usage="Required">
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="referenceNumber"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="referenceNumber"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="commitTransaction"/>
                            </L7p:WSDLOperation>
                            <wsp:OneOrMore wsp:Usage="Required">
                                <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get productType to determine destination route."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="productType"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='commitTransactionRequest']/*[local-name()='productType']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.esb.product.lst}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="${productType.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                    <L7p:VariableToSet stringValue="commitFlag"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                    <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                                    </L7p:SetVariable>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="RCV Mode"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get productType to determine destination route."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="productType"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='productType']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.rtps.product.lst}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="${productType.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="mgiTransactionSessionID"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='mgiTransactionSessionID']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="****************************************************************************************************************"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item regex="included">
                                    <L7p:Pattern stringValue="\w+N\w"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                    <L7p:VariableToSet stringValue="commitFlag"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                    <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                                    </L7p:SetVariable>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Send Mode"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                            </wsp:OneOrMore>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="CommitTransaction"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="formFreeReceiveLookup"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="formFreeRecieveLookup"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="receiveValidation"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="receiveValidation"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="getFieldsForProduct"/>
                            </L7p:WSDLOperation>
                            <L7p:RequestXpathAssertion>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get productType to determine destination route."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:VariablePrefix stringValue="productType"/>
                                <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='getFieldsForProductRequest']/*[local-name()='productType']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                </L7p:XpathExpression>
                            </L7p:RequestXpathAssertion>
                            <L7p:ComparisonAssertion>
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Expression1 stringValue="${productType.result}"/>
                                <L7p:ExpressionIsVariable booleanValue="false"/>
                                <L7p:Operator operatorNull="null"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="RCV"/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="getFieldsForProduct"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="getBroadcastMessages"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="getBroadcastMessage**"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="saveRegistration"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="saveRegistration"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="bpValidation"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="bpValidation"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="sendValidation"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="sendValidation"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="sendReversal"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="sendReversal"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="moneyGramSendDetailReportWithTax"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="commitFlag"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="checkWithESBFlag"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="moneyGramSendDetailReportWithTax"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                                <L7p:VariableToSet stringValue="isRTSAuthenticationRequired"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="non-RTS Security Operations"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Look for RTS Operations"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:ComparisonAssertion>
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Expression1 stringValue="${isRTSAuthenticationRequired}"/>
                                <L7p:ExpressionIsVariable booleanValue="false"/>
                                <L7p:Operator operatorNull="null"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:RightValue stringValue="false"/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} Calling RTS url ${rtsBackEndUrl}"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:Encapsulated>
                                <L7p:EncapsulatedAssertionConfigGuid stringValue="bafd9483-3cca-4270-bd1e-8f397c372f67"/>
                                <L7p:EncapsulatedAssertionConfigName stringValue="RTS Security Authentication"/>
                                <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="acNameSpace"/>
                                    <L7p:value stringValue="${currentNameSpace}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="apiVersion"/>
                                    <L7p:value stringValue="${rtsVersion}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="checkWithEsb"/>
                                    <L7p:value stringValue="${checkWithESBFlag}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="commitValue"/>
                                    <L7p:value stringValue="${commitFlag}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="RTSBackendURL"/>
                                    <L7p:value stringValue="${rtsBackEndUrl}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="rtsNameSpace"/>
                                    <L7p:value stringValue="${rtsNameSpace}"/>
                                    </L7p:entry>
                                </L7p:Parameters>
                            </L7p:Encapsulated>
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId} RTS Check Security response time = ${httpRouting.latency}ms"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle RTS Authentication"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:TrueAssertion/>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Call RTS Security Framework for Authentication"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:ResponseXpathAssertion>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check for success ful security check."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:VariablePrefix stringValue=""/>
                                <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='checkSecurityResponse']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                </L7p:XpathExpression>
                            </L7p:ResponseXpathAssertion>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:ComparisonAssertion>
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Expression1 stringValue="${isRTSAuthenticationRequired}"/>
                                <L7p:ExpressionIsVariable booleanValue="false"/>
                                <L7p:Operator operatorNull="null"/>
                                <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="false"/>
                                    </L7p:item>
                                </L7p:Predicates>
                            </L7p:ComparisonAssertion>
                            <L7p:TrueAssertion/>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="NTAw"/>
                                <L7p:VariableToSet stringValue="httpStatusCode"/>
                            </L7p:SetVariable>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                                <L7p:VariableToSet stringValue="isErrorOccured"/>
                            </L7p:SetVariable>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="RTS Connectivity Failure"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check the RTS Response"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="Handle RTS Authentication"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="RTS Check Security Authentication"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:OneOrMore>
            <wsp:OneOrMore wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${isErrorOccured}"/>
                        <L7p:ExpressionIsVariable booleanValue="false"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:RightValue stringValue="true"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:TrueAssertion/>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="If there is an error skip this step"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:RequestXpathAssertion>
                            <L7p:VariablePrefix stringValue="mgiTransactionSessionID"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*/*[local-name()='mgiTransactionSessionID']"/>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:RequestXpathAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="sendValidation"/>
                                </L7p:WSDLOperation>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the RTPS masked request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}SendValidationRequest checkSecurity status = GRANTED"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="sendValidationRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform for removal of PAN data."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:OtherTargetMessageVariable stringValue="sendValidationRequest"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
    
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="/soapenv:Envelope/soapenv:Body/*[local-name()='sendValidationRequest']/*[local-name()='accountNumber']">
        <accountNumber>********************</accountNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdNumber">
        <senderPhotoIdNumber>********************</senderPhotoIdNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdNumber">
        <senderLegalIdNumber>********************</senderLegalIdNumber>
    </xsl:template>
    
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdNumber">
        <thirdPartyLegalIdNumber>********************</thirdPartyLegalIdNumber>
    </xsl:template>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdNumber">
        <thirdPartyPhotoIdNumber>********************</thirdPartyPhotoIdNumber>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="sendValidationRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue=" INCOMING AC${agentConnectVersion} sendValidationrequest"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform from Ac(RTS) Req to RTPS request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="acToRtpsXslt"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:param name="requestId"/>
       
    <xsl:template match="/">
        <soapenv:Envelope xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Body>
                <real:sendValidationRequest>
                    <com:header>
                        <com:processingInstruction>
                            <com:action>sendValidation</com:action>
                            <com:returnErrorsAsException>true</com:returnErrorsAsException>
                            <com:rollbackTransaction>false</com:rollbackTransaction>
                        </com:processingInstruction>
                        <com:clientHeader>
                            <com:clientRequestID>
                                <xsl:value-of select="$requestId"/>
                            </com:clientRequestID>
                        </com:clientHeader>
                    </com:header>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:unitProfileID) != 0">
                        <real:unitProfileID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:unitProfileID"/>
                        </real:unitProfileID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentID) != 0">
                        <real:agentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentID"/>
                        </real:agentID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentSequence) != 0">
                        <real:agentSequence>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentSequence"/>
                        </real:agentSequence>
                    </xsl:if>
                    <real:token>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:token"/>
                    </real:token>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:language) != 0">
                        <real:language>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:language"/>
                        </real:language>
                    </xsl:if>
                    <real:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:timeStamp"/>
                    </real:timeStamp>

                    <real:apiVersion>1510</real:apiVersion>

                    <real:clientSoftwareVersion>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:clientSoftwareVersion"/>
                    </real:clientSoftwareVersion>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:userID) != 0">
                        <real:userID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:userID"/>
                        </real:userID>
                    </xsl:if>
                    <real:callingApplication>AC</real:callingApplication>
                    <real:noSecurityInvocation>false</real:noSecurityInvocation>
                    <real:noProfileInvocation>false</real:noProfileInvocation>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:operatorName) != 0">
                        <real:operatorName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:operatorName"/>
                        </real:operatorName>
                    </xsl:if>
                    <real:amount>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:amount"/>
                    </real:amount>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:feeAmount) != 0">
                        <real:feeAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:feeAmount"/>
                        </real:feeAmount>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:mgiRewardsNumber) != 0">
                        <real:mgiRewardsNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:mgiRewardsNumber"/>
                        </real:mgiRewardsNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentCustomerNumber) != 0">
                        <real:agentCustomerNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentCustomerNumber"/>
                        </real:agentCustomerNumber>
                    </xsl:if>
                    <real:destinationCountry>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:destinationCountry"/>
                    </real:destinationCountry>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:destinationState) != 0">
                        <real:destinationState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:destinationState"/>
                        </real:destinationState>
                    </xsl:if>
                    <real:deliveryOption>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:deliveryOption"/>
                    </real:deliveryOption>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiveCurrency) != 0">
                        <real:receiveCurrency>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiveCurrency"/>
                        </real:receiveCurrency>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiveAgentID) != 0">
                        <real:receiveAgentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiveAgentID"/>
                        </real:receiveAgentID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:accountNumber) != 0">
                        <real:accountNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:accountNumber"/>
                        </real:accountNumber>
                    </xsl:if>
                     <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:binNumber) != 0">
                        <real:binNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:binNumber"/>
                        </real:binNumber>
                    </xsl:if>
                     <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:cardType) != 0">
                        <real:cardType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:cardType"/>
                        </real:cardType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:customerReceiveNumber) != 0">
                        <real:customerReceiveNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:customerReceiveNumber"/>
                        </real:customerReceiveNumber>
                    </xsl:if>
                    <real:senderFirstName>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderFirstName"/>
                    </real:senderFirstName>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderMiddleName) != 0">
                        <real:senderMiddleName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderMiddleName"/>
                        </real:senderMiddleName>
                    </xsl:if>
                    <real:senderLastName>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLastName"/>
                    </real:senderLastName>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLastName2) != 0">
                        <real:senderLastName2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLastName2"/>
                        </real:senderLastName2>
                    </xsl:if>
                    <real:senderAddress>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderAddress"/>
                    </real:senderAddress>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderAddress2) != 0">
                        <real:senderAddress2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderAddress2"/>
                        </real:senderAddress2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderAddress3) != 0">
                        <real:senderAddress3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderAddress3"/>
                        </real:senderAddress3>
                    </xsl:if>
                    <real:senderCity>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderCity"/>
                    </real:senderCity>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderState) != 0">
                        <real:senderState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderState"/>
                        </real:senderState>
                    </xsl:if>
                    <real:senderZipCode>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderZipCode"/>
                    </real:senderZipCode>
                    <real:senderCountry>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderCountry"/>
                    </real:senderCountry>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderHomePhone) != 0">
                        <real:senderHomePhone>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderHomePhone"/>
                        </real:senderHomePhone>
                    </xsl:if>
                     <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:smsOptIn) != 0">
                        <real:smsOptIn>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:smsOptIn"/>
                        </real:smsOptIn>
                    </xsl:if>
                     <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:smsPhoneNumber) != 0">
                        <real:smsPhoneNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:smsPhoneNumber"/>
                        </real:smsPhoneNumber>
                    </xsl:if>
                     <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:smsCountryDialCode) != 0">
                        <real:smsCountryDialCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:smsCountryDialCode"/>
                        </real:smsCountryDialCode>
                    </xsl:if>
                    <real:receiverFirstName>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverFirstName"/>
                    </real:receiverFirstName>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverMiddleName) != 0">
                        <real:receiverMiddleName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverMiddleName"/>
                        </real:receiverMiddleName>
                    </xsl:if>
                    <real:receiverLastName>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverLastName"/>
                    </real:receiverLastName>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverLastName2) != 0">
                        <real:receiverLastName2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverLastName2"/>
                        </real:receiverLastName2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverAddress) != 0">
                        <real:receiverAddress>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverAddress"/>
                        </real:receiverAddress>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverAddress2) != 0">
                        <real:receiverAddress2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverAddress2"/>
                        </real:receiverAddress2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverAddress3) != 0">
                        <real:receiverAddress3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverAddress3"/>
                        </real:receiverAddress3>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:direction1) != 0">
                        <real:direction1>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:direction1"/>
                        </real:direction1>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:direction2) != 0">
                        <real:direction2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:direction2"/>
                        </real:direction2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:direction3) != 0">
                        <real:direction3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:direction3"/>
                        </real:direction3>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverCity) != 0">
                        <real:receiverCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverCity"/>
                        </real:receiverCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverState) != 0">
                        <real:receiverState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverState"/>
                        </real:receiverState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverZipCode) != 0">
                        <real:receiverZipCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverZipCode"/>
                        </real:receiverZipCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverCountry) != 0">
                        <real:receiverCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverCountry"/>
                        </real:receiverCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverPhone) != 0">
                        <real:receiverPhone>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:receiverPhone"/>
                        </real:receiverPhone>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:testQuestion) != 0">
                        <real:testQuestion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:testQuestion"/>
                        </real:testQuestion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:testAnswer) != 0">
                        <real:testAnswer>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:testAnswer"/>
                        </real:testAnswer>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:messageField1) != 0">
                        <real:messageField1>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:messageField1"/>
                        </real:messageField1>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:messageField2) != 0">
                        <real:messageField2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:messageField2"/>
                        </real:messageField2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdType) != 0">
                        <real:senderPhotoIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdType"/>
                        </real:senderPhotoIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdNumber) != 0">
                        <real:senderPhotoIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdNumber"/>
                        </real:senderPhotoIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdState) != 0">
                        <real:senderPhotoIdState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdState"/>
                        </real:senderPhotoIdState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdCountry) != 0">
                        <real:senderPhotoIdCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdCountry"/>
                        </real:senderPhotoIdCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdType) != 0">
                        <real:senderLegalIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdType"/>
                        </real:senderLegalIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdNumber) != 0">
                        <real:senderLegalIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdNumber"/>
                        </real:senderLegalIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderDOB) != 0">
                        <real:senderDOB>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderDOB"/>
                        </real:senderDOB>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderOccupation) != 0">
                        <real:senderOccupation>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderOccupation"/>
                        </real:senderOccupation>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyFirstName) != 0">
                        <real:thirdPartyFirstName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyFirstName"/>
                        </real:thirdPartyFirstName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyMiddleName) != 0">
                        <real:thirdPartyMiddleName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyMiddleName"/>
                        </real:thirdPartyMiddleName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLastName) != 0">
                        <real:thirdPartyLastName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLastName"/>
                        </real:thirdPartyLastName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLastName2) != 0">
                        <real:thirdPartyLastName2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLastName2"/>
                        </real:thirdPartyLastName2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyAddress) != 0">
                        <real:thirdPartyAddress>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyAddress"/>
                        </real:thirdPartyAddress>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyAddress2) != 0">
                        <real:thirdPartyAddress2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyAddress2"/>
                        </real:thirdPartyAddress2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyAddress3) != 0">
                        <real:thirdPartyAddress3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyAddress3"/>
                        </real:thirdPartyAddress3>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyCity) != 0">
                        <real:thirdPartyCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyCity"/>
                        </real:thirdPartyCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyState) != 0">
                        <real:thirdPartyState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyState"/>
                        </real:thirdPartyState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyZipCode) != 0">
                        <real:thirdPartyZipCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyZipCode"/>
                        </real:thirdPartyZipCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyCountry) != 0">
                        <real:thirdPartyCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyCountry"/>
                        </real:thirdPartyCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdType) != 0">
                        <real:thirdPartyLegalIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdType"/>
                        </real:thirdPartyLegalIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdNumber) != 0">
                        <real:thirdPartyLegalIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdNumber"/>
                        </real:thirdPartyLegalIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyDOB) != 0">
                        <real:thirdPartyDOB>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyDOB"/>
                        </real:thirdPartyDOB>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyOccupation) != 0">
                        <real:thirdPartyOccupation>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyOccupation"/>
                        </real:thirdPartyOccupation>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyOrg) != 0">
                        <real:thirdPartyOrg>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyOrg"/>
                        </real:thirdPartyOrg>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdType) != 0">
                        <real:thirdPartyPhotoIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdType"/>
                        </real:thirdPartyPhotoIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdNumber) != 0">
                        <real:thirdPartyPhotoIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdNumber"/>
                        </real:thirdPartyPhotoIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdState) != 0">
                        <real:thirdPartyPhotoIdState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdState"/>
                        </real:thirdPartyPhotoIdState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdIssueCountry) != 0">
                        <real:thirdPartyPhotoIdIssueCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyPhotoIdIssueCountry"/>
                        </real:thirdPartyPhotoIdIssueCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdIssueCountry) != 0">
                        <real:thirdPartyLegalIdIssueCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:thirdPartyLegalIdIssueCountry"/>
                        </real:thirdPartyLegalIdIssueCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderBirthCity) != 0">
                        <real:senderBirthCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderBirthCity"/>
                        </real:senderBirthCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderBirthCountry) != 0">
                        <real:senderBirthCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderBirthCountry"/>
                        </real:senderBirthCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPassportIssueDate) != 0">
                        <real:senderPassportIssueDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPassportIssueDate"/>
                        </real:senderPassportIssueDate>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPassportIssueCity) != 0">
                        <real:senderPassportIssueCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPassportIssueCity"/>
                        </real:senderPassportIssueCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPassportIssueCountry) != 0">
                        <real:senderPassportIssueCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPassportIssueCountry"/>
                        </real:senderPassportIssueCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdIssueCountry) != 0">
                        <real:senderLegalIdIssueCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderLegalIdIssueCountry"/>
                        </real:senderLegalIdIssueCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderEmailAddress) != 0">
                        <real:senderEmailAddress>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderEmailAddress"/>
                        </real:senderEmailAddress>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderMobilePhone) != 0">
                        <real:senderMobilePhone>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderMobilePhone"/>
                        </real:senderMobilePhone>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:marketingOptIn) != 0">
                        <real:marketingOptIn>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:marketingOptIn"/>
                        </real:marketingOptIn>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:pcTerminalNumber) != 0">
                        <real:pcTerminalNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:pcTerminalNumber"/>
                        </real:pcTerminalNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentUseSendData) != 0">
                        <real:agentUseSendData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentUseSendData"/>
                        </real:agentUseSendData>
                    </xsl:if>
                    <real:sendCurrency>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:sendCurrency"/>
                    </real:sendCurrency>
                    <real:consumerId>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:consumerId"/>
                    </real:consumerId>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdExpDate) != 0">
                        <real:senderPhotoIdExpDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdExpDate"/>
                        </real:senderPhotoIdExpDate>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdIssueDate) != 0">
                        <real:senderPhotoIdIssueDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdIssueDate"/>
                        </real:senderPhotoIdIssueDate>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdStored) != 0">
                        <real:senderPhotoIdStored>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderPhotoIdStored"/>
                        </real:senderPhotoIdStored>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderNationalityCountry) != 0">
                        <real:senderNationalityCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderNationalityCountry"/>
                        </real:senderNationalityCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderNationalityAtBirthCountry) != 0">
                        <real:senderNationalityAtBirthCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:senderNationalityAtBirthCountry"/>
                        </real:senderNationalityAtBirthCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentTransactionId) != 0">
                        <real:agentTransactionId>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:agentTransactionId"/>
                        </real:agentTransactionId>
                    </xsl:if>
                    <real:mgiTransactionSessionID>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:mgiTransactionSessionID"/>
                    </real:mgiTransactionSessionID>
                    <real:formFreeStaging>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:formFreeStaging"/>
                    </real:formFreeStaging>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:timeToLive) != 0">
                        <real:timeToLive>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:timeToLive"/>
                        </real:timeToLive>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:primaryReceiptLanguage) != 0">
                        <real:primaryReceiptLanguage>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:primaryReceiptLanguage"/>
                        </real:primaryReceiptLanguage>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:secondaryReceiptLanguage) != 0">
                        <real:secondaryReceiptLanguage>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:secondaryReceiptLanguage"/>
                        </real:secondaryReceiptLanguage>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:primaryDisclosureVersion) != 0">
                        <real:primaryDisclosureVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:primaryDisclosureVersion"/>
                        </real:primaryDisclosureVersion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:secondaryDisclosureVersion) != 0">
                        <real:secondaryDisclosureVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:secondaryDisclosureVersion"/>
                        </real:secondaryDisclosureVersion>
                    </xsl:if>
                    <real:promoCodeValues>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:promoCodeValues/agen:promoCode">
                            <real:promoCode>
                                <xsl:value-of select="."/>
                            </real:promoCode>
                        </xsl:for-each>
                    </real:promoCodeValues>
                    <real:fieldValues>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:fieldValues/agen:keyValuePair">
                            <real:keyValuePair>
                                <real:key>
                                    <xsl:value-of select="agen:xmlTag"/>
                                </real:key>
                                <real:value>
                                    <xsl:value-of select="agen:fieldValue"/>
                                </real:value>
                            </real:keyValuePair>
                        </xsl:for-each>
                    </real:fieldValues>
                    
                    
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousReferenceNumber) != 0">
                        <real:previousReferenceNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousReferenceNumber"/>
                        </real:previousReferenceNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousTransactionDate) != 0">
                        <real:previousTransactionDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousTransactionDate"/>
                        </real:previousTransactionDate>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousInternalReasonCode) != 0">
                        <real:previousInternalReasonCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousInternalReasonCode"/>
                        </real:previousInternalReasonCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousFeeIsRefunded) != 0">
                        <real:previousFeeIsRefunded>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousFeeIsRefunded"/>
                        </real:previousFeeIsRefunded>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousRefundReasonCode) != 0">
                        <real:previousRefundReasonCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousRefundReasonCode"/>
                        </real:previousRefundReasonCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:internalRequestMFtranId) != 0">
                        <real:internalRequestMFtranId>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:internalRequestMFtranId"/>
                        </real:internalRequestMFtranId>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousSpecialReferenceNumber) != 0">
                        <real:previousSpecialReferenceNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousSpecialReferenceNumber"/>
                        </real:previousSpecialReferenceNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousSpecialTransactionDate) != 0">
                        <real:previousSpecialTransactionDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:sendValidationRequest/agen:previousSpecialTransactionDate"/>
                        </real:previousSpecialTransactionDate>
                    </xsl:if>
                </real:sendValidationRequest>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="rtpsSendValidationRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="246e48c7-34f6-4b3d-8169-df0ce2ae22ad"/>
                                    </L7p:Include>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="rtpsSendValidationRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING AC${agentConnectVersion} RTPS  sendValidationrequest "/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Get receiveAgentID  to check for real time"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="rcvAgent"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/real:sendValidationRequest/real:receiveAgentID"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns1"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="real"/>

                                    <L7p:value stringValue="http://moneygram.com/service/realtimepartnerservice_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="com"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsd"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsi"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:SetVariable>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="ReceiveAgentId not found setting to NA"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Base64Expression stringValue="TkE="/>
                                    <L7p:VariableToSet stringValue="rcvAgent.result"/>
                                    </L7p:SetVariable>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="If receiveAgentId exists grab it otherwise set NA"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.rlt.rcv.agent.lst}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Operator operator="CONTAINS"/>

                                    <L7p:RightValue stringValue="${rcvAgent.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Routing MGSend to RealTime RTPS URL"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item regex="included">

                                    <L7p:Pattern stringValue="\w+Y"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>
                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>
                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="IF recvAgent exists in the list then route to realtime RTPS."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.rlt.rcv.agent.lst}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Negated booleanValue="true"/>

                                    <L7p:Operator operator="CONTAINS"/>

                                    <L7p:RightValue stringValue="${rcvAgent.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Routing sendValidation to Standard RTPS URL"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:HttpRoutingAssertion>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:ProtectedServiceUrl stringValue="http://dmnaaz0544.ad.moneygram.com:8080/Rob/RTPSSimulator"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item regex="included">

                                    <L7p:Pattern stringValue="\w+N"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="The rlt check failed do std call"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>
                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsStandardBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>
                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:VariablePrefix stringValue="errorCode"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/soapenv:Fault/detail/a:error/a:errorCode"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="a"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${errorCode.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:RightValue stringValue="4200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>

                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Send to RTPS RealTime now."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPgogICAgPHNvYXBlbnY6Qm9keT4KICAgICAgICA8c29hcGVudjpGYXVsdD4KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPgogICAgICAgICAgICA8ZmF1bHRzdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9mYXVsdHN0cmluZz4KICAgICAgICAgICAgPGRldGFpbD4KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0iaHR0cDovL3d3dy5tb25leWdyYW0uY29tL0FnZW50Q29ubmVjdDE1MDEiPgogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTQ0PC9hYzplcnJvckNvZGU+CiAgICAgICAgICAgICAgICAgICAgPGFjOmVycm9yU3RyaW5nPkludGVybmFsIFN5c3RlbSBFcnJvcjwvYWM6ZXJyb3JTdHJpbmc+CiAgICAgICAgICAgICAgICAgICAgPGFjOnRpbWVTdGFtcD4ke3RpbWVTdGFtcH08L2FjOnRpbWVTdGFtcD4KICAgICAgICAgICAgICAgIDwvYWM6ZXJyb3I+CiAgICAgICAgICAgICAgICA8bnMxOmV4Y2VwdGlvbk5hbWUgeG1sbnM6bnMxPSJodHRwOi8veG1sLmFwYWNoZS5vcmcvYXhpcy8iPmNvbS5tb25leWdyYW0uYWdlbnRjb25uZWN0LnNvYXAuQUNFeGNlcHRpb248L25zMTpleGNlcHRpb25OYW1lPgogICAgICAgICAgICA8L2RldGFpbD4KICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+CiAgICA8L3NvYXBlbnY6Qm9keT4KPC9zb2FwZW52OkVudmVsb3BlPiA="/>

                                    <L7p:EarlyResponse booleanValue="true"/>

                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:FalseAssertion/>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="RTPS failed return failure response and Stop Processing"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Call real time RTPS if RTPS fails return response and stop processing"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="If error code 4200 route to realtime RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:TrueAssertion/>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if error code is 4200 and route to Real Time RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="IF recvAgent do not exist in the list route to Standard RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check the last character of the transaction session ID to determine if it is a real time or Std RTPS call"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="rtpsSendValidationResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="e23a2b32-eea4-4337-bf2e-07d470046adf"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------RTPS SendValidationResponse [GUID = ${requestId}]= ${rtpsSendValidationResponse.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="rtpsSendValidationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING RTPS SendValidationResponse"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:VariablePrefix stringValue="rspFault"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/soapenv:Fault"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="b"/>

                                    <L7p:value stringValue="http://moneygram.com/service/realtimepartnerservice_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="a"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="xsd"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="xsi"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Fault Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="a b" version="1.0" xmlns:a="http://moneygram.com/common_v1" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    <xsl:param name="timeStamp" select="'NA'"/>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/soapenv:Fault">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <soapenv:Fault>
                    <faultcode>soapenv:Server</faultcode>
                    <faultstring><xsl:value-of select="detail/a:error/a:errorMessage"/></faultstring>
                    <detail>
                        <ac:error xmlns:ac="{${currentNameSpace}}">
                            <ac:errorCode><xsl:value-of select="detail/a:error/a:errorCode"/></ac:errorCode>
                            <ac:errorString><xsl:value-of select="detail/a:error/a:errorMessage"/></ac:errorString>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:code)!=0">
                                <ac:subErrorCode><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:code"/></ac:subErrorCode>  
                            </xsl:if>                                                                             
                            <xsl:if test="detail/a:error/a:offendingField">
                                <ac:offendingField><xsl:value-of select="detail/a:error/a:offendingField"/></ac:offendingField>  
                            </xsl:if>                                       
                            <ac:timeStamp><xsl:value-of select="$timeStamp"/></ac:timeStamp>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:message)!=0">
                                <ac:detailString><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:message"/></ac:detailString>  
                            </xsl:if>
                        </ac:error>
                        <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>        
        </soapenv:Envelope> 
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>

                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if fault element is present if do fault conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="real" version="1.0" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:sendValidationResponse xmlns:ac="{${currentNameSpace}}">
                    <ac:doCheckIn>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:doCheckIn"/>
                    </ac:doCheckIn>
                    <ac:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:timeStamp"/>
                    </ac:timeStamp>
                    <ac:flags>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:flags"/>
                    </ac:flags>
                    <ac:mgiTransactionSessionID>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:mgiTransactionSessionID"/>
                    </ac:mgiTransactionSessionID>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:token) != 0">
                        <ac:token>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:token"/>
                        </ac:token>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:customerReceiveNumber) != 0">
                        <ac:customerReceiveNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:customerReceiveNumber"/>
                        </ac:customerReceiveNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:accountNumberLastFour) != 0">
                        <ac:displayAccountID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:accountNumberLastFour"/>
                        </ac:displayAccountID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:customerServiceMessage) != 0">
                        <ac:customerServiceMessage>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:customerServiceMessage"/>
                        </ac:customerServiceMessage>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:accountNickname) != 0">
                        <ac:accountNickname>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:accountNickname"/>
                        </ac:accountNickname>
                    </xsl:if>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:promotionInfo">
                        <ac:promotionInfo>
                            <ac:promotionCode>
                                <xsl:value-of select="real:promotionCode"/>
                            </ac:promotionCode>
                            <ac:promotionDiscountId>
                                <xsl:value-of select="real:promotionDiscountId"/>
                            </ac:promotionDiscountId>
                            <ac:promotionCategoryId>
                                <xsl:value-of select="real:promotionCategoryId"/>
                            </ac:promotionCategoryId>
                            <ac:promotionDiscount>
                                <xsl:value-of select="real:promotionDiscount"/>
                            </ac:promotionDiscount>
                            <ac:promotionDiscountAmount>
                                <xsl:value-of select="real:promotionDiscountAmount"/>
                            </ac:promotionDiscountAmount>
                            <xsl:if test="string-length(real:promotionErrorCode) != 0">
                                <ac:promotionErrorCode>
                                    <xsl:value-of select="real:promotionErrorCode"/>
                                </ac:promotionErrorCode>
                            </xsl:if>
                            <xsl:for-each select="real:promotionErrorMessage">
                                <ac:promotionErrorMessage>
                                    <ac:longLanguageCode>
                                        <xsl:value-of select="real:longLanguageCode"/>
                                    </ac:longLanguageCode>
                                    <ac:textTranslation>
                                        <xsl:value-of select="real:textTranslation"/>
                                    </ac:textTranslation>
                                </ac:promotionErrorMessage>
                            </xsl:for-each>
                        </ac:promotionInfo>
                    </xsl:for-each>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:promotionalMessage">
                        <ac:promotionalMessage>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:promotionalMessage>
                    </xsl:for-each>
                    <ac:readyForCommit>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:readyForCommit"/>
                    </ac:readyForCommit>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:disclosureText">
                        <ac:disclosureText>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:disclosureText>
                    </xsl:for-each>
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAgentName) != 0">
                        <ac:receiveAgentName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAgentName"/>
                        </ac:receiveAgentName>
                    </xsl:if>
                    
                    <ac:receiveAgentAddress>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAgentAddress/real:agentAddressLine">
                            <ac:agentAddressLine>
                                <xsl:value-of select="."/>
                            </ac:agentAddressLine>
                        </xsl:for-each>
                    </ac:receiveAgentAddress>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:additionalFieldsToCollect">
                        <ac:additionalFieldsToCollect>
                            <ac:xmlTag>
                                <xsl:value-of select="real:xmlTag"/>
                            </ac:xmlTag>
                            <ac:visibility>
                                <xsl:value-of select="real:visibility"/>
                            </ac:visibility>
                            <ac:fieldLabel>
                                <xsl:value-of select="real:fieldLabel"/>
                            </ac:fieldLabel>
                            <ac:displayOrder>
                                <xsl:value-of select="real:displayOrder"/>
                            </ac:displayOrder>
                            <ac:fieldCategory>
                                <xsl:value-of select="real:fieldCategory"/>
                            </ac:fieldCategory>
                            <ac:dynamic>
                                <xsl:value-of select="real:dynamic"/>
                            </ac:dynamic>
                            <ac:fieldMax>
                                <xsl:value-of select="real:fieldMax"/>
                            </ac:fieldMax>
                            <ac:fieldMin>
                                <xsl:value-of select="real:fieldMin"/>
                            </ac:fieldMin>
                            <ac:dataType>
                                <xsl:value-of select="real:dataType"/>
                            </ac:dataType>
                            <ac:enumerated>
                                <xsl:value-of select="real:enumerated"/>
                            </ac:enumerated>
                            <ac:defaultValue>
                                <xsl:value-of select="real:defaultValue"/>
                            </ac:defaultValue>
                            <ac:validationRegEx>
                                <xsl:value-of select="real:validationRegEx"/>
                            </ac:validationRegEx>
                            <ac:arrayName>
                                <xsl:value-of select="real:arrayName"/>
                            </ac:arrayName>
                            <ac:arrayLength>
                                <xsl:value-of select="real:arrayLength"/>
                            </ac:arrayLength>
                            <ac:exampleFormat>
                                <xsl:value-of select="real:exampleFormat"/>
                            </ac:exampleFormat>
                            <ac:enumeratedValues>
                                <xsl:for-each select="real:enumeratedValues/real:enumeratedValueInfo">
                                    <ac:enumeratedValueInfo>
                                        <ac:value>
                                            <xsl:value-of select="real:value"/>
                                        </ac:value>
                                        <ac:label>
                                            <xsl:value-of select="real:label"/>
                                        </ac:label>
                                    </ac:enumeratedValueInfo>
                                </xsl:for-each>
                            </ac:enumeratedValues>
                        </ac:additionalFieldsToCollect>
                    </xsl:for-each>
                    <ac:sendAmounts>
                        <ac:sendAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:sendAmount"/>
                        </ac:sendAmount>
                        <ac:sendCurrency>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:sendCurrency"/>
                        </ac:sendCurrency>
                        <ac:totalSendFees>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:totalSendFees"/>
                        </ac:totalSendFees>
                        <ac:totalDiscountAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:totalDiscountAmount"/>
                        </ac:totalDiscountAmount>
                        <ac:totalSendTaxes>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:totalSendTaxes"/>
                        </ac:totalSendTaxes>
                        <ac:totalAmountToCollect>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:totalAmountToCollect"/>
                        </ac:totalAmountToCollect>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:sendAmounts/real:detailSendAmounts">
                            <ac:detailSendAmounts>
                                <ac:amountType>
                                    <xsl:value-of select="real:amountType"/>
                                </ac:amountType>
                                <ac:amount>
                                    <xsl:value-of select="real:amount"/>
                                </ac:amount>
                                <ac:amountCurrency>
                                    <xsl:value-of select="real:amountCurrency"/>
                                </ac:amountCurrency>
                            </ac:detailSendAmounts>
                        </xsl:for-each>
                    </ac:sendAmounts>
                    <ac:receiveAmounts>
                        <ac:receiveAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:receiveAmount"/>
                        </ac:receiveAmount>
                        <ac:receiveCurrency>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:receiveCurrency"/>
                        </ac:receiveCurrency>
                        <ac:validCurrencyIndicator>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:validCurrencyIndicator"/>
                        </ac:validCurrencyIndicator>
                        <ac:payoutCurrency>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:payoutCurrency"/>
                        </ac:payoutCurrency>
                        <ac:totalReceiveFees>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:totalReceiveFees"/>
                        </ac:totalReceiveFees>
                        <ac:totalReceiveTaxes>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:totalReceiveTaxes"/>
                        </ac:totalReceiveTaxes>
                        <ac:totalReceiveAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:totalReceiveAmount"/>
                        </ac:totalReceiveAmount>
                        <ac:receiveFeesAreEstimated>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:receiveFeesAreEstimated"/>
                        </ac:receiveFeesAreEstimated>
                        <ac:receiveTaxesAreEstimated>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:receiveTaxesAreEstimated"/>
                        </ac:receiveTaxesAreEstimated>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveAmounts/real:detailReceiveAmounts">
                            <ac:detailReceiveAmounts>
                                <ac:amountType>
                                    <xsl:value-of select="real:amountType"/>
                                </ac:amountType>
                                <ac:amount>
                                    <xsl:value-of select="real:amount"/>
                                </ac:amount>
                                <ac:amountCurrency>
                                    <xsl:value-of select="real:amountCurrency"/>
                                </ac:amountCurrency>
                            </ac:detailReceiveAmounts>
                        </xsl:for-each>
                    </ac:receiveAmounts>
                    <ac:exchangeRateApplied>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:exchangeRateApplied"/>
                    </ac:exchangeRateApplied>
                    <ac:receiveFeeDisclosureText>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveFeeDisclosureText"/>
                    </ac:receiveFeeDisclosureText>
                    <ac:receiveTaxDisclosureText>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiveTaxDisclosureText"/>
                    </ac:receiveTaxDisclosureText>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:confirmationNumber) != 0">
                        <ac:confirmationNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:confirmationNumber"/>
                        </ac:confirmationNumber>
                    </xsl:if>			
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiptMimeType) != 0">
                        <ac:receiptMimeType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:receiptMimeType"/>
                        </ac:receiptMimeType>
                    </xsl:if>				
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:disclosure1MimeData) != 0">        
                        <ac:disclosure1MimeData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:disclosure1MimeData"/>
                        </ac:disclosure1MimeData>	
                    </xsl:if>	
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:disclosure2MimeData) != 0">        
                        <ac:disclosure2MimeData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:sendValidationResponse/real:disclosure2MimeData"/>
                        </ac:disclosure2MimeData>	
                    </xsl:if>	
                    
                </ac:sendValidationResponse>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>

                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Not a fault - Do Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check if Fault if Fault do the Folut conversion else do response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="acSendValidationResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="acSendValidationResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="{${currentNameSpace}}" xmlns:com="http://moneygram.com/common_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
    
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    <!-- Nothing masked
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:sendValidationResponse/agen:sendAmounts/agen:sendCurrency">
        <sendCurrency>********************</sendCurrency>
    </xsl:template>
    -->
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------OUTGOING AC SendValidationResponse [GUID = ${requestId}]= ${acSendValidationResponse.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="rtpsSendValidationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING RTPS SendValidationResponse"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    </wsp:OneOrMore>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="*** AC${agentConnectVersion} SendValidation Request/Response Stats ---> [L7Service = ${service.name}][GUID = ${requestId}][TotalDuration = ${httpRouting.latency} ms][ReasonCode = ${httpRouting.reasonCode}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Proceed with Transaction if no security fault"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Convert sendValidation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="commitTransaction"/>
                                </L7p:WSDLOperation>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get productType to determine destination route."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="productType"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='productType']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.rtps.product.lst}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="${productType.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item regex="included">
                                    <L7p:Pattern stringValue="\w+N\w"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the RTPS masked request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} CommitTransactionRequest checkSecurity status = GRANTED"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="acCommitTransactionRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="acCommitTransactionRequest"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
    
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    
    <!--   Nothing to mask in commitTransactionResponse
        <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:agentSequence">
        <agentSequence>********************</agentSequence>
  </xsl:template>
 -->
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="acCommitTransactionRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING AC${agentConnectVersion} CommitTransaction Request"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Transform from Ac(RTS) Req to RTPS request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:MsgVarPrefix stringValue="acToRtpsXslt"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:param name="requestId"/>
    <xsl:template match="/">
        <soapenv:Envelope xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Body>
                <real:commitTransactionRequest>
                    <com:header>
                        <com:processingInstruction>
                            <com:action>commitTransaction</com:action>
                            <com:returnErrorsAsException>true</com:returnErrorsAsException>
                            <com:rollbackTransaction>false</com:rollbackTransaction>
                        </com:processingInstruction>
                        <com:clientHeader>
                            <com:clientRequestID><xsl:value-of select="$requestId"/></com:clientRequestID>
                        </com:clientHeader>
                    </com:header>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:unitProfileID) != 0">
                        <real:unitProfileID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:unitProfileID"/>
                        </real:unitProfileID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:agentID) != 0">
                        <real:agentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:agentID"/>
                        </real:agentID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:agentSequence) != 0">
                        <real:agentSequence>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:agentSequence"/>
                        </real:agentSequence>
                    </xsl:if>
                    <real:token>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:token"/>
                    </real:token>
                    <real:language>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:language"/>
                    </real:language>
                    <real:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:timeStamp"/>
                    </real:timeStamp>
                    
                    <real:apiVersion>1510</real:apiVersion>
                    
                    <real:clientSoftwareVersion>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:clientSoftwareVersion"/>
                    </real:clientSoftwareVersion>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:userID) != 0">
                        <real:userID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:userID"/>
                        </real:userID>
                    </xsl:if>
                    <real:mgiTransactionSessionID>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:mgiTransactionSessionID"/>
                    </real:mgiTransactionSessionID>
                    <real:productType>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:productType"/>
                    </real:productType>
                    <real:fieldValues>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:fieldValues/agen:keyValuePair">
                            <real:keyValuePair>
                                <real:key>
                                    <xsl:value-of select="agen:xmlTag"/>
                                </real:key>
                                <real:value>
                                    <xsl:value-of select="agen:fieldValue"/>
                                </real:value>
                            </real:keyValuePair>
                        </xsl:for-each>
                    </real:fieldValues>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:stateRegulatorVersion) != 0">
                        <real:stateRegulatorVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:stateRegulatorVersion"/>
                        </real:stateRegulatorVersion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:primaryConsumerReceiptVersion) != 0">
                        <real:primaryConsumerReceiptVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:primaryConsumerReceiptVersion"/>
                        </real:primaryConsumerReceiptVersion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:secondaryConsumerReceiptVersion) != 0">
                        <real:secondaryConsumerReceiptVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:secondaryConsumerReceiptVersion"/>
                        </real:secondaryConsumerReceiptVersion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:primaryAgentReceiptVersion) != 0">
                        <real:primaryAgentReceiptVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:primaryAgentReceiptVersion"/>
                        </real:primaryAgentReceiptVersion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:secondaryAgentReceiptVersion) != 0">
                        <real:secondaryAgentReceiptVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:commitTransactionRequest/agen:secondaryAgentReceiptVersion"/>
                        </real:secondaryAgentReceiptVersion>
                    </xsl:if>
                </real:commitTransactionRequest>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>

                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>

                                    <L7p:DataType variableDataType="message"/>

                                    <L7p:VariableToSet stringValue="rtpsCommitTransactionRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>

                                    <L7p:PolicyGuid stringValue="4b13a7ed-c321-49e7-8db6-f9a80d8a8d17"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------RTPS commitTransactionRequest [GUID = ${requestId}] = ${rtpsCommitTransactionRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>

                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="CustomLoggerName"/>

                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="logRequest"/>

                                    <L7p:value stringValue="rtpsCommitTransactionRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="messagePrefix"/>

                                    <L7p:value stringValue="OUTGOING RTPS CommitTransaction Request"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item regex="included">

                                    <L7p:Pattern stringValue="\w+N"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Send the the non realtime RTPS first"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsStandardBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>

                                    <wsp:OneOrMore wsp:Usage="Required">

                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:VariablePrefix stringValue="errorCode"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='Fault']/detail/a:error/a:errorCode"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="a"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${errorCode.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:RightValue stringValue="4200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>

                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Send to RTPS RealTime now."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>

                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>

                                    <L7p:EarlyResponse booleanValue="true"/>

                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:FalseAssertion/>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="RTPS failed return failure response and Stop Processing"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Call real time RTPS if RTPS fails return response and stop processing"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="If error code 4200 route to realtime RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:TrueAssertion/>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if error code is 4200 and route to Real Time RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item regex="included">

                                    <L7p:Pattern stringValue="\w+Y"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Send to RTPS RealTime now."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:VariablePrefix stringValue="rspFault"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='Fault']"/>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Fault Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Direction intValue="2"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="a b" version="1.0" xmlns:a="http://moneygram.com/common_v1" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    <xsl:param name="timeStamp" select="'NA'"/>
    
    
    <xsl:template match="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='Fault']">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <soapenv:Fault>
                    <faultcode><xsl:value-of select="faultcode"/></faultcode>
                    <faultstring><xsl:value-of select="detail/a:error/a:errorMessage"/></faultstring>
                    <detail>
                        <ac:error xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                            <ac:errorCode><xsl:value-of select="detail/a:error/a:errorCode"/></ac:errorCode>
                            <ac:errorString><xsl:value-of select="detail/a:error/a:errorMessage"/></ac:errorString>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:code)!=0">
                                <ac:subErrorCode><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:code"/></ac:subErrorCode>  
                            </xsl:if>                                         
                            
                            <xsl:if test="detail/a:error/a:offendingField">
                                <ac:offendingField><xsl:value-of select="detail/a:error/a:offendingField"/></ac:offendingField>  
                            </xsl:if>
                            
                            <ac:timeStamp><xsl:value-of select="$timeStamp"/></ac:timeStamp>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:message)!=0">
                                <ac:detailString><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:message"/></ac:detailString>  
                            </xsl:if>
                        </ac:error>
                        <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>        
        </soapenv:Envelope> 
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>

                                    <L7p:Target target="RESPONSE"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if fault element is present if do fault conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>

                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>

                                    <L7p:DataType variableDataType="message"/>

                                    <L7p:VariableToSet stringValue="rtpsCommitTransactionResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>

                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="rtpsCommitTransactionResponse"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

    <!-- Nothing to mask out ->
    <xsl:template match="/soapenv:Envelope/soapenv:Body/b:commitTransactionResponse/b:freePhoneCallPIN">
        <b:freePhoneCallPIN>********************</b:freePhoneCallPIN>
    </xsl:template>
    -->
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>

                                    <L7p:Target target="OTHER"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:Include>

                                    <L7p:PolicyGuid stringValue="1de82213-97a9-4f8d-86ef-8189ee88d801"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>

                                    <L7p:Detail stringValue="------RTPS commitTransactionResponse [GUID = ${requestId}]= ${rtpsCommitTransactionResponse.mainpart}"/>

                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>

                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="CustomLoggerName"/>

                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="logResponse"/>

                                    <L7p:value stringValue="rtpsCommitTransactionResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="messagePrefix"/>

                                    <L7p:value stringValue="INCOMING RTPS CommitTransaction Response"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Direction intValue="2"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="real" version="1.0" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:commitTransactionResponse xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                    <ac:doCheckIn>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:doCheckIn"/>
                    </ac:doCheckIn>
                    <ac:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:timeStamp"/>
                    </ac:timeStamp>
                    <ac:flags>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:flags"/>
                    </ac:flags>
                    <ac:referenceNumber>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:referenceNumber"/>
                    </ac:referenceNumber>
                    <ac:partnerConfirmationNumber>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:partnerConfirmationNumber"/>
                    </ac:partnerConfirmationNumber>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:partnerName) != 0">
                        <ac:partnerName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:partnerName"/>
                        </ac:partnerName>
                    </xsl:if>
                    <ac:freePhoneCallPIN>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:freePhoneCallPIN"/>
                    </ac:freePhoneCallPIN>
                    <ac:tollFreePhoneNumber>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:tollFreePhoneNumber"/>
                    </ac:tollFreePhoneNumber>
                    <ac:expectedDateOfDelivery>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:expectedDateOfDelivery"/>
                    </ac:expectedDateOfDelivery>
                    <ac:transactionDateTime>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:transactionDateTime"/>
                    </ac:transactionDateTime>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:agentCheckAuthorizationNumber) != 0">
                        <ac:agentCheckAuthorizationNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:agentCheckAuthorizationNumber"/>
                        </ac:agentCheckAuthorizationNumber>
                    </xsl:if>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:receiptTextInfo">
                        <ac:receiptTextInfo>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:receiptTextInfo>
                    </xsl:for-each>
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:receiptMimeType) != 0">
                        <ac:receiptMimeType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:receiptMimeType"/>
                        </ac:receiptMimeType>
                    </xsl:if>				
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:agentReceiptMimeData) != 0">        
                        <ac:agentReceiptMimeData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:agentReceiptMimeData"/>
                        </ac:agentReceiptMimeData>	
                    </xsl:if>	
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:consumerReceipt1MimeData) != 0">        
                        <ac:consumerReceipt1MimeData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:consumerReceipt1MimeData"/>
                        </ac:consumerReceipt1MimeData>	
                    </xsl:if>	
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:consumerReceipt2MimeData) != 0">        
                        <ac:consumerReceipt2MimeData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:consumerReceipt2MimeData"/>
                        </ac:consumerReceipt2MimeData>	
                    </xsl:if>	
                    
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:commitTransactionResponse/real:alerts">
                        <ac:alerts>
                            <xsl:if test="string-length(real:poeTranID) != 0">        
                                <ac:poeTranID>
                                    <xsl:value-of select="real:poeTranID"/>
                                </ac:poeTranID>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:poeTranEventID) != 0">        
                                <ac:poeTranEventID>
                                    <xsl:value-of select="real:poeTranEventID"/>
                                </ac:poeTranEventID>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:alertStatusCode) != 0">        
                                <ac:alertStatusCode>
                                    <xsl:value-of select="real:alertStatusCode"/>
                                </ac:alertStatusCode>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:alertStatusBsnsDesc) != 0">        
                                <ac:alertStatusBsnsDesc>
                                    <xsl:value-of select="real:alertStatusBsnsDesc"/>
                                </ac:alertStatusBsnsDesc>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:sourceSystemId) != 0">        
                                <ac:sourceSystemId>
                                    <xsl:value-of select="real:sourceSystemId"/>
                                </ac:sourceSystemId>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:application) != 0">        
                                <ac:application>
                                    <xsl:value-of select="real:application"/>
                                </ac:application>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:businessAreaCode) != 0">        
                                <ac:businessAreaCode>
                                    <xsl:value-of select="real:businessAreaCode"/>
                                </ac:businessAreaCode>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:actionLevelCode) != 0">        
                                <ac:actionLevelCode>
                                    <xsl:value-of select="real:actionLevelCode"/>
                                </ac:actionLevelCode>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:mgiInternalIssueScreeningID) != 0">        
                                <ac:mgiInternalIssueScreeningID>
                                    <xsl:value-of select="real:mgiInternalIssueScreeningID"/>
                                </ac:mgiInternalIssueScreeningID>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:consumerID) != 0">        
                                <ac:consumerID>
                                    <xsl:value-of select="real:consumerID"/>
                                </ac:consumerID>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:consumerEntityID) != 0">        
                                <ac:consumerEntityID>
                                    <xsl:value-of select="real:consumerEntityID"/>
                                </ac:consumerEntityID>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:cleansedAddress) != 0">        
                                <ac:cleansedAddress>
                                    <xsl:value-of select="real:cleansedAddress"/>
                                </ac:cleansedAddress>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:alertStatusBeginDate) != 0">        
                                <ac:alertStatusBeginDate>
                                    <xsl:value-of select="real:alertStatusBeginDate"/>
                                </ac:alertStatusBeginDate>	
                            </xsl:if>	
                            <xsl:if test="string-length(real:reaggregateInd) != 0">        
                                <ac:reaggregateInd>
                                    <xsl:value-of select="real:reaggregateInd"/>
                                </ac:reaggregateInd>	
                            </xsl:if>	
                            
                            
                            <xsl:for-each select="real:actionReasons">
                                <ac:actionReasons>
                                    <xsl:for-each select="real:reason">                                     
                                        <ac:reason>
                                            <xsl:if test="string-length(real:reasonCode) != 0">        
                                                <ac:reasonCode>
                                                    <xsl:value-of select="real:reasonCode"/>
                                                </ac:reasonCode>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:reasonBsnsDesc) != 0">        
                                                <ac:reasonBsnsDesc>
                                                    <xsl:value-of select="real:reasonBsnsDesc"/>
                                                </ac:reasonBsnsDesc>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:type) != 0">        
                                                <ac:type>
                                                    <xsl:value-of select="real:type"/>
                                                </ac:type>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:subType) != 0">        
                                                <ac:subType>
                                                    <xsl:value-of select="real:subType"/>
                                                </ac:subType>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:autoManualIndicator) != 0">        
                                                <ac:autoManualIndicator>
                                                    <xsl:value-of select="real:autoManualIndicator"/>
                                                </ac:autoManualIndicator>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:reasonSequence) != 0">        
                                                <ac:reasonSequence>
                                                    <xsl:value-of select="real:reasonSequence"/>
                                                </ac:reasonSequence>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:amendable) != 0">        
                                                <ac:amendable>
                                                    <xsl:value-of select="real:amendable"/>
                                                </ac:amendable>	
                                            </xsl:if>	
                                        </ac:reason>
                                    </xsl:for-each>
                                    
                                    <xsl:if test="string-length(real:reasonBeginDate) != 0">        
                                        <ac:reasonBeginDate>
                                            <xsl:value-of select="real:reasonBeginDate"/>
                                        </ac:reasonBeginDate>	
                                    </xsl:if>	
                                    <xsl:if test="string-length(real:highestRulePartyErrorCode) != 0">        
                                        <ac:highestRulePartyErrorCode>
                                            <xsl:value-of select="real:highestRulePartyErrorCode"/>
                                        </ac:highestRulePartyErrorCode>	
                                    </xsl:if>	
                                    <xsl:if test="string-length(real:highestRulePartySubErrorCode) != 0">        
                                        <ac:highestRulePartySubErrorCode>
                                            <xsl:value-of select="real:highestRulePartySubErrorCode"/>
                                        </ac:highestRulePartySubErrorCode>	
                                    </xsl:if>	
                                    
                                    <xsl:for-each select="real:rules">                                     
                                        <ac:rules>
                                            <xsl:if test="string-length(real:ruleConfigID) != 0">        
                                                <ac:ruleConfigID>
                                                    <xsl:value-of select="real:ruleConfigID"/>
                                                </ac:ruleConfigID>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:ruleErrorCode) != 0">        
                                                <ac:ruleErrorCode>
                                                    <xsl:value-of select="real:ruleErrorCode"/>
                                                </ac:ruleErrorCode>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:ruleSubErrorCode) != 0">        
                                                <ac:ruleSubErrorCode>
                                                    <xsl:value-of select="real:ruleSubErrorCode"/>
                                                </ac:ruleSubErrorCode>	
                                            </xsl:if>	
                                            <xsl:if test="string-length(real:rulePrtyNumber) != 0">        
                                                <ac:rulePrtyNumber>
                                                    <xsl:value-of select="real:rulePrtyNumber"/>
                                                </ac:rulePrtyNumber>	
                                            </xsl:if>	
                                        </ac:rules>
                                    </xsl:for-each>
                                 </ac:actionReasons>
                            </xsl:for-each>
                        </ac:alerts>
                    </xsl:for-each>
                    
                    
                    
                </ac:commitTransactionResponse>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>

                                    <L7p:Target target="RESPONSE"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>

                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>

                                    <L7p:DataType variableDataType="message"/>

                                    <L7p:VariableToSet stringValue="acCommitTransactionResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>

                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="acCommitTransactionResponse"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:com="http://moneygram.com/common_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
    
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    
    <!-- Nothing to mask
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:commitTransactionResponse/agen:freePhoneCallPIN">
        <freePhoneCallPIN>********************</freePhoneCallPIN>
    </xsl:template>
     -->
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>

                                    <L7p:Target target="OTHER"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>

                                    <L7p:Detail stringValue="------OUTGOING AC${agentConnectVersion} commitTransactionResponse [GUID = ${requestId}]= ${acCommitTransactionResponse.mainpart}"/>

                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>

                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="CustomLoggerName"/>

                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="logResponse"/>

                                    <L7p:value stringValue="acCommitTransactionResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="messagePrefix"/>

                                    <L7p:value stringValue="OUTGOING AC${agentConnectVersion} CommitTransaction Response"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    </wsp:All>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if Fault if Fault do the Folut conversion else do response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Transform and route to RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>

                                    <L7p:EarlyResponse booleanValue="true"/>

                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="General RTPS error handling"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if product belongs to RTPS product list"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="The commitTransaction processing."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Catch block for commitTransaction errors"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Try catch block for commitTransaction"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}*** AC${agentConnectVersion} CommitTransaction Request/Response Stats ---> [L7Service = ${service.name}][GUID = ${requestId}][TotalDuration = ${httpRouting.latency} ms][ReasonCode = ${httpRouting.reasonCode}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Proceed with Transaction if no security fault"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Branch for other allowed product types - SEND and BP"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Convert commitTransaction opertaion[SEND|BP]"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="bpValidation"/>
                                </L7p:WSDLOperation>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${mgiTransactionSessionID.result}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item regex="included">
                                    <L7p:Pattern stringValue="\w+N\w"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="acBpValidationRequest"/>
                                    </L7p:SetVariable>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="acBpValidationRequest"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
    
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="//*[local-name()='billerAccountNumber']">
        <billerAccountNumber>********************</billerAccountNumber>
    </xsl:template>      
    <xsl:template match="//*[local-name()='senderPhotoIdNumber']">
        <senderPhotoIdNumber>********************</senderPhotoIdNumber>
    </xsl:template>
    <xsl:template match="//*[local-name()='senderLegalIdNumber']">
        <senderLegalIdNumber>********************</senderLegalIdNumber>
    </xsl:template>
    
    <xsl:template match="//*[local-name()='thirdPartyLegalIdNumber']">
        <thirdPartyLegalIdNumber>********************</thirdPartyLegalIdNumber>
    </xsl:template>
    
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="acBpValidationRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING AC${agentConnectVersion} bpValidationrequest"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------ INCOMING AC${agentConnectVersion} bpValidationRequest [GUID = ${requestId}]= ${acBpValidationRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Transform from Ac(RTS) Req to RTPS request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="acoRtpsXslt"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:param name="requestId"/>
    <xsl:template match="/">
        <soapenv:Envelope xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Body>
                <real:bpValidationRequest>
                    <com:header>
                        <com:processingInstruction>
                            <com:action>bpValidation</com:action>
                            <com:returnErrorsAsException>true</com:returnErrorsAsException>
                            <com:rollbackTransaction>false</com:rollbackTransaction>
                        </com:processingInstruction>
                        <com:clientHeader>
                            <com:clientRequestID><xsl:value-of select="$requestId"/></com:clientRequestID>
                        </com:clientHeader>
                    </com:header>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:unitProfileID) != 0">
                        <real:unitProfileID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:unitProfileID"/>
                        </real:unitProfileID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentID) != 0">
                        <real:agentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentID"/>
                        </real:agentID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentSequence) != 0">
                        <real:agentSequence>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentSequence"/>
                        </real:agentSequence>
                    </xsl:if>
                    <real:token>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:token"/>
                    </real:token>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:language) != 0">
                        <real:language>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:language"/>
                        </real:language>
                    </xsl:if>
                    <real:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:timeStamp"/>
                    </real:timeStamp>
                    
                    <real:apiVersion>1509</real:apiVersion>
                    
                    <real:clientSoftwareVersion>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:clientSoftwareVersion"/>
                    </real:clientSoftwareVersion>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:userID) != 0">
                        <real:userID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:userID"/>
                        </real:userID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:operatorName) != 0">
                        <real:operatorName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:operatorName"/>
                        </real:operatorName>
                    </xsl:if>
                    <real:productVariant>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:productVariant"/>
                    </real:productVariant>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:serviceOfferingID) != 0">
                        <real:serviceOfferingID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:serviceOfferingID"/>
                        </real:serviceOfferingID>
                    </xsl:if>
                    <real:amount>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:amount"/>
                    </real:amount>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:mgiRewardsNumber) != 0">
                        <real:mgiRewardsNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:mgiRewardsNumber"/>
                        </real:mgiRewardsNumber>
                    </xsl:if>
                    <real:destinationCountry>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:destinationCountry"/>
                    </real:destinationCountry>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiveCode) != 0">
                        <real:receiveCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiveCode"/>
                        </real:receiveCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiveAgentID) != 0">
                        <real:receiveAgentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiveAgentID"/>
                        </real:receiveAgentID>
                    </xsl:if>
                    <real:billerAccountNumber>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:billerAccountNumber"/>
                    </real:billerAccountNumber>
                    
                    <!-- New Fields for  PostNL -->
                    
                    <real:billerAccountDescription>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:billerAccountDescription"/>
                    </real:billerAccountDescription>
                    
                    <real:internationalBankAccountNumber>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:internationalBankAccountNumber"/>
                    </real:internationalBankAccountNumber>
                    
                    <real:customerEnteredBillerName>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:customerEnteredBillerName"/>
                    </real:customerEnteredBillerName>
                    
                    
                    <!-- End of new fields -->
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:validateAccountNumber) != 0">
                        <real:validateAccountNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:validateAccountNumber"/>
                        </real:validateAccountNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderFirstName) != 0">
                        <real:senderFirstName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderFirstName"/>
                        </real:senderFirstName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderMiddleName) != 0">
                        <real:senderMiddleName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderMiddleName"/>
                        </real:senderMiddleName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderLastName) != 0">
                        <real:senderLastName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderLastName"/>
                        </real:senderLastName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderAddress) != 0">
                        <real:senderAddress>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderAddress"/>
                        </real:senderAddress>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderAddress2) != 0">
                        <real:senderAddress2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderAddress2"/>
                        </real:senderAddress2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderAddress3) != 0">
                        <real:senderAddress3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderAddress3"/>
                        </real:senderAddress3>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderCity) != 0">
                        <real:senderCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderCity"/>
                        </real:senderCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderState) != 0">
                        <real:senderState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderState"/>
                        </real:senderState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderZipCode) != 0">
                        <real:senderZipCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderZipCode"/>
                        </real:senderZipCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderCountry) != 0">
                        <real:senderCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderCountry"/>
                        </real:senderCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderHomePhone) != 0">
                        <real:senderHomePhone>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderHomePhone"/>
                        </real:senderHomePhone>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverFirstName) != 0">
                        <real:receiverFirstName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverFirstName"/>
                        </real:receiverFirstName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverMiddleName) != 0">
                        <real:receiverMiddleName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverMiddleName"/>
                        </real:receiverMiddleName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverLastName) != 0">
                        <real:receiverLastName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverLastName"/>
                        </real:receiverLastName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverLastName2) != 0">
                        <real:receiverLastName2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiverLastName2"/>
                        </real:receiverLastName2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:feeAmount) != 0">
                        <real:feeAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:feeAmount"/>
                        </real:feeAmount>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:messageField1) != 0">
                        <real:messageField1>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:messageField1"/>
                        </real:messageField1>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:messageField2) != 0">
                        <real:messageField2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:messageField2"/>
                        </real:messageField2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdType) != 0">
                        <real:senderPhotoIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdType"/>
                        </real:senderPhotoIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdNumber) != 0">
                        <real:senderPhotoIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdNumber"/>
                        </real:senderPhotoIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdState) != 0">
                        <real:senderPhotoIdState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdState"/>
                        </real:senderPhotoIdState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdCountry) != 0">
                        <real:senderPhotoIdCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderPhotoIdCountry"/>
                        </real:senderPhotoIdCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderLegalIdType) != 0">
                        <real:senderLegalIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderLegalIdType"/>
                        </real:senderLegalIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderLegalIdNumber) != 0">
                        <real:senderLegalIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderLegalIdNumber"/>
                        </real:senderLegalIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderDOB) != 0">
                        <real:senderDOB>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderDOB"/>
                        </real:senderDOB>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderOccupation) != 0">
                        <real:senderOccupation>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:senderOccupation"/>
                        </real:senderOccupation>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyFirstName) != 0">
                        <real:thirdPartyFirstName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyFirstName"/>
                        </real:thirdPartyFirstName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyMiddleName) != 0">
                        <real:thirdPartyMiddleName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyMiddleName"/>
                        </real:thirdPartyMiddleName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyLastName) != 0">
                        <real:thirdPartyLastName>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyLastName"/>
                        </real:thirdPartyLastName>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyAddress) != 0">
                        <real:thirdPartyAddress>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyAddress"/>
                        </real:thirdPartyAddress>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyAddress2) != 0">
                        <real:thirdPartyAddress2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyAddress2"/>
                        </real:thirdPartyAddress2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyAddress3) != 0">
                        <real:thirdPartyAddress3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyAddress3"/>
                        </real:thirdPartyAddress3>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyCity) != 0">
                        <real:thirdPartyCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyCity"/>
                        </real:thirdPartyCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyState) != 0">
                        <real:thirdPartyState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyState"/>
                        </real:thirdPartyState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyZipCode) != 0">
                        <real:thirdPartyZipCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyZipCode"/>
                        </real:thirdPartyZipCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyCountry) != 0">
                        <real:thirdPartyCountry>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyCountry"/>
                        </real:thirdPartyCountry>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyLegalIdType) != 0">
                        <real:thirdPartyLegalIdType>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyLegalIdType"/>
                        </real:thirdPartyLegalIdType>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyLegalIdNumber) != 0">
                        <real:thirdPartyLegalIdNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyLegalIdNumber"/>
                        </real:thirdPartyLegalIdNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyDOB) != 0">
                        <real:thirdPartyDOB>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyDOB"/>
                        </real:thirdPartyDOB>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyOccupation) != 0">
                        <real:thirdPartyOccupation>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyOccupation"/>
                        </real:thirdPartyOccupation>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyOrg) != 0">
                        <real:thirdPartyOrg>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:thirdPartyOrg"/>
                        </real:thirdPartyOrg>
                    </xsl:if>
                    <real:accountNumberRetryCount>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:accountNumberRetryCount"/>
                    </real:accountNumberRetryCount>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentUseSendData) != 0">
                        <real:agentUseSendData>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentUseSendData"/>
                        </real:agentUseSendData>
                    </xsl:if>
                    <real:sendCurrency>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:sendCurrency"/>
                    </real:sendCurrency>
                    <real:receiveCurrency>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:receiveCurrency"/>
                    </real:receiveCurrency>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:pcTerminalNumber) != 0">
                        <real:pcTerminalNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:pcTerminalNumber"/>
                        </real:pcTerminalNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:cardSwiped) != 0">
                        <real:cardSwiped>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:cardSwiped"/>
                        </real:cardSwiped>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:cardExpirationMonth) != 0">
                        <real:cardExpirationMonth>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:cardExpirationMonth"/>
                        </real:cardExpirationMonth>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:cardExpirationYear) != 0">
                        <real:cardExpirationYear>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:cardExpirationYear"/>
                        </real:cardExpirationYear>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:purposeOfFund) != 0">
                        <real:purposeOfFund>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:purposeOfFund"/>
                        </real:purposeOfFund>
                    </xsl:if>
                    
                    <!-- New Fields for AC1 PostNL -->
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:sourceOfFund) != 0">
                        <real:sourceOfFund>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:sourceOfFund"/>
                        </real:sourceOfFund>
                    </xsl:if>
                    
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:relationToSender) != 0">
                        <real:relationToSender>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:relationToSender"/>
                        </real:relationToSender>
                    </xsl:if>
                    
                    
                    <!-- End of new fields -->
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:confirmationNumber) != 0">
                        <real:confirmationNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:confirmationNumber"/>
                        </real:confirmationNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentConsumerID) != 0">
                        <real:agentConsumerID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentConsumerID"/>
                        </real:agentConsumerID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentTransactionId) != 0">
                        <real:agentTransactionId>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:agentTransactionId"/>
                        </real:agentTransactionId>
                    </xsl:if>
                    <real:mgiTransactionSessionID>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:mgiTransactionSessionID"/>
                    </real:mgiTransactionSessionID>
                    <real:formFreeStaging>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:formFreeStaging"/>
                    </real:formFreeStaging>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:timeToLive) != 0">
                        <real:timeToLive>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:timeToLive"/>
                        </real:timeToLive>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:primaryReceiptLanguage) != 0">
                        <real:primaryReceiptLanguage>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:primaryReceiptLanguage"/>
                        </real:primaryReceiptLanguage>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:secondaryReceiptLanguage) != 0">
                        <real:secondaryReceiptLanguage>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:secondaryReceiptLanguage"/>
                        </real:secondaryReceiptLanguage>
                    </xsl:if>
                    <real:promoCodeValues>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:promoCodeValues/agen:promoCode">
                            <real:promoCode/>
                        </xsl:for-each>
                    </real:promoCodeValues>
                    <real:fieldValues>
                        <xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:fieldValues/agen:keyValuePair">
                            <real:keyValuePair>
                                <real:key>
                                    <xsl:value-of select="agen:xmlTag"/>
                                </real:key>
                                <real:value>
                                    <xsl:value-of select="agen:fieldValue"/>
                                </real:value>
                            </real:keyValuePair>
                        </xsl:for-each>
                    </real:fieldValues>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:validate">
                        <real:validate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:validate"/>
                        </real:validate>
                    </xsl:if>
                    
                    
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousReferenceNumber">
                        <real:previousReferenceNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousReferenceNumber"/>
                        </real:previousReferenceNumber>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousTransactionDate">
                        <real:previousTransactionDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousTransactionDate"/>
                        </real:previousTransactionDate>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousInternalReasonCode">
                        <real:previousInternalReasonCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousInternalReasonCode"/>
                        </real:previousInternalReasonCode>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousFeeIsRefunded">
                        <real:previousFeeIsRefunded>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousFeeIsRefunded"/>
                        </real:previousFeeIsRefunded>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousRefundReasonCode">
                        <real:previousRefundReasonCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousRefundReasonCode"/>
                        </real:previousRefundReasonCode>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:internalRequestMFtranId">
                        <real:internalRequestMFtranId>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:internalRequestMFtranId"/>
                        </real:internalRequestMFtranId>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousSpecialReferenceNumber">
                        <real:previousSpecialReferenceNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousSpecialReferenceNumber"/>
                        </real:previousSpecialReferenceNumber>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousSpecialTransactionDate">
                        <real:previousSpecialTransactionDate>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:bpValidationRequest/agen:previousSpecialTransactionDate"/>
                        </real:previousSpecialTransactionDate>
                    </xsl:if>
                    
                </real:bpValidationRequest>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="rtpsBpValidationRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="f577bc80-d669-4ec1-a0f6-9aa9b6f73a7f"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------RTPS bpValidationRequest [GUID = ${requestId}] = ${rtpsBpValidationRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="rtpsBpValidationRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING AC${agentConnectVersion} RTPS bpValidationrequest"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Grab receive code to check for real time"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:VariablePrefix stringValue="lookupCode"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:receiveCode"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="real"/>

                                    <L7p:value stringValue="http://moneygram.com/service/realtimepartnerservice_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Grab receive code to check for real time"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:VariablePrefix stringValue="lookupCode"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:receiveAgentID"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="real"/>

                                    <L7p:value stringValue="http://moneygram.com/service/realtimepartnerservice_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:SetVariable>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Grab RTPS request into a variable to be used for logging"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Base64Expression stringValue="TkE="/>

                                    <L7p:VariableToSet stringValue="lookupCode.result"/>
                                    </L7p:SetVariable>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                    <L7p:RequestXpathAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Get receive code to check for real time"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariablePrefix stringValue="rcvCode"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/real:bpValidationRequest/real:receiveCode"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="real"/>

                                    <L7p:value stringValue="http://moneygram.com/service/realtimepartnerservice_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns1"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="com"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="agen"/>

                                    <L7p:value stringValue="${currentNameSpace}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsd"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsi"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check the receiveCode to see if need to route to real time RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${gateway.app.rlt.rcv.code.lst}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Operator operator="CONTAINS"/>

                                    <L7p:RightValue stringValue="+${lookupCode.result}+"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Routing bpValidate to RealTime RTPS URL"/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="IF recvAgent/recvCode exists in the list route to realtime"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check the receiveCode to see if need to route to standard RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${gateway.app.rlt.rcv.code.lst}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Negated booleanValue="true"/>

                                    <L7p:Operator operator="CONTAINS"/>

                                    <L7p:RightValue stringValue="+${lookupCode.result}+"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}] Routing bpValidation to Standard RTPS URL "/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsStandardBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:HttpRoutingAssertion>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:ProtectedServiceUrl stringValue="http://dmnaaz0544.ad.moneygram.com:8080/Rob/RTPSSimulator"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>
                                    </L7p:HttpRoutingAssertion>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:VariablePrefix stringValue="errorCode"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/soapenv:Fault/detail/a:error/a:errorCode"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="a"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:ComparisonAssertion>

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Expression1 stringValue="${errorCode.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>

                                    <L7p:Operator operatorNull="null"/>

                                    <L7p:Predicates predicates="included">

                                    <L7p:item dataType="included">

                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>

                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:RightValue stringValue="4200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>

                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Send to RTPS RealTime now."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>

                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>

                                    <L7p:ProxyPassword stringValueNull="null"/>

                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">

                                    <L7p:ForwardAll booleanValue="true"/>

                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">

                                    <L7p:Rules httpPassthroughRules="included">

                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>

                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>

                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>

                                    <L7p:EarlyResponse booleanValue="true"/>

                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:FalseAssertion/>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="RTPS failed return failure response and Stop Processing"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Call real time RTPS if RTPS fails return response and stop processing"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="If error code 4200 route to realtime RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:TrueAssertion/>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if error code is 4200 and route to Real Time RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="IF recvAgent/recvCode do not exist in the list route to standard"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if real time,If not do Std RTPS call"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:VariablePrefix stringValue="rspFault"/>

                                    <L7p:XpathExpression xpathExpressionValue="included">

                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/soapenv:Fault"/>

                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Fault Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Direction intValue="2"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="a b" version="1.0" xmlns:a="http://moneygram.com/common_v1" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    <xsl:param name="timeStamp" select="'NA'"/>
    <xsl:template match="/soapenv:Envelope/soapenv:Body/soapenv:Fault">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <soapenv:Fault>
                    <faultcode>soapenv:Server</faultcode>
                    <faultstring><xsl:value-of select="detail/a:error/a:errorMessage"/></faultstring>
                    <detail>
                        <ac:error xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                            <ac:errorCode><xsl:value-of select="detail/a:error/a:errorCode"/></ac:errorCode>
                            <ac:errorString><xsl:value-of select="detail/a:error/a:errorMessage"/></ac:errorString>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:code)!=0">
                                <ac:subErrorCode><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:code"/></ac:subErrorCode>  
                            </xsl:if>
                            <xsl:if test="detail/a:error/a:offendingField">
                                <ac:offendingField><xsl:value-of select="detail/a:error/a:offendingField"/></ac:offendingField>  
                            </xsl:if>   
                            <ac:timeStamp><xsl:value-of select="$timeStamp"/></ac:timeStamp>
                            
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:message)!=0">
                                <ac:detailString><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:message"/></ac:detailString>  
                            </xsl:if>
                        </ac:error>
                        <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>        
        </soapenv:Envelope> 
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if fault element is present if do fault conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>

                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>

                                    <L7p:DataType variableDataType="message"/>

                                    <L7p:VariableToSet stringValue="rtpsBpValidationResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>

                                    <L7p:PolicyGuid stringValue="f898c65f-b29f-4578-a469-0b6ad3a6633d"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------RTPS bpValidationResponse [GUID = ${requestId}]= ${rtpsBpValidationResponse.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>

                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="CustomLoggerName"/>

                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="logResponse"/>

                                    <L7p:value stringValue="rtpsBpValidationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="messagePrefix"/>

                                    <L7p:value stringValue="INCOMING RTPS bpValidationResponse"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Direction intValue="2"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="real" version="1.0" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:bpValidationResponse xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                    <ac:doCheckIn>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:doCheckIn"/>
                    </ac:doCheckIn>
                    <ac:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:timeStamp"/>
                    </ac:timeStamp>
                    <ac:flags>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:flags"/>
                    </ac:flags>
                    <ac:mgiTransactionSessionID>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:mgiTransactionSessionID"/>
                    </ac:mgiTransactionSessionID>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:totalSendAmount) != 0">
                        <ac:totalSendAmount>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:totalSendAmount"/>
                        </ac:totalSendAmount>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:token) != 0">
                        <ac:token>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:token"/>
                        </ac:token>
                    </xsl:if>
                    <ac:mgiRewardsNumber>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:mgiRewardsNumber"/>
                    </ac:mgiRewardsNumber>
                    <ac:productVariant>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:productVariant"/>
                    </ac:productVariant>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:serviceOfferingID) != 0">
                        <ac:serviceOfferingID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:serviceOfferingID"/>
                        </ac:serviceOfferingID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerWebsite) != 0">
                        <ac:billerWebsite>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerWebsite"/>
                        </ac:billerWebsite>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerPhone) != 0">
                        <ac:billerPhone>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerPhone"/>
                        </ac:billerPhone>
                    </xsl:if>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:expectedPostingTimeFrame">
                        <ac:expectedPostingTimeFrame>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:expectedPostingTimeFrame>
                    </xsl:for-each>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerCutoffTime) != 0">
                        <ac:billerCutoffTime>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerCutoffTime"/>
                        </ac:billerCutoffTime>
                    </xsl:if>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerNotes">
                        <ac:billerNotes>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:billerNotes>
                    </xsl:for-each>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:serviceOfferingDescription">
                        <ac:serviceOfferingDescription>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:serviceOfferingDescription>
                    </xsl:for-each>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:customerTips">
                        <ac:customerTips>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:customerTips>
                    </xsl:for-each>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerAddress) != 0">

                        <ac:billerAddress>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerAddress"/>
                        </ac:billerAddress>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerAddress2) != 0">
                        <ac:billerAddress2>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerAddress2"/>
                        </ac:billerAddress2>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerAddress3) != 0">
                        <ac:billerAddress3>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerAddress3"/>
                        </ac:billerAddress3>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerCity) != 0">
                        <ac:billerCity>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerCity"/>
                        </ac:billerCity>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerState) != 0">
                        <ac:billerState>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerState"/>
                        </ac:billerState>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerZip) != 0">
                        <ac:billerZip>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:billerZip"/>
                        </ac:billerZip>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:printMGICustomerServiceNumber) != 0">
                        <ac:printMGICustomerServiceNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:printMGICustomerServiceNumber"/>
                        </ac:printMGICustomerServiceNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:agentTransactionId) != 0">
                        <ac:agentTransactionId>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:agentTransactionId"/>
                        </ac:agentTransactionId>
                    </xsl:if>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:promotionInfo">
                        <ac:promotionInfo>
                            <ac:promotionCode>
                                <xsl:value-of select="real:promotionCode"/>
                            </ac:promotionCode>
                            <ac:promotionDiscountId>
                                <xsl:value-of select="real:promotionDiscountId"/>
                            </ac:promotionDiscountId>
                            <ac:promotionCategoryId>
                                <xsl:value-of select="real:promotionCategoryId"/>
                            </ac:promotionCategoryId>
                            <ac:promotionDiscount>
                                <xsl:value-of select="real:promotionDiscount"/>
                            </ac:promotionDiscount>
                            <ac:promotionDiscountAmount>
                                <xsl:value-of select="real:promotionDiscountAmount"/>
                            </ac:promotionDiscountAmount>
                            <ac:promotionErrorCode>
                                <xsl:value-of select="real:promotionErrorCode"/>
                            </ac:promotionErrorCode>
                            <xsl:for-each select="real:promotionErrorMessage">
                                <ac:promotionErrorMessage>
                                    <ac:longLanguageCode>
                                        <xsl:value-of select="real:longLanguageCode"/>
                                    </ac:longLanguageCode>
                                    <ac:textTranslation>
                                        <xsl:value-of select="real:textTranslation"/>
                                    </ac:textTranslation>
                                </ac:promotionErrorMessage>
                            </xsl:for-each>
                        </ac:promotionInfo>
                    </xsl:for-each>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:promotionalMessage">
                        <ac:promotionalMessage>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:promotionalMessage>
                    </xsl:for-each>
                    <ac:readyForCommit>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:readyForCommit"/>
                    </ac:readyForCommit>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:disclosureText">
                        <ac:disclosureText>
                            <ac:longLanguageCode>
                                <xsl:value-of select="real:longLanguageCode"/>
                            </ac:longLanguageCode>
                            <ac:textTranslation>
                                <xsl:value-of select="real:textTranslation"/>
                            </ac:textTranslation>
                        </ac:disclosureText>
                    </xsl:for-each>
                    <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:additionalFieldsToCollect">
                        <ac:additionalFieldsToCollect>
                            <ac:xmlTag>
                                <xsl:value-of select="real:xmlTag"/>
                            </ac:xmlTag>
                            <ac:visibility>
                                <xsl:value-of select="real:visibility"/>
                            </ac:visibility>
                            <ac:fieldLabel>
                                <xsl:value-of select="real:fieldLabel"/>
                            </ac:fieldLabel>
                            <ac:displayOrder>
                                <xsl:value-of select="real:displayOrder"/>
                            </ac:displayOrder>
                            <ac:fieldCategory>
                                <xsl:value-of select="real:fieldCategory"/>
                            </ac:fieldCategory>
                            <ac:dynamic>
                                <xsl:value-of select="real:dynamic"/>
                            </ac:dynamic>
                            <ac:fieldMax>
                                <xsl:value-of select="real:fieldMax"/>
                            </ac:fieldMax>
                            <ac:fieldMin>
                                <xsl:value-of select="real:fieldMin"/>
                            </ac:fieldMin>
                            <ac:dataType>
                                <xsl:value-of select="real:dataType"/>
                            </ac:dataType>
                            <ac:enumerated>
                                <xsl:value-of select="real:enumerated"/>
                            </ac:enumerated>
                            <ac:defaultValue>
                                <xsl:value-of select="real:defaultValue"/>
                            </ac:defaultValue>
                            <ac:validationRegEx>
                                <xsl:value-of select="real:validationRegEx"/>
                            </ac:validationRegEx>
                            <ac:arrayName>
                                <xsl:value-of select="real:arrayName"/>
                            </ac:arrayName>
                            <ac:arrayLength>
                                <xsl:value-of select="real:arrayLength"/>
                            </ac:arrayLength>
                            <ac:exampleFormat>
                                <xsl:value-of select="real:exampleFormat"/>
                            </ac:exampleFormat>
                            <ac:enumeratedValues>
                                <xsl:for-each select="real:enumeratedValues/real:enumeratedValueInfo">
                                    <ac:enumeratedValueInfo>
                                        <ac:value>
                                            <xsl:value-of select="real:value"/>
                                        </ac:value>
                                        <ac:label>
                                            <xsl:value-of select="real:label"/>
                                        </ac:label>
                                    </ac:enumeratedValueInfo>
                                </xsl:for-each>
                            </ac:enumeratedValues>
                        </ac:additionalFieldsToCollect>
                    </xsl:for-each>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:processingFee) != 0">
                        <ac:processingFee>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:processingFee"/>
                        </ac:processingFee>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:infoFeeIndicator) != 0">
                        <ac:infoFeeIndicator>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:infoFeeIndicator"/>
                        </ac:infoFeeIndicator>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts">
                        <ac:sendAmounts>
                            <ac:sendAmount>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:sendAmount"/>
                            </ac:sendAmount>
                            <ac:sendCurrency>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:sendCurrency"/>
                            </ac:sendCurrency>
                            <ac:totalSendFees>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:totalSendFees"/>
                            </ac:totalSendFees>
                            <ac:totalDiscountAmount>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:totalDiscountAmount"/>
                            </ac:totalDiscountAmount>
                            <ac:totalSendTaxes>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:totalSendTaxes"/>
                            </ac:totalSendTaxes>
                            <ac:totalAmountToCollect>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:totalAmountToCollect"/>
                            </ac:totalAmountToCollect>
                            <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:sendAmounts/real:detailSendAmounts">
                                <ac:detailSendAmounts>
                                    <ac:amountType>
                                        <xsl:value-of select="real:amountType"/>
                                    </ac:amountType>
                                    <ac:amount>
                                        <xsl:value-of select="real:amount"/>
                                    </ac:amount>
                                    <ac:amountCurrency>
                                        <xsl:value-of select="real:amountCurrency"/>
                                    </ac:amountCurrency>
                                </ac:detailSendAmounts>
                            </xsl:for-each>
                        </ac:sendAmounts>
                    </xsl:if>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts">
                        <ac:receiveAmounts>
                            <ac:receiveAmount>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:receiveAmount"/>
                            </ac:receiveAmount>
                            <ac:receiveCurrency>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:receiveCurrency"/>
                            </ac:receiveCurrency>
                            <ac:validCurrencyIndicator>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:validCurrencyIndicator"/>
                            </ac:validCurrencyIndicator>
                            <ac:payoutCurrency>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:payoutCurrency"/>
                            </ac:payoutCurrency>
                            <ac:totalReceiveFees>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:totalReceiveFees"/>
                            </ac:totalReceiveFees>
                            <ac:totalReceiveTaxes>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:totalReceiveTaxes"/>
                            </ac:totalReceiveTaxes>
                            <ac:totalReceiveAmount>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:totalReceiveAmount"/>
                            </ac:totalReceiveAmount>
                            <ac:receiveFeesAreEstimated>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:receiveFeesAreEstimated"/>
                            </ac:receiveFeesAreEstimated>
                            <ac:receiveTaxesAreEstimated>
                                <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:receiveTaxesAreEstimated"/>
                            </ac:receiveTaxesAreEstimated>
                            <xsl:for-each select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:receiveAmounts/real:detailReceiveAmounts">
                                <ac:detailReceiveAmounts>
                                    <ac:amountType>
                                        <xsl:value-of select="real:amountType"/>
                                    </ac:amountType>
                                    <ac:amount>
                                        <xsl:value-of select="real:amount"/>
                                    </ac:amount>
                                    <ac:amountCurrency>
                                        <xsl:value-of select="real:amountCurrency"/>
                                    </ac:amountCurrency>
                                </ac:detailReceiveAmounts>
                            </xsl:for-each>
                        </ac:receiveAmounts>
                    </xsl:if>
                    <ac:exchangeRateApplied>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:exchangeRateApplied"/>
                    </ac:exchangeRateApplied>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:confirmationNumber) != 0">
                        <ac:confirmationNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:bpValidationResponse/real:confirmationNumber"/>
                        </ac:confirmationNumber>
                    </xsl:if>
                </ac:bpValidationResponse>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>

                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>

                                    <L7p:DataType variableDataType="message"/>

                                    <L7p:VariableToSet stringValue="acBpValidationResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>

                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="acBpValidationResponse"/>

                                    <L7p:ResourceInfo staticResourceInfo="included">

                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:com="http://moneygram.com/common_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
    
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    
    <!-- 
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:bpValidationResponse/agen:exchangeRateApplied">
        <agen:exchangeRateApplied>********************</agen:exchangeRateApplied>
    </xsl:template>
    -->
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>

                                    <L7p:TransformName stringValue=""/>

                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>

                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="CustomLoggerName"/>

                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="logResponse"/>

                                    <L7p:value stringValue="acBpValidationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>

                                    <L7p:key stringValue="messagePrefix"/>

                                    <L7p:value stringValue="OUTGOING AC${agentConnectVersion} RTPS bpValidationResponse"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------OUTGOING AC${agentConnectVersion} bpValidationResponse [GUID = ${requestId}]= ${acBpValidationResponse.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:assertionComment>

                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>

                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal Response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if Fault if Fault do the Fault conversion else do response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Return error if the conversion fails"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Do the needed transformation and If any errors send generic error"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}*** AC${agentConnectVersion} BpValidation Request/Response Stats ---> [L7Service = ${service.name}][GUID = ${requestId}][TotalDuration = ${httpRouting.latency} ms][ReasonCode = ${httpRouting.reasonCode}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Normal Transaction processing without security fault"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                </wsp:All>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Convert bpValidation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtodHRwUm91dGluZy5yZWFzb25Db2RlfQ=="/>
                            <L7p:VariableToSet stringValue="httpStatusCode"/>
                        </L7p:SetVariable>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="commitTransaction, receiveValidation"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Determine if the trasaction is a saveRegistration"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:OperationName stringValue="saveRegistration"/>
                            </L7p:WSDLOperation>
                            <wsp:All wsp:Usage="Required">
                                <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the RTPS masked request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ saveRegistrationRequest checkSecurity status = GRANTED [GUID = ${requestId}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="acMGSaveRegistrationRequest"/>
                                </L7p:SetVariable>
                                <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Mask fields for PCI"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:OtherTargetMessageVariable stringValue="acMGSaveRegistrationRequest"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

   <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:fieldValues/agen:keyValuePair/agen:fieldValue">
       <fieldValue>********************</fieldValue>
  </xsl:template>

</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the incoming masked request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------ INCOMING AC${agentConnectVersion} SaveRegistrationRequest [GUID = ${requestId}]= ${acMGSaveRegistrationRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:Encapsulated>
                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>
                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="acMGSaveRegistrationRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING AC${agentConnectVersion} saveregistrationRequest"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                </L7p:Encapsulated>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform from Ac(RTS) Req to RTPS request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="actpsXslt"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:param name="requestId"/>
    <xsl:template match="/">
        <soapenv:Envelope xmlns:com="http://moneygram.com/common_v1" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Body>
                <real:saveRegistrationRequest>
                    <com:header>
                        <com:processingInstruction>
                            <com:action>saveRegistration</com:action>
                            <com:returnErrorsAsException>true</com:returnErrorsAsException>
                            <com:rollbackTransaction>false</com:rollbackTransaction>
                        </com:processingInstruction>
                        <com:clientHeader>
                            <com:clientRequestID>
                                <xsl:value-of select="$requestId"/>
                            </com:clientRequestID>
                        </com:clientHeader>
                    </com:header>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:unitProfileID) != 0">
                        <real:unitProfileID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:unitProfileID"/>
                        </real:unitProfileID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:agentID) != 0">
                        <real:agentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:agentID"/>
                        </real:agentID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:agentSequence) != 0">
                        <real:agentSequence>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:agentSequence"/>
                        </real:agentSequence>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:token) != 0">
                        <real:token>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:token"/>
                        </real:token>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:language) != 0">
                        <real:language>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:language"/>
                        </real:language>
                    </xsl:if>
                    <real:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:timeStamp"/>
                    </real:timeStamp>
                    
                    <real:apiVersion>1509</real:apiVersion>
                    
                    <real:clientSoftwareVersion>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:clientSoftwareVersion"/>
                    </real:clientSoftwareVersion>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:userID) != 0">
                        <real:userID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:userID"/>
                        </real:userID>
                    </xsl:if>
                    <real:receiveCountry>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:receiveCountry"/>
                    </real:receiveCountry>
                    <real:deliveryOption>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:deliveryOption"/>
                    </real:deliveryOption>
                    <real:receiveAgentID>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:receiveAgentID"/>
                    </real:receiveAgentID>
                    <real:receiveCurrency>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:receiveCurrency"/>
                    </real:receiveCurrency>
                    <xsl:if test="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:fieldValues">
                        <real:fieldValues>
                            <xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:saveRegistrationRequest/agen:fieldValues/agen:keyValuePair">
                                <real:keyValuePair>
                                    <real:key>
                                        <xsl:value-of select="agen:xmlTag"/>
                                    </real:key>
                                    <xsl:if test="string-length(agen:fieldValue) != 0">
                                        <real:value>
                                            <xsl:value-of select="agen:fieldValue"/>
                                        </real:value>
                                    </xsl:if>
                                </real:keyValuePair>
                            </xsl:for-each>
                        </real:fieldValues>
                    </xsl:if>
                </real:saveRegistrationRequest>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Grab RTPS request into a variable to be used for logging"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="rtpsMGSaveRegistrationRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="0b3fc5e1-8ef9-40bf-bbc9-f2d8f8c6c7ac"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the RTPS masked request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------RTPS SaveRegistrationRequest [GUID = ${requestId}] = ${rtpsMGSaveRegistrationRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="rtpsMGSaveRegistrationRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING AC${agentConnectVersion} RTPS saveregistrationRequest"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get receiveAgentID  to check for real time"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="rcvAgent"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/real:saveRegistrationRequest/real:receiveAgentID"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="real"/>
                                    <L7p:value stringValue="http://moneygram.com/service/realtimepartnerservice_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:SetVariable>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ReceiveAgentId not found setting to NA"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64Expression stringValue="TkE="/>
                                    <L7p:VariableToSet stringValue="rcvAgent.result"/>
                                    </L7p:SetVariable>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="If receiveAgentId exists grab it otherwise set NA"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the receive agent ID"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}----- receiveAgentID [GUID = ${requestId}] = ${rcvAgent.result} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.rlt.rcv.agent.lst}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Operator operator="CONTAINS"/>

                                    <L7p:RightValue stringValue="${rcvAgent.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Log that the request is going to be routed to the real time RTPS URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Routing to RealTime RTPS URL"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Call the real time RTPS URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>
                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsRealTimeBackEndUrl}"/>
                                    <L7p:ProxyPassword stringValueNull="null"/>
                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>
                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>
                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="IF receiveAgentId  is part of the real time list do realtime RTPS"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.rlt.rcv.agent.lst}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>

                                    <L7p:Operator operator="CONTAINS"/>

                                    <L7p:RightValue stringValue="${rcvAgent.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Route RTPS request to standard URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} Routing to Standard RTPS URL"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="The rlt check failed do std call"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:ConnectionTimeout stringValue="5000"/>

                                    <L7p:FailOnErrorStatus booleanValue="false"/>
                                    <L7p:MaxRetries intValue="0"/>

                                    <L7p:ProtectedServiceUrl stringValue="${rtpsStandardBackEndUrl}"/>
                                    <L7p:ProxyPassword stringValueNull="null"/>
                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>
                                    <L7p:TlsCipherSuites stringValue="TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"/>
                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check if real time, if not do Std RTPS call"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:SetVariable>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Grab the RTPS response into a variable to be used for logging"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="rtpsMGSaveRegistrationResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="107dec85-214b-421b-9c34-02070537647d"/>
                                    </L7p:Include>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the masked RTPS response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------RTPS MoneyGramSaveRegistrationResponse [GUID = ${requestId}]= ${rtpsMGSaveRegistrationResponse.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="rtpsMGSaveRegistrationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING RTPS MoneyGram Save Registration Response"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Check if response is a fault"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="rspFault"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/soapenv:Fault"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Fault Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="a b" version="1.0" xmlns:a="http://moneygram.com/common_v1" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    <xsl:param name="timeStamp" select="'NA'"/>
    
    
    <xsl:template match="/soapenv:Envelope/soapenv:Body/soapenv:Fault">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <soapenv:Fault>
                    <faultcode><xsl:value-of select="faultcode"/></faultcode>
                    <faultstring><xsl:value-of select="detail/a:error/a:errorMessage"/></faultstring>
                    <detail>
                        <ac:error xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                            <ac:errorCode><xsl:value-of select="detail/a:error/a:errorCode"/></ac:errorCode>
                            <ac:errorString><xsl:value-of select="detail/a:error/a:errorMessage"/></ac:errorString>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:code)!=0">
                                <ac:subErrorCode><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:code"/></ac:subErrorCode>  
                            </xsl:if>                                                                             
                            <xsl:if test="detail/a:error/a:offendingField">
                                <ac:offendingField><xsl:value-of select="detail/a:error/a:offendingField"/></ac:offendingField>  
                            </xsl:if>                                       
                            <ac:timeStamp><xsl:value-of select="$timeStamp"/></ac:timeStamp>
                            <xsl:if test="string-length(detail/a:error/a:relatedErrors/a:error/a:message)!=0">
                                <ac:detailString><xsl:value-of select="detail/a:error/a:relatedErrors/a:error/a:message"/></ac:detailString>  
                            </xsl:if>
                        </ac:error>
                        <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>        
        </soapenv:Envelope> 
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check if fault element is present if do fault conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="real" version="1.0" xmlns:real="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <soapenv:Envelope xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Body>
                <agen:saveRegistrationResponse>
                    <agen:doCheckIn>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:doCheckIn"/>
                    </agen:doCheckIn>
                    <agen:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:timeStamp"/>
                    </agen:timeStamp>
                    <agen:flags>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:flags"/>
                    </agen:flags>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:mgCustomerReceiveNumber) != 0">
                        <agen:mgCustomerReceiveNumber>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:mgCustomerReceiveNumber"/>
                        </agen:mgCustomerReceiveNumber>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:mgCustomerReceiveNumberVersion) != 0">
                        <agen:mgCustomerReceiveNumberVersion>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:mgCustomerReceiveNumberVersion"/>
                        </agen:mgCustomerReceiveNumberVersion>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:registrationStatusCode) != 0">
                        <agen:registrationStatusCode>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:registrationStatusCode"/>
                        </agen:registrationStatusCode>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:verificationRequiredForUse) != 0">
                        <agen:verificationRequiredForUse>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/real:saveRegistrationResponse/real:verificationRequiredForUse"/>
                        </agen:verificationRequiredForUse>
                    </xsl:if>
                </agen:saveRegistrationResponse>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Not a fault - Do Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Check if Fault if Fault do the Fault conversion else do response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:OneOrMore>
                                    <L7p:SetVariable>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Grab AC response into a variable to be used for logging"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="acMGSaveRegistrationResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Mask fields for PCI"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="acMGSaveRegistrationResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:com="http://moneygram.com/common_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

  <!-- NOTHING TO MASK - If needed, add here 
    <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:saveRegistrationResponse/agen:mgCustomerReceiveNumber">
        <agen:mgCustomerReceiveNumber>********************</agen:mgCustomerReceiveNumber>
    </xsl:template>
  -->

</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log AC masked response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------OUTGOING AC${agentConnectVersion} MoneyGramSaveRegistrationResponse [GUID = ${requestId}]= ${acMGSaveRegistrationResponse.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="acMGSaveRegistrationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING AC${agentConnectVersion} MoneyGram Save Registration Response"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:HardcodedResponse>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Return 944 Internal System Error"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64ResponseBody stringValue="JHtydHBzRXJyb3JUZW1wbGF0ZS5tYWlucGFydH0="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                </wsp:OneOrMore>
                                <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Performance statistics"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}*** AC${agentConnectVersion} SaveRegistration Request/Response Stats ---> [L7Service = ${service.name}][GUID = ${requestId}][TotalDuration = ${httpRouting.latency} ms][ReasonCode = ${httpRouting.reasonCode}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Proceed with Transaction if no security fault"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="SaveRegistration"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="openOTPLogin"/>
                            </L7p:WSDLOperation>
                            <wsp:All wsp:Usage="Required">
                                <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="OTPuserID"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/agen:openOTPLoginRequest/agen:ldapUserId"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="agen"/>
                                    <L7p:value stringValue="http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:RequestXpathAssertion>
                                <L7p:SetVariable>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get the user Id"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64Expression stringValue="JHtPVFB1c2VySUQucmVzdWx0fQ=="/>
                                    <L7p:VariableToSet stringValue="UserId"/>
                                </L7p:SetVariable>
                                <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="OTPpassword"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/agen:openOTPLoginRequest/agen:password"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="agen"/>
                                    <L7p:value stringValue="http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:RequestXpathAssertion>
                                <L7p:SetVariable>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get the password"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64Expression stringValue="JHtPVFBwYXNzd29yZC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="password"/>
                                </L7p:SetVariable>
                                <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="TimeStamp"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/agen:openOTPLoginRequest/agen:timeStamp"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="agen"/>
                                    <L7p:value stringValue="http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:RequestXpathAssertion>
                                <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform from AC openOTPLoginRequest  to openotpNormalLogin"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="acToopenotpNormalLoginRequest"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                <xsl:param name="requestId"/>
                <xsl:param name="requestIP"/>
                <xsl:param name="UserID"/>
               <xsl:param name="password"/>
          <xsl:template match="/">
          <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:openotp" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:openotpNormalLogin soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
      <username xsi:type="xsd:string"><xsl:value-of select="$UserID"/></username>
       <domain xsi:type="xsd:string">dwagents</domain>
         <otpPassword xsi:type="xsd:string"><xsl:value-of select="$password"/></otpPassword>
         <client xsi:type="xsd:string"><xsl:value-of select="$requestIP"/></client>
              </urn:openotpNormalLogin>
   </soapenv:Body>
</soapenv:Envelope>
</xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ INCOMING AC${agentConnectVersion} openOTPLoginRequest [GUID = ${requestId}] User ID : ---- ${OTPuserID.result}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the OpenOTP Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValueReference="inline"><![CDATA[${requestId} openotpNormalLoginRequest------ [GUID = ${requestId}] = 
User ID : ---- ${OTPuserID.result}]]></L7p:Detail>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <wsp:All wsp:Usage="Required">
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HttpRoutingAssertion>

                                    <L7p:CurrentSecurityHeaderHandling intValue="3"/>
                                    <L7p:HttpMethod httpMethod="POST"/>

                                    <L7p:ProtectedServiceUrl stringValue="${gateway.app.openOTP.url}"/>
                                    <L7p:ProxyPassword stringValueNull="null"/>
                                    <L7p:ProxyUsername stringValueNull="null"/>

                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:CustomizeValue stringValue="${gateway.app.webADM.password}"/>

                                    <L7p:Name stringValue="Authorization"/>

                                    <L7p:UsesCustomizedValue booleanValue="true"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>

                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>

                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>

                                    <L7p:SamlAssertionVersion intValue="2"/>

                                    <L7p:XmlSecurityActorToPromote stringValue="Authorization: Basic RGVmYXVsdFxybWFwaXVzZXIxOk0+UmQ/ZmEkYSZ0OA=="/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Log the OpenOTP Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValueReference="inline"><![CDATA[${requestId} --openotpNormalLoginResponse [GUID = ${requestId}] ------  = 
${response.mainpart}]]></L7p:Detail>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="otpCode"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/SOAP-ENV:Envelope/SOAP-ENV:Body/ns1:openotpNormalLoginResponse/code"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="SOAP-ENV"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns1"/>

                                    <L7p:value stringValue="urn:openotp"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsd"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="SOAP-ENC"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/encoding/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsi"/>

                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:SetVariable>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Get the response Code from Open OTP"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Base64Expression stringValue="JHtvdHBDb2RlLnJlc3VsdH0="/>
                                    <L7p:DataType variableDataType="int"/>
                                    <L7p:VariableToSet stringValue="OTPcode"/>
                                    </L7p:SetVariable>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${OTPCode.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:RightValue stringValue="1"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Log the OpenOTP Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}--Open OTP response Code [GUID = ${requestId}] ---- ${OTPcode.result}-----Success block"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="successful response Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:MsgVarPrefix stringValue="xslttoOpenOTPLoginReposne"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:ns1="urn:openotp" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    
    <xsl:param name="timeStamp"/>
    
    <xsl:template match="/soapenv:Envelope/soapenv:Body/ns1:openotpNormalLoginResponse">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:openOTPLoginResponse xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                    <ac:doCheckIn>false</ac:doCheckIn>
                    <ac:timeStamp>${timeStamp}</ac:timeStamp>
                    <ac:flags>0</ac:flags>
                    
                    <ac:loginSuccessful>true</ac:loginSuccessful>
                    
                </ac:openOTPLoginResponse>
            </soapenv:Body>
        </soapenv:Envelope>
        
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Successful Scenario - Login Successful"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${OTPcode.result}"/>

                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Operator operator="NE"/>

                                    <L7p:RightValue stringValue="1"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Log the OpenOTP Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}--Open OTP response Code [GUID = ${requestId}] ---- ${OTPcode.result}-------------Failure block."/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Failure  response Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:MsgVarPrefix stringValue="xslttoOpenOTPLoginReposne"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:ns1="urn:openotp" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    
    <xsl:param name="timeStamp"/>
    
    <xsl:template match="/soapenv:Envelope/soapenv:Body/ns1:openotpNormalLoginResponse">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:openOTPLoginResponse xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                    <ac:doCheckIn>false</ac:doCheckIn>
                    <ac:timeStamp>${timeStamp}</ac:timeStamp>
                    <ac:flags>0</ac:flags>
                    
                    <ac:loginSuccessful>false</ac:loginSuccessful>
                    
                </ac:openOTPLoginResponse>
            </soapenv:Body>
        </soapenv:Envelope>
        
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Failure scenario - Login unsuccessful"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Return 950 Internal System Error"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64ResponseBody stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPgogIDxzb2FwZW52OkJvZHk+CiAgICA8c29hcGVudjpGYXVsdD4KICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPgogICAgICA8ZmF1bHRzdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9mYXVsdHN0cmluZz4KICAgICAgPGRldGFpbD4KICAgICAgICA8YWM6ZXJyb3IgeG1sbnM6YWM9Imh0dHA6Ly93d3cubW9uZXlncmFtLmNvbS9BZ2VudENvbm5lY3QxNTAxIj4KICAgICAgICAgIDxhYzplcnJvckNvZGU+OTUwPC9hYzplcnJvckNvZGU+CiAgICAgICAgICA8YWM6ZXJyb3JTdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9hYzplcnJvclN0cmluZz4KICAgICAgICAgIDxhYzp0aW1lU3RhbXA+JHt0aW1lU3RhbXB9PC9hYzp0aW1lU3RhbXA+CiAgICAgICAgPC9hYzplcnJvcj4KICAgICAgICA8bnMxOmV4Y2VwdGlvbk5hbWUgeG1sbnM6bnMxPSJodHRwOi8veG1sLmFwYWNoZS5vcmcvYXhpcy8iPmNvbS5tb25leWdyYW0uYWdlbnRjb25uZWN0LnNvYXAuQUNFeGNlcHRpb248L25zMTpleGNlcHRpb25OYW1lPgogICAgICA8L2RldGFpbD4KICAgIDwvc29hcGVudjpGYXVsdD4KICA8L3NvYXBlbnY6Qm9keT4KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ERROR  path -  Clear Alerts"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                </wsp:All>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="OpenOTPLogin"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="registerHardToken"/>
                            </L7p:WSDLOperation>
                            <L7p:SetVariable>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Save the original incoming sendValidationRequest"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                <L7p:DataType variableDataType="message"/>
                                <L7p:VariableToSet stringValue="acRegisterHardTokenRequest"/>
                            </L7p:SetVariable>
                            <L7p:XslTransformation>
                                <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform for removal of PAN data."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:AssertionComment>
                                <L7p:Direction intValue="-1"/>
                                <L7p:OtherTargetMessageVariable stringValue="acRegisterHardTokenRequest"/>
                                <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:template match="@*|node()">
      <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
  </xsl:template>

 <xsl:template match="/soapenv:Envelope/soapenv:Body/agen:registerHardTokenRequest/agen:hardToken">
     <hardToken>********************</hardToken>
  </xsl:template>

</xsl:stylesheet>]]></L7p:Document>
                                </L7p:ResourceInfo>
                                <L7p:Target target="OTHER"/>
                                <L7p:TransformName stringValue=""/>
                                <L7p:XsltVersion stringValue="1.0"/>
                            </L7p:XslTransformation>
                            <L7p:SetVariable>
                                <L7p:Base64Expression stringValue="JHthY1JlZ2lzdGVySGFyZFRva2VuUmVxdWVzdC5tYWlucGFydH0="/>
                                <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                <L7p:DataType variableDataType="message"/>
                                <L7p:Enabled booleanValue="false"/>
                                <L7p:VariableToSet stringValue="request"/>
                            </L7p:SetVariable>
                            <L7p:AuditDetailAssertion>
                                <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                <L7p:Detail stringValue="${requestId}------ INCOMING AC${agentConnectVersion} registerHardTokenRequest [GUID = ${requestId}]= ${acRegisterHardTokenRequest.mainpart}"/>
                                <L7p:LoggingOnly booleanValue="true"/>
                            </L7p:AuditDetailAssertion>
                            <wsp:OneOrMore wsp:Usage="Required">
                                <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="LdapUserId"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/ns:registerHardTokenRequest/ns:ldapUserId"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns"/>
                                    <L7p:value stringValue="http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtMZGFwVXNlcklkLnJlc3VsdH0="/>
                                    <L7p:VariableToSet stringValue="ldapUserId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="registrationRequest"/>
                                    </L7p:SetVariable>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="eyJqc29ucnBjIjoiMi4wIiwibWV0aG9kIjoiT3Blbk9UUC5JbnZlbnRvcnlfUmVnaXN0ZXIiLCJwYXJhbXMiOnsiZG4iOiJjbj0="/>
                                    <L7p:VariableToSet stringValue="jsonPart1"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="LG91PURlbHRhV29ya3Msb3U9YWdlbnRzLG89bW9uZXlncmFtIiwic2VyaWFsIjoi"/>
                                    <L7p:VariableToSet stringValue="jsonPart2"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="In0sImlkIjowfQ=="/>
                                    <L7p:VariableToSet stringValue="jsonPart3"/>
                                    </L7p:SetVariable>
                                    <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="LdapUserId"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/ns:registerHardTokenRequest/ns:ldapUserId"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns"/>
                                    <L7p:value stringValue="${currentNameSpace}http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtMZGFwVXNlcklkLnJlc3VsdH0="/>
                                    <L7p:VariableToSet stringValue="ldapUserId"/>
                                    </L7p:SetVariable>
                                    <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="HardToken"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/ns:registerHardTokenRequest/ns:hardToken"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns"/>
                                    <L7p:value stringValue="http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtIYXJkVG9rZW4ucmVzdWx0fQ=="/>
                                    <L7p:VariableToSet stringValue="token"/>
                                    </L7p:SetVariable>
                                    <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="TimeStamp"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/ns:registerHardTokenRequest/ns:timeStamp"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns"/>
                                    <L7p:value stringValue="http://www.moneygram.com/AgentConnect1510"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ registerHardTokenRequest converting to JSON [GUID = ${requestId}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Create JSON request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="soapenv" version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> 
    <xsl:output indent="no" method="text"/>
       <xsl:param name="jsonPart1"/>
        <xsl:param name="jsonPart2"/>
        <xsl:param name="jsonPart3"/>
    
    <xsl:param name="ldapUserId"/>
    <xsl:param name="token"/>
    
    <xsl:template match="/">
    
<xsl:value-of select="$jsonPart1"/>
<xsl:value-of select="$ldapUserId"/>
<xsl:value-of select="$jsonPart2"/>
 <xsl:value-of select="$token"/>
<xsl:value-of select="$jsonPart3"/>

    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ registerHardTokenRequest converted to JSON [GUID = ${requestId}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:HttpRoutingAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="The Working URL"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:CurrentSecurityHeaderHandling intValue="3"/>
                                    <L7p:HttpMethod httpMethod="POST"/>
                                    <L7p:ProtectedServiceUrl stringValue="${gateway.app.webADM.url}"/>
                                    <L7p:ProxyPassword stringValueNull="null"/>
                                    <L7p:ProxyUsername stringValueNull="null"/>
                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">

                                    <L7p:CustomizeValue stringValue="${gateway.app.webADM.password}"/>
                                    <L7p:Name stringValue="Authorization"/>

                                    <L7p:UsesCustomizedValue booleanValue="true"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>
                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>
                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>
                                    <L7p:SamlAssertionVersion intValue="2"/>

                                    <L7p:XmlSecurityActorToPromote stringValue="Authorization: Basic RGVmYXVsdFxybWFwaXVzZXIxOk0+UmQ/ZmEkYSZ0OA=="/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="------ registerHardTokenRequest routed to webADM [GUID = ${requestId}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:JsonTransformation>
                                    <L7p:RootTagString stringValue="SetUser"/>
                                    <L7p:Transformation transformation="JSON_to_XML"/>
                                    </L7p:JsonTransformation>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ registerHardTokenResponse converted from JSON to xml [GUID = ${requestId}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/SetUser/error"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Error response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="a b" version="1.0" xmlns:a="http://moneygram.com/common_v1" xmlns:b="http://moneygram.com/service/realtimepartnerservice_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    <xsl:param name="timeStamp"/>
    
    
    <xsl:template match="/SetUser">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <soapenv:Fault>
                    <faultcode><xsl:value-of select="faultcode"/></faultcode>
                    <faultstring><xsl:value-of select="detail/a:error/a:errorMessage"/></faultstring>
                    <detail>
                        <ac:error xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                            <ac:errorCode>4205</ac:errorCode>
                            <ac:errorString><xsl:value-of select="error/data"/></ac:errorString>
                            <ac:timeStamp>${timeStamp}</ac:timeStamp>
                       </ac:error>
                        <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>        
        </soapenv:Envelope> 
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the error path"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="real" version="1.0" xmlns:real="http://moneygram.com/WEBADM/service_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">


    <xsl:param name="timeStamp"/>
    <xsl:template match="/SetUser">

        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:registerHardTokenResponse xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                    <ac:doCheckIn>false</ac:doCheckIn>
                    <ac:timeStamp>${timeStamp}</ac:timeStamp>
                    <ac:flags>0</ac:flags>
                    <ac:registrationSuccessful>
                        <xsl:value-of select="result"/>
                    </ac:registrationSuccessful>
                </ac:registerHardTokenResponse>
            </soapenv:Body>
        </soapenv:Envelope>


    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the non error scenario"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- handle create ldap request conversion and route"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="NORMAL path -- registerHardToken"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:HardcodedResponse>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Return 950 Internal System Error"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Base64ResponseBody stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPgogIDxzb2FwZW52OkJvZHk+CiAgICA8c29hcGVudjpGYXVsdD4KICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPgogICAgICA8ZmF1bHRzdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9mYXVsdHN0cmluZz4KICAgICAgPGRldGFpbD4KICAgICAgICA8YWM6ZXJyb3IgeG1sbnM6YWM9Imh0dHA6Ly93d3cubW9uZXlncmFtLmNvbS9BZ2VudENvbm5lY3QxNTAxIj4KICAgICAgICAgIDxhYzplcnJvckNvZGU+OTUwPC9hYzplcnJvckNvZGU+CiAgICAgICAgICA8YWM6ZXJyb3JTdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9hYzplcnJvclN0cmluZz4KICAgICAgICAgIDxhYzp0aW1lU3RhbXA+JHt0aW1lU3RhbXB9PC9hYzp0aW1lU3RhbXA+CiAgICAgICAgPC9hYzplcnJvcj4KICAgICAgICA8bnMxOmV4Y2VwdGlvbk5hbWUgeG1sbnM6bnMxPSJodHRwOi8veG1sLmFwYWNoZS5vcmcvYXhpcy8iPmNvbS5tb25leWdyYW0uYWdlbnRjb25uZWN0LnNvYXAuQUNFeGNlcHRpb248L25zMTpleGNlcHRpb25OYW1lPgogICAgICA8L2RldGFpbD4KICAgIDwvc29hcGVudjpGYXVsdD4KICA8L3NvYXBlbnY6Qm9keT4KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ERROR  path -  registerHardToken"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                            </wsp:OneOrMore>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="registerHardTokenRequest"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <wsp:All wsp:Usage="Required">
                            <L7p:WSDLOperation>
                                <L7p:OperationName stringValue="getBroadcastMessages"/>
                            </L7p:WSDLOperation>
                            <wsp:All wsp:Usage="Required">
                                <L7p:AuditDetailAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Log the masked request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ GetBroadcastMessagesRequest checkSecurity status = GRANTED [GUID = ${requestId}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------ INCOMING AC${agentConnectVersion} getBroadcastMessagesRequest [GUID = ${requestId}]= ${incomingRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform from Ac(RTS) Req to ESB request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="acToEsbXslt"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:agen="http://www.moneygram.com/AgentConnect1510" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">    
    <xsl:template match="/">
    <ns0:esbEnvelope xmlns:com="http://moneygram.com/common_v1" xmlns:ns0="http://moneygram.com/esb_v1">        
            <ns0:header>
                <ns0:messageGUID/>                
                <ns0:routingContext>      
                        <ns0:serviceFunctionID>OrchestrateGetBroadcastMessage1503</ns0:serviceFunctionID> 
                        <ns0:esbClientSystemId>L7-ACInternal</ns0:esbClientSystemId> 
                        <ns0:mgiAPIID>AC1503</ns0:mgiAPIID>
                        <ns0:poeTypeID>DW</ns0:poeTypeID>
                  </ns0:routingContext>
            </ns0:header>
            <ns0:requestPayload>
                <cdm:getBroadcastMessageRequest xmlns:cdm="http://moneygram.com/esb/dw/getBroadcastMessage_v1">
                   <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:unitProfileID) != 0">
                        <cdm:unitProfileID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:unitProfileID"/>
                        </cdm:unitProfileID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:agentID) != 0">
                        <cdm:agentID>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:agentID"/>
                        </cdm:agentID>
                    </xsl:if>
                    <xsl:if test="string-length(soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:agentSequence) != 0">
                        <cdm:agentSequence>
                            <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:agentSequence"/>
                        </cdm:agentSequence>
                    </xsl:if>
                    <cdm:token>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:token"/>
                    </cdm:token>
                    <cdm:timeStamp>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:timeStamp"/>
                    </cdm:timeStamp>

                    <cdm:apiVersion>${agentConnectVersion}</cdm:apiVersion>

                    <cdm:clientSoftwareVersion>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:clientSoftwareVersion"/>
                    </cdm:clientSoftwareVersion> 
                    
                     <cdm:msgLanguageCode>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:msgLanguageCode"/>
                    </cdm:msgLanguageCode>     
                    
                    <cdm:offsetGMT>
                        <xsl:value-of select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:offsetGMT"/>
                    </cdm:offsetGMT> 
                  
                    	<xsl:for-each select="soapenv:Envelope/soapenv:Body/agen:getBroadcastMessagesRequest/agen:messageInfo">
                                <cdm:messageInfo>
	       	<cdm:messageId>
	        	        <xsl:value-of select="agen:messageId"/>
	        	</cdm:messageId>
	        	<cdm:messageVersion>
		        <xsl:value-of select="agen:messageVersion"/>
	        	</cdm:messageVersion>
	                     <cdm:msgLanguageCode>
                        	        <xsl:value-of select="agen:msgLanguageCode"/>
                        	  </cdm:msgLanguageCode>
                        	  <cdm:startDate>
                        	          <xsl:value-of select="agen:startDate"/>
                        	  </cdm:startDate>
                        	  <cdm:expiryDate>
                        	          <xsl:value-of select="agen:expiryDate"/>
                        	  </cdm:expiryDate>                        	  
                        	  <cdm:subjectMimeData>
                        	          <xsl:value-of select="agen:subjectMimeData"/>	
                        	  </cdm:subjectMimeData>
                        	  <cdm:contentMimeData>
                        	          <xsl:value-of select="agen:contentMimeData"/>	
                        	  </cdm:contentMimeData>
                                 </cdm:messageInfo>	
                        </xsl:for-each>                    
                  </cdm:getBroadcastMessageRequest>
            </ns0:requestPayload>
        </ns0:esbEnvelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="esbGetBroadcastMessagesRequest"/>
                                    </L7p:SetVariable>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------OUTGOING ESB GetBroadcastMessagesRequest [GUID = ${requestId}]= ${esbGetBroadcastMessagesRequest.mainpart}"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="8b60ca61-e0d2-4ab0-9eb5-91830bfe1485"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Request Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logRequest"/>
                                    <L7p:value stringValue="esbGetBroadcastMessagesRequest"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING ESB GetBroadcaseMessagesRequest "/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:HttpRoutingAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Route to ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ConnectionTimeout stringValue="5000"/>
                                    <L7p:FailOnErrorStatus booleanValue="false"/>
                                    <L7p:MaxRetries intValue="0"/>
                                    <L7p:ProtectedServiceUrl stringValue="${esbUrl}"/>
                                    <L7p:ProxyPassword stringValueNull="null"/>
                                    <L7p:ProxyUsername stringValueNull="null"/>
                                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:RequestHeaderRules>
                                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                    <L7p:ForwardAll booleanValue="true"/>
                                    <L7p:Rules httpPassthroughRules="included"/>
                                    </L7p:RequestParamRules>
                                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                    <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                    </L7p:Rules>
                                    </L7p:ResponseHeaderRules>
                                    <L7p:TlsCipherSuites stringValue="TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA"/>
                                    <L7p:TlsVersion stringValue="TLSv1"/>
                                    </L7p:HttpRoutingAssertion>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}-- After Route to ESB Proxy   ${response.mainpart}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="rtpsMGSaveRegistrationResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="INCOMING RTPS MoneyGram Save Registration Response"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="errorMessage"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/ns0:esbEnvelope/ns0:error/ns1:errorMessage"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns1"/>

                                    <L7p:value stringValue="http://moneygram.com/common_v1"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>

                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns0"/>

                                    <L7p:value stringValue="http://moneygram.com/esb_v1"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>

                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Error response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:ns0="http://moneygram.com/esb_v1" xmlns:ns1="http://moneygram.com/common_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output indent="no" method="xml"/>
    <xsl:param name="timeStamp"/>
    
    
    <xsl:template match="/">
        
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <soapenv:Fault>
                    <faultcode>soapenv:Server</faultcode>
                    <faultstring><xsl:value-of select="/ns0:esbEnvelope/ns0:error/ns1:errorMessage"/></faultstring>
                    <detail>
                        <ac:error xmlns:ac="http://www.moneygram.com/AgentConnect1510">
                            <ac:errorCode><xsl:value-of select="/ns0:esbEnvelope/ns0:error/ns1:errorCode"/></ac:errorCode>
                            <ac:errorString><xsl:value-of select="/ns0:esbEnvelope/ns0:error/ns1:errorMessage"/></ac:errorString>
                            <ac:detailString><xsl:value-of select="/ns0:esbEnvelope/ns0:error/ns1:errorStackTrace"/></ac:detailString>  
                            <ac:timeStamp>${timeStamp}</ac:timeStamp>
                       </ac:error>
                        <ns1:exceptionName xmlns:ns1="http://xml.apache.org/axis/">com.moneygram.agentconnect.soap.ACException</ns1:exceptionName>
                    </detail>
                </soapenv:Fault>
            </soapenv:Body>        
        </soapenv:Envelope> 
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:HardcodedResponse>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Return 900 ESB -  Internal System Error"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>

                                    <L7p:Base64ResponseBody stringValue="ICAgIDxzb2FwZW52OkVudmVsb3BlIHhtbG5zOnNvYXBlbnY9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj4KICAgICAgICA8c29hcGVudjpCb2R5PgogICAgICAgICAgICA8c29hcGVudjpGYXVsdD4KICAgICAgICAgICAgICAgIDxmYXVsdGNvZGU+c29hcGVudjpTZXJ2ZXI8L2ZhdWx0Y29kZT4KICAgICAgICAgICAgICAgICAgICA8ZmF1bHRzdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9mYXVsdHN0cmluZz4KICAgICAgICAgICAgICAgICAgICA8ZGV0YWlsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjOmVycm9yIHhtbG5zOmFjPSJ7JHtjdXJyZW50TmFtZVNwYWNlfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhYzplcnJvckNvZGU+OTAwPC9hYzplcnJvckNvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjOmVycm9yU3RyaW5nPkVTQiBTeXN0ZW0gRXJyb3IgLSAke2Vycm9yTWVzc2FnZS5yZXN1bHR9PC9hYzplcnJvclN0cmluZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWM6dGltZVN0YW1wPiR7dGltZVN0YW1wfTwvYWM6dGltZVN0YW1wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hYzplcnJvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczE6ZXhjZXB0aW9uTmFtZSB4bWxuczpuczE9Imh0dHA6Ly94bWwuYXBhY2hlLm9yZy9heGlzLyI+Y29tLm1vbmV5Z3JhbS5hZ2VudGNvbm5lY3Quc29hcC5BQ0V4Y2VwdGlvbjwvbnMxOmV4Y2VwdGlvbk5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9kZXRhaWw+CiAgICAgICAgICAgICAgICA8L3NvYXBlbnY6RmF1bHQ+CiAgICAgICAgICAgIDwvc29hcGVudjpCb2R5PgogICAgPC9zb2FwZW52OkVudmVsb3BlPiA="/>
                                    <L7p:EarlyResponse booleanValue="true"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the error path"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="AC${agentConnectVersion}.Proxy"/>
                                    <L7p:Detail stringValue="------ Transforming getBroadcastMessage Response"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:XslTransformation>

                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>

                                    <L7p:value stringValue="Normal response conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet exclude-result-prefixes="ns1" version="1.0" xmlns:ns0="http://moneygram.com/esb_v1" xmlns:ns1="http://moneygram.com/esb_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <soapenv:Body>
                <ac:getBroadcastMessagesResponse xmlns:ac="http://www.moneygram.com/AgentConnect1510" xmlns:ns1="http://moneygram.com/esb/dw/getBroadcastMessage_v1">
                    <ac:doCheckIn>
                        <xsl:value-of select="ns0:esbEnvelope/ns0:responsePayload/ns1:getBroadcastMessageResponse/ns1:doCheckIn"/>
                    </ac:doCheckIn>
                    <ac:timeStamp>
                        <xsl:value-of select="ns0:esbEnvelope/ns0:responsePayload/ns1:getBroadcastMessageResponse/ns1:timeStamp"/>
                    </ac:timeStamp>
                    <ac:flags>
                        <xsl:value-of select="ns0:esbEnvelope/ns0:responsePayload/ns1:getBroadcastMessageResponse/ns1:flags"/>
                    </ac:flags>
                    <ac:status>
                         <xsl:value-of select="ns0:esbEnvelope/ns0:responsePayload/ns1:getBroadcastMessageResponse/ns1:status"/>
                    </ac:status>
                                       
                    <xsl:for-each select="ns0:esbEnvelope/ns0:responsePayload/ns1:getBroadcastMessageResponse//ns1:messageInfo">
                        <ac:messageInfo>
                            <ac:messageId>
                                   <xsl:value-of select="ns1:messageId"/>
                            </ac:messageId>
                            <ac:messageVersion>
	              <xsl:value-of select="ns1:messageVersion"/>
                            </ac:messageVersion>
                            <ac:msgLanguageCode>
	              <xsl:value-of select="ns1:msgLanguageCode"/>
                            </ac:msgLanguageCode>
                            <ac:startDate>
                                <xsl:value-of select="ns1:startDate"/>
                            </ac:startDate>
                            <ac:expiryDate>
                                <xsl:value-of select="ns1:startDate"/>
                            </ac:expiryDate>
                            <ac:subjectMimeData>
                                <xsl:value-of select="ns1:subjectMimeData"/>
                            </ac:subjectMimeData>
                            <ac:contentMimeData>
	           <xsl:value-of select="ns1:contentMimeData"/>
                            </ac:contentMimeData>
                        </ac:messageInfo>
                    </xsl:for-each>  
                    
                </ac:getBroadcastMessagesResponse>
            </soapenv:Body>
        </soapenv:Envelope>
    </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="acGetBroadcastMessagesResponse"/>
                                    </L7p:SetVariable>
                                    <L7p:AuditDetailAssertion>

                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}------ AC GetBroadcastMessagesResponse [GUID = ${requestId}]= ${acGetBroadcastMessagesResponse.mainpart}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="acGetBroadcastMessagesResponse"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING AC${agentCOnnectVersion}GetBroadcastMessages Response"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the non error scenario"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle the Conversion"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPgogICAgPHNvYXBlbnY6Qm9keT4KICAgICAgICA8c29hcGVudjpGYXVsdD4KICAgICAgICAgICAgPGZhdWx0Y29kZT5zb2FwZW52OlNlcnZlcjwvZmF1bHRjb2RlPgogICAgICAgICAgICA8ZmF1bHRzdHJpbmc+SW50ZXJuYWwgU3lzdGVtIEVycm9yPC9mYXVsdHN0cmluZz4KICAgICAgICAgICAgPGRldGFpbD4KICAgICAgICAgICAgICAgIDxhYzplcnJvciB4bWxuczphYz0ieyR7Y3VycmVudE5hbWVTcGFjZX19Ij4KICAgICAgICAgICAgICAgICAgICA8YWM6ZXJyb3JDb2RlPjk0NDwvYWM6ZXJyb3JDb2RlPgogICAgICAgICAgICAgICAgICAgIDxhYzplcnJvclN0cmluZz5JbnRlcm5hbCBTeXN0ZW0gRXJyb3I8L2FjOmVycm9yU3RyaW5nPgogICAgICAgICAgICAgICAgICAgIDxhYzp0aW1lU3RhbXA+JHt0aW1lU3RhbXB9PC9hYzp0aW1lU3RhbXA+CiAgICAgICAgICAgICAgICA8L2FjOmVycm9yPgogICAgICAgICAgICAgICAgPG5zMTpleGNlcHRpb25OYW1lIHhtbG5zOm5zMT0iaHR0cDovL3htbC5hcGFjaGUub3JnL2F4aXMvIj5jb20ubW9uZXlncmFtLmFnZW50Y29ubmVjdC5zb2FwLkFDRXhjZXB0aW9uPC9uczE6ZXhjZXB0aW9uTmFtZT4KICAgICAgICAgICAgPC9kZXRhaWw+CiAgICAgICAgPC9zb2FwZW52OkZhdWx0PgogICAgPC9zb2FwZW52OkJvZHk+Cjwvc29hcGVudjpFbnZlbG9wZT4g"/>
                                    <L7p:ResponseStatus stringValue="500"/>
                                    </L7p:HardcodedResponse>
                                </wsp:OneOrMore>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId}*** AC${agentConnectVersion} GetBroadcastMessages Request/Response Stats ---> [L7Service = ${service.name}][GUID = ${requestId}][TotalDuration = ${httpRouting.latency} ms][ReasonCode = ${httpRouting.reasonCode}]"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Proceed with Transaction if no security fault"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Convert getBroadCastMessage"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                    </wsp:OneOrMore>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <wsp:All wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:Encapsulated>
                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="d2cd5846-b9db-4d66-a100-31f18aecdddf"/>
                                    <L7p:EncapsulatedAssertionConfigName stringValue="Extract Attributes for ESB Header"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                </L7p:Encapsulated>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="${customLoggerName}"/>
                                    <L7p:Detail stringValue="${requestId} ESB Headers retrived successfully"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="commitTransaction"/>
                                    </L7p:WSDLOperation>
                                    <L7p:RequestXpathAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get productType to determine destination route."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="productType"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='commitTransactionRequest']/*[local-name()='productType']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${gateway.app.esb.product.lst}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:Operator operator="CONTAINS"/>
                                    <L7p:RightValue stringValue="${productType.result}"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3JjaGVzdHJhdGVTZXNzaW9uQ29tcGxldGlvbjE1MDk="/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="b3JjaGVzdHJhdGVTZXNzaW9uQ29tcGxldGlvbg=="/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform from AC Req to ESB request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="acToRtpsXslt"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 
	Last edited by: Rajesh Sridharan
	Purpose: Added apiName element, set default value for commitFlag and added operatorID.  Removed clientPoeType
	Last edited date: June 19, 2015
 --><xsl:stylesheet version="1.0" xmlns:p="http://moneygram.com/core/service/OrchestrateSessionCompletion1509" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" method="xml" omit-xml-declaration="no"/>

  <xsl:variable name="commitTransactionRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='commitTransactionRequest']"/>
  <xsl:template match="/">

	<p:orchestrateSessionCompletionRequest>
		    
	    <token>
	    	<xsl:value-of select="$commitTransactionRequest/*[local-name()='token']"/>
	    </token> 
			   
	    <mgiTransactionSessionID>
	    	<xsl:value-of select="$commitTransactionRequest/*[local-name()='mgiTransactionSessionID']"/>
	   	</mgiTransactionSessionID>
	    
	    <commitFlag>true</commitFlag>
	    
	    <productType>
	    	<xsl:value-of select="$commitTransactionRequest/*[local-name()='productType']"/>
	    </productType>
	    
	    <fieldValues>
		    <xsl:for-each select="$commitTransactionRequest/*[local-name()='fieldValues']/*[local-name()='keyValuePair']">
			    <p2:nameValue>
					<p2:name>
				    	<xsl:value-of select="current()/*[local-name()='xmlTag']"/>
				    </p2:name>
				    <xsl:if test="/*[local-name()='fieldValue']">
				    	<p2:value>
				        	<xsl:value-of select="current()/*[local-name()='fieldValue']"/>
				        </p2:value>
				    </xsl:if>
			    </p2:nameValue>
		    </xsl:for-each>
	    </fieldValues>
	    
		<xsl:if test="string-length($commitTransactionRequest/*[local-name()='stateRegulatorVersion'])!=0">
			<stateRegulatorVersion>
				<xsl:value-of select="$commitTransactionRequest/*[local-name()='stateRegulatorVersion']"/>
			</stateRegulatorVersion>
		</xsl:if>
	   	  	
		<xsl:if test="string-length($commitTransactionRequest/*[local-name()='primaryConsumerReceiptVersion'])!=0">
			<primaryConsumerReceiptVersion>
				<xsl:value-of select="$commitTransactionRequest/*[local-name()='primaryConsumerReceiptVersion']"/>
			</primaryConsumerReceiptVersion>
		</xsl:if>

		<xsl:if test="string-length($commitTransactionRequest/*[local-name()='secondaryConsumerReceiptVersion'])!=0">
			<secondaryConsumerReceiptVersion>
				<xsl:value-of select="$commitTransactionRequest/*[local-name()='secondaryConsumerReceiptVersion']"/>
			</secondaryConsumerReceiptVersion>
		</xsl:if>

		<xsl:if test="string-length($commitTransactionRequest/*[local-name()='primaryAgentReceiptVersion'])!=0">
			<primaryAgentReceiptVersion>
				<xsl:value-of select="$commitTransactionRequest/*[local-name()='primaryAgentReceiptVersion']"/>
			</primaryAgentReceiptVersion>
		</xsl:if>

		<xsl:if test="string-length($commitTransactionRequest/*[local-name()='secondaryAgentReceiptVersion'])!=0">
			<secondaryAgentReceiptVersion>
				<xsl:value-of select="$commitTransactionRequest/*[local-name()='secondaryAgentReceiptVersion']"/>
			</secondaryAgentReceiptVersion>
		</xsl:if>
	   		   		   	    
   	</p:orchestrateSessionCompletionRequest>
    
  </xsl:template>

            
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="commitTransaction[RCV]"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:RequestXpathAssertion>
                                    <L7p:VariablePrefix stringValue="mgiTransactionSessionID"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*/*[local-name()='mgiTransactionSessionID']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="receiveValidation"/>
                                    </L7p:WSDLOperation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3JjaGVzdHJhdGVSZWNlaXZlVmFsaWRhdGlvbjE1MDk="/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="b3JjaGVzdHJhdGVSZWNlaXZlVmFsaWRhdGlvbg=="/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="XSLT transformation - Request to ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:p="http://moneygram.com/core/service/OrchestrateReceiveValidation1509" xmlns:p1="http://moneygram.com/core/domain/transaction_v1" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:p3="http://moneygram.com/core/domain/agent_v1" xmlns:p4="http://moneygram.com/core/domain/consumer_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:variable name="receiveValidationRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='receiveValidationRequest']"/>
  <xsl:template match="/">

    <p:orchestrateReceiveValidationRequest>

      <returnCachedInfoFlag>false</returnCachedInfoFlag>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='operatorName'])!=0">
        <operatorName>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='operatorName']"/>
        </operatorName>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='referenceNumber'])!=0">
        <referenceNumber>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='referenceNumber']"/>
        </referenceNumber>
      </xsl:if>
      <token>
        <xsl:value-of select="$receiveValidationRequest/*[local-name()='token']"/>
      </token>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='pin'])!=0">
        <transactionPin>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='pin']"/>
        </transactionPin>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiveCurrency'])!=0">
        <receiveCurrency>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiveCurrency']"/>
        </receiveCurrency>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='agentCheckNumber'])!=0">
        <agentCheckNumber>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='agentCheckNumber']"/>
        </agentCheckNumber>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='agentCheckType'])!=0">
        <agentCheckType>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='agentCheckType']"/>
        </agentCheckType>
      </xsl:if>

      <!-- If there is no agentCheckAmount, default to 0.00-->
      <xsl:choose>
        <xsl:when test="string-length($receiveValidationRequest/*[local-name()='agentCheckAmount'])!=0">
          <agentCheckAmount>
            <xsl:value-of select="$receiveValidationRequest/*[local-name()='agentCheckAmount']"/>
          </agentCheckAmount>
        </xsl:when>
        <xsl:otherwise>
          <agentCheckAmount>
            <xsl:text>0.00</xsl:text>
          </agentCheckAmount>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='customerCheckNumber'])!=0">
        <customerCheckNumber>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='customerCheckNumber']"/>
        </customerCheckNumber>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='customerCheckType'])!=0">
        <customerCheckType>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='customerCheckType']"/>
        </customerCheckType>
      </xsl:if>

      <!-- If there is no customerCheckAmount, default to 0.00-->
      <xsl:choose>
        <xsl:when test="string-length($receiveValidationRequest/*[local-name()='customerCheckAmount'])!=0">
          <customerCheckAmount>
            <xsl:value-of select="$receiveValidationRequest/*[local-name()='customerCheckAmount']"/>
          </customerCheckAmount>
        </xsl:when>
        <xsl:otherwise>
          <customerCheckAmount>
            <xsl:text>0.00</xsl:text>
          </customerCheckAmount>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='billerAccountNumber'])!=0">
        <billerAccountNumber>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='billerAccountNumber']"/>
        </billerAccountNumber>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='otherPayoutType'])!=0">
        <otherPayoutType>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='otherPayoutType']"/>
        </otherPayoutType>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='otherPayoutAmount'])!=0">
        <otherPayoutAmount>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='otherPayoutAmount']"/>
        </otherPayoutAmount>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='cardExpirationMonth'])!=0">
        <cardExpirationMonth>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='cardExpirationMonth']"/>
        </cardExpirationMonth>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='cardExpirationYear'])!=0">
        <cardExpirationYear>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='cardExpirationYear']"/>
        </cardExpirationYear>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='cardSwiped'])!=0">
        <cardSwipedFlag>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='cardSwiped']"/>
        </cardSwipedFlag>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverAddress'])!=0">
        <receiverAddress>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverAddress']"/>
        </receiverAddress>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverAddress2'])!=0">
        <receiverAddress2>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverAddress2']"/>
        </receiverAddress2>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverAddress3'])!=0">
        <receiverAddress3>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverAddress3']"/>
        </receiverAddress3>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverCity'])!=0">
        <receiverCity>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverCity']"/>
        </receiverCity>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverState'])!=0">
        <receiverState>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverState']"/>
        </receiverState>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverZipCode'])!=0">
        <receiverPostalCode>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverZipCode']"/>
        </receiverPostalCode>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverCountry'])!=0">
        <receiverCountry>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverCountry']"/>
        </receiverCountry>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPhone'])!=0">
        <receiverPrimaryPhone>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPhone']"/>
        </receiverPrimaryPhone>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverBirthCity'])!=0">
        <receiverBirthCity>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverBirthCity']"/>
        </receiverBirthCity>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverBirthCountry'])!=0">
        <receiverBirthCountry>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverBirthCountry']"/>
        </receiverBirthCountry>
      </xsl:if>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPhotoIdType'])!=0">
        <receiverPersonalId1Type>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPhotoIdType']"/>
        </receiverPersonalId1Type>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPhotoIdNumber'])!=0">
        <receiverPersonalId1Number>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPhotoIdNumber']"/>
        </receiverPersonalId1Number>
      </xsl:if>

      <!-- if receiverPhotoIdType is Passport, then map the following to receiverPersonalId1 -->
      <xsl:if test="$receiveValidationRequest/*[local-name()='receiverPhotoIdType'] = 'PAS'">
        <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPassportIssueDate'])!=0">
          <receiverPersonalId1IssueMonth>
            <xsl:value-of select="substring($receiveValidationRequest/*[local-name()='receiverPassportIssueDate'],6,2)"/>
          </receiverPersonalId1IssueMonth>

          <receiverPersonalId1IssueDay>
            <xsl:value-of select="substring($receiveValidationRequest/*[local-name()='receiverPassportIssueDate'],9,2)"/>
          </receiverPersonalId1IssueDay>

          <receiverPersonalId1IssueYear>
            <xsl:value-of select="substring($receiveValidationRequest/*[local-name()='receiverPassportIssueDate'],1,4)"/>
          </receiverPersonalId1IssueYear>
        </xsl:if>


        <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPassportIssueCity'])!=0">
          <receiverPersonalId1IssueCity>
            <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPassportIssueCity']"/>
          </receiverPersonalId1IssueCity>
        </xsl:if>

      </xsl:if>

      <xsl:choose>
        <xsl:when test="$receiveValidationRequest/*[local-name()='receiverPhotoIdType'] = 'PAS'">
          <xsl:choose>
            <xsl:when test="string-length($receiveValidationRequest/*[local-name()='receiverPassportIssueCountry'])!=0 and string-length($receiveValidationRequest/*[local-name()='receiverPhotoIdCountry'])!=0">
              <receiverPersonalId1IssueCountry>
                <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPassportIssueCountry']"/>
              </receiverPersonalId1IssueCountry>
            </xsl:when>

            <xsl:when test="string-length($receiveValidationRequest/*[local-name()='receiverPassportIssueCountry'])!=0">
              <receiverPersonalId1IssueCountry>
                <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPassportIssueCountry']"/>
              </receiverPersonalId1IssueCountry>
            </xsl:when>

            <xsl:otherwise>
              <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPhotoIdCountry'])!=0">
                <receiverPersonalId1IssueCountry>
                  <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPhotoIdCountry']"/>
                </receiverPersonalId1IssueCountry>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPhotoIdCountry'])!=0">
            <receiverPersonalId1IssueCountry>
              <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPhotoIdCountry']"/>
            </receiverPersonalId1IssueCountry>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverPhotoIdState'])!=0">
        <receiverPersonalId1State>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverPhotoIdState']"/>
        </receiverPersonalId1State>
      </xsl:if>




      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverLegalIdType'])!=0">
        <receiverPersonalId2Type>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverLegalIdType']"/>
        </receiverPersonalId2Type>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverLegalIdNumber'])!=0">
        <receiverPersonalId2Number>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverLegalIdNumber']"/>
        </receiverPersonalId2Number>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverLegalIdIssueCountry'])!=0">
        <receiverPersonalId2IssueCountry>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverLegalIdIssueCountry']"/>
        </receiverPersonalId2IssueCountry>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverDOB'])!=0">
        <receiverDOB>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverDOB']"/>
        </receiverDOB>
      </xsl:if>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='receiverOccupation'])!=0">
        <receiverOccupation>
          <xsl:text>OTHER</xsl:text>
        </receiverOccupation>
        <receiverOccupationOther>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='receiverOccupation']"/>
        </receiverOccupationOther>
      </xsl:if>
      
      <xsl:choose>
        <xsl:when test="string-length($receiveValidationRequest/*[local-name()='thirdPartyFirstName'])!=0 or          string-length($receiveValidationRequest/*[local-name()='thirdPartyMiddleName'])!=0 or      string-length($receiveValidationRequest/*[local-name()='thirdPartyLastName'])!=0 or      string-length($receiveValidationRequest/*[local-name()='thirdPartyLastName2'])!=0">
          <thirdPartyReceiverType>
            <xsl:text>PERSON</xsl:text>
          </thirdPartyReceiverType>
        </xsl:when>

        <xsl:when test="(string-length($receiveValidationRequest/*[local-name()='thirdPartyFirstName'])!=0 or          string-length($receiveValidationRequest/*[local-name()='thirdPartyMiddleName'])!=0 or      string-length($receiveValidationRequest/*[local-name()='thirdPartyLastName'])!=0 or      string-length($receiveValidationRequest/*[local-name()='thirdPartyLastName2'])!=0) and       string-length($receiveValidationRequest/*[local-name()='thirdPartyOrg'])!=0">
          <thirdPartyReceiverType>
            <xsl:text>PERSON</xsl:text>
          </thirdPartyReceiverType>

        </xsl:when>

        <xsl:when test="string-length($receiveValidationRequest/*[local-name()='thirdPartyOrg'])!=0">
          <thirdPartyReceiverType>
            <xsl:text>ORG</xsl:text>
          </thirdPartyReceiverType>
        </xsl:when>
        <xsl:otherwise>
          <thirdPartyReceiverType>
            <xsl:text>NONE</xsl:text>
          </thirdPartyReceiverType>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyFirstName'])!=0">
        <thirdPartyReceiverFirstName>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyFirstName']"/>
        </thirdPartyReceiverFirstName>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyMiddleName'])!=0">
        <thirdPartyReceiverMiddleName>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyMiddleName']"/>
        </thirdPartyReceiverMiddleName>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyLastName'])!=0">
        <thirdPartyReceiverLastName>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyLastName']"/>
        </thirdPartyReceiverLastName>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyLastName2'])!=0">
        <thirdPartyReceiverLastName2>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyLastName2']"/>
        </thirdPartyReceiverLastName2>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyAddress'])!=0">
        <thirdPartyReceiverAddress>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyAddress']"/>
        </thirdPartyReceiverAddress>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyAddress2'])!=0">
        <thirdPartyReceiverAddress2>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyAddress2']"/>
        </thirdPartyReceiverAddress2>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyAddress3'])!=0">
        <thirdPartyReceiverAddress3>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyAddress3']"/>
        </thirdPartyReceiverAddress3>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyCity'])!=0">
        <thirdPartyReceiverCity>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyCity']"/>
        </thirdPartyReceiverCity>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyState'])!=0">
        <thirdPartyReceiverState>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyState']"/>
        </thirdPartyReceiverState>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyZipCode'])!=0">
        <thirdPartyReceiverPostalCode>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyZipCode']"/>
        </thirdPartyReceiverPostalCode>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyCountry'])!=0">
        <thirdPartyReceiverCountry>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyCountry']"/>
        </thirdPartyReceiverCountry>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyPhotoIdType'])!=0">
        <thirdPartyReceiverPersonalId1Type>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyPhotoIdType']"/>
        </thirdPartyReceiverPersonalId1Type>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyPhotoIdNumber'])!=0">
        <thirdPartyReceiverPersonalId1Number>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyPhotoIdNumber']"/>
        </thirdPartyReceiverPersonalId1Number>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyPhotoIdIssueCountry'])!=0">
        <thirdPartyReceiverPersonalId1IssueCountry>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyPhotoIdIssueCountry']"/>
        </thirdPartyReceiverPersonalId1IssueCountry>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyPhotoIdState'])!=0">
        <thirdPartyReceiverPersonalId1State>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyPhotoIdState']"/>
        </thirdPartyReceiverPersonalId1State>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyLegalIdType'])!=0">
        <thirdPartyReceiverPersonalId2Type>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyLegalIdType']"/>
        </thirdPartyReceiverPersonalId2Type>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyLegalIdNumber'])!=0">
        <thirdPartyReceiverPersonalId2Number>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyLegalIdNumber']"/>
        </thirdPartyReceiverPersonalId2Number>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyLegalIdIssueCountry'])!=0">
        <thirdPartyReceiverPersonalId2IssueCountry>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyLegalIdIssueCountry']"/>
        </thirdPartyReceiverPersonalId2IssueCountry>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyDOB'])!=0">
        <thirdPartyReceiverDOB>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyDOB']"/>
        </thirdPartyReceiverDOB>
      </xsl:if>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyOccupation'])!=0">
        <thirdPartyReceiverOccupation>
          <xsl:text>OTHER</xsl:text>
        </thirdPartyReceiverOccupation>
        <thirdPartyReceiverOccupationOther>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyOccupation']"/>
        </thirdPartyReceiverOccupationOther>
      </xsl:if>


      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='thirdPartyOrg'])!=0">
        <thirdPartyReceiverOrganization>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='thirdPartyOrg']"/>
        </thirdPartyReceiverOrganization>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='pcTerminalNumber'])!=0">
        <pcTerminalNumber>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='pcTerminalNumber']"/>
        </pcTerminalNumber>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='agentUseReceiveData'])!=0">
        <agentUseReceiveData>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='agentUseReceiveData']"/>
        </agentUseReceiveData>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='consumerId'])!=0">
        <receiveConsumerId>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='consumerId']"/>
        </receiveConsumerId>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='agentConsumerID'])!=0">
        <receiveAgentConsumerID>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='agentConsumerID']"/>
        </receiveAgentConsumerID>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='agentTransactionId'])!=0">
        <receiveAgentTransactionId>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='agentTransactionId']"/>
        </receiveAgentTransactionId>
      </xsl:if>
      <mgiTransactionSessionID>
        <xsl:value-of select="$receiveValidationRequest/*[local-name()='mgiTransactionSessionID']"/>
      </mgiTransactionSessionID>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='formFreeStaging'])!=0">
        <formFreeStagingFlag>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='formFreeStaging']"/>
        </formFreeStagingFlag>
      </xsl:if>

      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='internalReasonCode'])!=0">
        <internalReasonCode>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='internalReasonCode']"/>
        </internalReasonCode>
      </xsl:if>
      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='refundReasonCode'])!=0">
        <refundReasonCode>
          <xsl:value-of select="$receiveValidationRequest/*[local-name()='refundReasonCode']"/>
        </refundReasonCode>
      </xsl:if>


      <xsl:if test="string-length($receiveValidationRequest/*[local-name()='fieldValues']/*[local-name()='keyValuePair'])!=0">
        <fieldValues>
          <xsl:for-each select="$receiveValidationRequest/*[local-name()='fieldValues']/*[local-name()='keyValuePair']">
            <p2:nameValue>
              <p2:name>
                <xsl:value-of select="normalize-space(current()/*[local-name()='xmlTag'])"/>
              </p2:name>
              <p2:value>
                <xsl:value-of select="normalize-space(current()/*[local-name()='fieldValue'])"/>
              </p2:value>
            </p2:nameValue>
          </xsl:for-each>
        </fieldValues>
      </xsl:if>

      <verifiedFields>

        <fieldList>

          <xsl:text>fieldList</xsl:text>
        </fieldList>

      </verifiedFields>

    </p:orchestrateReceiveValidationRequest>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="receiveValidation Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="referenceNumber"/>
                                    </L7p:WSDLOperation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3JjaGVzdHJhdGVUcmFuc2FjdGlvbkxvb2t1cDE1MDk="/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="b3JjaGVzdHJhdGVUcmFuc2FjdGlvbkxvb2t1cA=="/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="XSLT transformation - Request to ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:p="http://moneygram.com/core/service/OrchestrateTransactionLookup1509" xmlns:p1="http://moneygram.com/core/domain/transaction_v1" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:p3="http://moneygram.com/core/domain/consumer_v1" xmlns:p4="http://moneygram.com/core/domain/agent_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>

  <xsl:variable name="referenceNumberRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='referenceNumberRequest']"/>
  <xsl:template match="/">
    <p:orchestrateTransactionLookupRequest>
      <returnCachedInfoFlag>false</returnCachedInfoFlag>
      <purposeOfLookup>RECEIVE</purposeOfLookup>
      <referenceNumber>
        <xsl:value-of select="$referenceNumberRequest/*[local-name()='referenceNumber']"/>
      </referenceNumber>
      <mgiTransactionSessionID/>
      <xsl:if test="string-length($referenceNumberRequest/*[local-name()='pin'])!=0">
        <transactionPin>
          <xsl:value-of select="$referenceNumberRequest/*[local-name()='pin']"/>
        </transactionPin>
      </xsl:if>
      <includeUseDataFlag>false</includeUseDataFlag>
      <includeNotesFlag>false</includeNotesFlag>
      <includeAmendHistoryFlag>false</includeAmendHistoryFlag>
      <includeAlertsFlag>false</includeAlertsFlag>
      <includeHistoricalDataFlag>false</includeHistoricalDataFlag>
      <includeDynamicReceiptsFlag>false</includeDynamicReceiptsFlag>
      <targetAudience>Agent_Facing</targetAudience>
      <xsl:if test="string-length($referenceNumberRequest/*[local-name()='token'])!=0">
        <token>
          <xsl:value-of select="$referenceNumberRequest/*[local-name()='token']"/>
        </token>
      </xsl:if>
    </p:orchestrateTransactionLookupRequest>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="referenceNumber Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="getFieldsForProduct"/>
                                    </L7p:WSDLOperation>
                                    <L7p:RequestXpathAssertion>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Get productType to determine destination route."/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:VariablePrefix stringValue="productType"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='getFieldsForProductRequest']/*[local-name()='productType']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:RequestXpathAssertion>
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${productType.result}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="RCV"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3JjaGVzdHJhdGVHZXRGaWVsZHNGb3JQcm9kdWN0MTUwOQ=="/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="b3JjaGVzdHJhdGVSZWNlaXZlVmFsaWRhdGlvbg=="/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="GetFieldsForProductRequest to ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0"  xmlns:p="http://moneygram.com/core/service/OrchestrateReceiveValidation1509" xmlns:p1="http://moneygram.com/core/domain/agent_v1" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:p3="http://moneygram.com/core/domain/transaction_v1" xmlns:p4="http://moneygram.com/core/domain/consumer_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="no" method="xml"/>
  <xsl:param name="requestId"/>
  <xsl:variable name="getFieldsForProductRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='getFieldsForProductRequest']"/>
  <xsl:template match="/">
    <p:orchestrateReceiveValidationRequest>

      <returnCachedInfoFlag>false</returnCachedInfoFlag>
      <token>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='token']"/>
      </token>
      <receiveCurrency>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='receiveCurrency']"/>
      </receiveCurrency>
      <productType>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='productType']"/>
      </productType>
      <amount>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='amount']"/>
      </amount>
      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='sendCurrency'])!=0">
        <sendCurrency>
          <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='sendCurrency']"/>
        </sendCurrency>
      </xsl:if>
      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='billerAccountNumber'])!=0">
        <billerAccountNumber>
          <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='billerAccountNumber']"/>
        </billerAccountNumber>
      </xsl:if>
      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='otherPayoutType'])!=0">
        <otherPayoutType>
          <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='otherPayoutType']"/>
        </otherPayoutType>
      </xsl:if>
      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='cardSwiped'])!=0">
        <cardSwipedFlag>
          <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='cardSwiped']"/>
        </cardSwipedFlag>
      </xsl:if>

      <thirdPartyReceiverType>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='thirdPartyType']"/>
      </thirdPartyReceiverType>
      <receiveConsumerId>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='consumerId']"/>
      </receiveConsumerId>

      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='customerReceiveNumber'])!=0">
        <customerReceiveNumber>
          <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='customerReceiveNumber']"/>
        </customerReceiveNumber>
      </xsl:if>

      <receiveAgentConsumerID>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='receiveAgentID']"/>
      </receiveAgentConsumerID>
      <mgiTransactionSessionID/>
      <formFreeStagingFlag>false</formFreeStagingFlag>
      <receiveCountry>
        <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='receiveCountry']"/>
      </receiveCountry>

      <!--communicationRetryFlag>false</communicationRetryFlag-->
      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='internalFieldsRequired'])!=0">
        <internalFieldsRequiredFlag>
          <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='internalFieldsRequired']"/>
        </internalFieldsRequiredFlag>
      </xsl:if>
      <xsl:if test="string-length($getFieldsForProductRequest/*[local-name()='deliveryOption'])!=0">
  <deliveryOption>
    <xsl:value-of select="$getFieldsForProductRequest/*[local-name()='deliveryOption']"/>
  </deliveryOption>
</xsl:if>
    </p:orchestrateReceiveValidationRequest>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="getFieldsForProduct"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="formFreeReceiveLookup"/>
                                    </L7p:WSDLOperation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3JjaGVzdHJhdGVUcmFuc2FjdGlvbkxvb2t1cDE1MDk="/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="b3JjaGVzdHJhdGVUcmFuc2FjdGlvbkxvb2t1cA=="/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="XSLT transformation - Request to ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!--
Updated: 16 Oct 2015
By: Sarabjit
--><xsl:stylesheet version="1.0" xmlns:p="http://moneygram.com/core/service/OrchestrateTransactionLookup1509" xmlns:p1="http://moneygram.com/core/domain/transaction_v1" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:p3="http://moneygram.com/core/domain/consumer_v1" xmlns:p4="http://moneygram.com/core/domain/agent_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output encoding="UTF-8" indent="yes" method="xml" omit-xml-declaration="no"/>
   <xsl:variable name="formFreeReceiveLookupRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='formFreeReceiveLookupRequest']"/>
   <xsl:template match="/">
      <p:orchestrateTransactionLookupRequest>
         <returnCachedInfoFlag>false</returnCachedInfoFlag>
         <purposeOfLookup>RECEIVECOMPLETION</purposeOfLookup>
         <referenceNumber>
            <xsl:value-of select="$formFreeReceiveLookupRequest/*[local-name()='referenceNumber']"/>
         </referenceNumber>
         <mgiTransactionSessionID/>
         <includeUseDataFlag>false</includeUseDataFlag>
         <includeNotesFlag>false</includeNotesFlag>
         <includeAmendHistoryFlag>false</includeAmendHistoryFlag>
         <includeAlertsFlag>false</includeAlertsFlag>
         <includeHistoricalDataFlag>false</includeHistoricalDataFlag>
         <includeDynamicReceiptsFlag>false</includeDynamicReceiptsFlag>
         <targetAudience>Agent_Facing</targetAudience>
         <xsl:if test="string-length($formFreeReceiveLookupRequest/*[local-name()='token'])!=0">
            <token>
               <xsl:value-of select="$formFreeReceiveLookupRequest/*[local-name()='token']"/>
            </token>
         </xsl:if>
      </p:orchestrateTransactionLookupRequest>
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="formFreeReceiveLookup"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="moneyGramSendDetailReportWithTax"/>
                                    </L7p:WSDLOperation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RGV0YWlsZWRSZXBvcnQxNjAz"/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RGF0YUxvb2t1cFRhc2tTZXJ2aWNl"/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="XSLT transformation - Request to ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- Last edited by: Karthick Last edited date: Jan 11, 2016 --><xsl:stylesheet version="1.0" xmlns:sdr="http://moneygram.com/core/service/SendDetailReport1603" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output encoding="UTF-8" indent="no" method="xml" omit-xml-declaration="no"/>

	<xsl:variable name="moneyGramSendDetailReportWithTaxRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='moneyGramSendDetailReportWithTaxRequest']"/>
	<xsl:template match="/">


		<sdr:SendDetailReportRequest>

			<sdr:activityDate>
				<xsl:value-of select="$moneyGramSendDetailReportWithTaxRequest/*[local-name()='activityDate']"/>
			</sdr:activityDate>

		</sdr:SendDetailReportRequest>

	</xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="moneyGramSendDetailReportWithTax"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="sendReversal"/>
                                    </L7p:WSDLOperation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3JjaGVzdHJhdGVTZW5kUmV2ZXJzYWxWYWxpZGF0aW9uMTYwNw=="/>
                                    <L7p:VariableToSet stringValue="serviceFunctionId"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="b3JjaGVzdHJhdGVTZW5kUmV2ZXJzYWxWYWxpZGF0aW9u"/>
                                    <L7p:VariableToSet stringValue="esbOrchestratorName"/>
                                    </L7p:SetVariable>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Transform from AC Req to ESB request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:MsgVarPrefix stringValue="acToRtpsXslt"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 
	Created by : Rekha Kandasamy
	Purpose: Add sendReversal Implementation
	Last edited  date: May 2, 2016
 --><xsl:stylesheet version="1.0" xmlns:p="http://moneygram.com/core/service/OrchestrateSendReversalValidation1607" xmlns:p1="http://moneygram.com/core/domain/agent_v1" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:p3="http://moneygram.com/core/domain/transaction_v1" xmlns:p4="http://moneygram.com/core/domain/consumer_v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output encoding="UTF-8" indent="no" method="xml" omit-xml-declaration="no"/>

  <xsl:variable name="sendReversalRequest" select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='sendReversalRequest']"/>
  <xsl:template match="/">

            <p:orchestrateSendReversalValidationRequest xmlns:p="http://moneygram.com/core/service/OrchestrateSendReversalValidation1607">

                       <returnCachedInfoFlag>
	                         <xsl:value-of select="$sendReversalRequest/*[local-name()='returnCachedInfo']"/>
                        </returnCachedInfoFlag>
                        
                        <xsl:if test="string-length($sendReversalRequest/*[local-name()='targetAudience'])!=0">	    		    
	            <targetAudience>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='targetAudience']"/>
	            </targetAudience> 	   
	    </xsl:if> 
	     
                         <xsl:if test="string-length($sendReversalRequest/*[local-name()='token'])!=0">	    		    
	            <token>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='token']"/>
	            </token> 	   
	    </xsl:if> 
		    
	    <xsl:if test="string-length($sendReversalRequest/*[local-name()='referenceNumber'])!=0">
	            <referenceNumber>
	        	<xsl:value-of select="$sendReversalRequest/*[local-name()='referenceNumber']"/>
	            </referenceNumber>
	    </xsl:if>
	    
	    <sendAmount>
	                    <xsl:value-of select="$sendReversalRequest/*[local-name()='sendAmount']"/>
	     </sendAmount>
				 
   	   <xsl:if test="string-length($sendReversalRequest/*[local-name()='sendCurrency'])!=0">
                            <sendCurrency>
	                <xsl:value-of select="$sendReversalRequest/*[local-name()='sendCurrency']"/>
	       </sendCurrency>     
	   </xsl:if> 
	    
	   <xsl:if test="string-length($sendReversalRequest/*[local-name()='operatorName'])!=0">
	            <operatorName>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='operatorName']"/>
                                 </operatorName>
	    </xsl:if>
	    
	      <reversalType>
	                <xsl:value-of select="$sendReversalRequest/*[local-name()='reversalType']"/>
	       </reversalType>
	       
	       <xsl:choose>
                                         <xsl:when test="$sendReversalRequest/*[local-name()='feeRefund']='Y'">
                                                        <feeRefund>true</feeRefund>
                                        </xsl:when>
                                        <xsl:when test="$sendReversalRequest/*[local-name()='feeRefund']='y'">
                                                        <feeRefund>true</feeRefund>
                                        </xsl:when>
                                         <xsl:when test="$sendReversalRequest/*[local-name()='feeRefund']='N'">
                                                          <feeRefund>false</feeRefund>
                                          </xsl:when>
                                          <xsl:when test="$sendReversalRequest/*[local-name()='feeRefund']='n'">
                                                           <feeRefund>false</feeRefund>
                                          </xsl:when>
                                </xsl:choose>                  
	      
	       <xsl:if test="string-length($sendReversalRequest/*[local-name()='sendReversalReason'])!=0">
	            <sendReversalReason>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='sendReversalReason']"/>  
	            </sendReversalReason>                           
	    </xsl:if>
		    
	    <internalCompensatingTransactionFlag>false</internalCompensatingTransactionFlag>
	      	    
	    <xsl:if test="string-length($sendReversalRequest/*[local-name()='agentCheckType'])!=0">
	            <agentCheckType>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='agentCheckType']"/>
        	            </agentCheckType>
	    </xsl:if>
	    
	     <xsl:if test="string-length($sendReversalRequest/*[local-name()='customerCheckType'])!=0"> 
	            <customerCheckType>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='customerCheckType']"/>
        	            </customerCheckType>
	     </xsl:if> 
	    
	    <xsl:if test="string-length($sendReversalRequest/*[local-name()='agentCheckNumber'])!=0">
	            <payout1CheckNumber>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='agentCheckNumber']"/>
	            </payout1CheckNumber>
	     </xsl:if>
	    
	     <xsl:if test="string-length($sendReversalRequest/*[local-name()='agentCheckAmount'])!=0">
	             <payout1CheckAmount>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='agentCheckAmount']"/>
                                   </payout1CheckAmount>
	    </xsl:if>
	    
	     <xsl:if test="string-length($sendReversalRequest/*[local-name()='customerCheckNumber'])!=0">
	             <payout2CheckNumber>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='customerCheckNumber']"/>
	            </payout2CheckNumber>
	    </xsl:if>
	    
	     <xsl:if test="string-length($sendReversalRequest/*[local-name()='customerCheckAmount'])!=0">
	             <payout2CheckAmount>
	    	<xsl:value-of select="$sendReversalRequest/*[local-name()='customerCheckAmount']"/>
        	            </payout2CheckAmount>
        	      </xsl:if>
	    
	      <communicationRetryIndicatorFlag>false</communicationRetryIndicatorFlag>                       	     
                    	     
                    	      <completeTransactionFlag>true</completeTransactionFlag>                 	                   	                      	     
                  	     
   	</p:orchestrateSendReversalValidationRequest>
    
  </xsl:template>
            
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="sendReversal"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle ESB Request Mapping"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:OneOrMore>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ESB Request"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <L7p:Include>
                                <L7p:PolicyGuid stringValue="7cfe2c72-96fe-40d1-a343-45c653e0be09"/>
                            </L7p:Include>
                            <wsp:OneOrMore wsp:Usage="Required">
                                <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${isErrorOccured}"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="true"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:TrueAssertion/>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="If there is an error skip this step"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='serviceErrors']/*[local-name()='serviceError']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:Include>
                                    <L7p:PolicyGuid stringValue="455bb960-24fb-4531-9616-db40cbd7d36b"/>
                                    </L7p:Include>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="FAULT RESPONSE"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:All>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="successIndicator"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='orchestrateSessionCompletionResponse']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="commitTransaction"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Convert the valid response from ESB"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 
	Last edited by: Karan Garg
	Purpose: XSLT check for xsi and xsd
	Last edited date: Nov 15, 2015
 --><xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output encoding="UTF-8" indent="no" method="xml" omit-xml-declaration="no"/>
<xsl:param name="currentNameSpace"/>
  <xsl:variable name="commitTransactionResponse" select="//*[local-name()='orchestrateSessionCompletionResponse']"/>
  <xsl:template match="/">

    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

      <soapenv:Body>
        <ac:commitTransactionResponse xmlns:ac="${currentNameSpace}">

          <ac:doCheckIn>
            <xsl:value-of select="$commitTransactionResponse/*[local-name()='doCheckInFlag']"/>
          </ac:doCheckIn>

          <ac:timeStamp>
            <xsl:value-of select="$commitTransactionResponse/*[local-name()='timeStamp']"/>
          </ac:timeStamp>
          <ac:flags>
            <xsl:value-of select="$commitTransactionResponse/*[local-name()='flags']"/>
          </ac:flags>
          <ac:referenceNumber>
            <xsl:value-of select="$commitTransactionResponse/*[local-name()='referenceNumber']"/>
          </ac:referenceNumber>

          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='partnerConfirmationNumber']) != 0">
            <ac:partnerConfirmationNumber>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='partnerConfirmationNumber']"/>
            </ac:partnerConfirmationNumber>
          </xsl:if>

          <!-- MegaSAS - Added xsl:if to generate the element only if value is present -->
          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='partnerName']) != 0">
            <ac:partnerName>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='partnerName']"/>
            </ac:partnerName>
          </xsl:if>

          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='freePhoneCallPIN']) != 0">
            <ac:freePhoneCallPIN>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='freePhoneCallPIN']"/>
            </ac:freePhoneCallPIN>
          </xsl:if>

          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='tollFreePhoneNumber']) != 0">
            <ac:tollFreePhoneNumber>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='tollFreePhoneNumber']"/>
            </ac:tollFreePhoneNumber>
          </xsl:if>

          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='expectedDateOfDelivery']) != 0">
            <ac:expectedDateOfDelivery>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='expectedDateOfDelivery']"/>
            </ac:expectedDateOfDelivery>
          </xsl:if>

          <ac:transactionDateTime>
            <xsl:value-of select="$commitTransactionResponse/*[local-name()='transactionDateTime']"/>
          </ac:transactionDateTime>

          <!-- MegaSAS - Added xsl:if to generate the element only if value is present -->
          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='agentCheckAuthorizationNumber']) != 0">
            <ac:agentCheckAuthorizationNumber>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='agentCheckAuthorizationNumber']"/>
            </ac:agentCheckAuthorizationNumber>
          </xsl:if>

          <xsl:for-each select="$commitTransactionResponse/*[local-name()='ReceiptTextInfo']">
            <ac:receiptTextInfo>
              <ac:longLanguageCode>
                <xsl:value-of select="current()/*[local-name()='longLanguageCode']"/>
              </ac:longLanguageCode>

              <ac:textTranslation>
                <xsl:value-of select="current()/*[local-name()='textTranslation']"/>
              </ac:textTranslation>

            </ac:receiptTextInfo>
          </xsl:for-each>

          <!-- MegaSAS - Added xsl:if to generate the element only if value is present -->
          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='receiptMimeType']) != 0">
            <ac:receiptMimeType>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='receiptMimeType']"/>
            </ac:receiptMimeType>
          </xsl:if>

          <!-- MegaSAS - Added xsl:if to generate the element only if value is present -->
          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='agentReceiptMimeData']) != 0">
            <ac:agentReceiptMimeData>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='agentReceiptMimeData']"/>
            </ac:agentReceiptMimeData>
          </xsl:if>

          <!-- MegaSAS - Added xsl:if to generate the element only if value is present -->
          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='consumerReceipt1MimeData']) != 0">
            <ac:consumerReceipt1MimeData>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='consumerReceipt1MimeData']"/>
            </ac:consumerReceipt1MimeData>
          </xsl:if>

          <!-- MegaSAS - Added xsl:if to generate the element only if value is present -->
          <xsl:if test="string-length($commitTransactionResponse/*[local-name()='consumerReceipt2MimeData']) != 0">
            <ac:consumerReceipt2MimeData>
              <xsl:value-of select="$commitTransactionResponse/*[local-name()='consumerReceipt2MimeData']"/>
            </ac:consumerReceipt2MimeData>
          </xsl:if>

          <!--  MegaSAS - Incorporated mapping for alerts -->
          <xsl:for-each select="$commitTransactionResponse/*[local-name()='alerts']">
            <ac:alerts>
              <xsl:if test="string-length(*[local-name()='poeTranID']) != 0">
                <ac:poeTranID>
                  <xsl:value-of select="./*[local-name()='poeTranID']"/>
                </ac:poeTranID>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='poeTranEventID']) != 0">
                <ac:poeTranEventID>
                  <xsl:value-of select="./*[local-name()='poeTranEventID']"/>
                </ac:poeTranEventID>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='alertStatusCode']) != 0">
                <ac:alertStatusCode>
                  <xsl:value-of select="./*[local-name()='alertStatusCode']"/>
                </ac:alertStatusCode>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='alertStatusBsnsDesc']) != 0">
                <ac:alertStatusBsnsDesc>
                  <xsl:value-of select="./*[local-name()='alertStatusBsnsDesc']"/>
                </ac:alertStatusBsnsDesc>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='sourceSystemId']) != 0">
                <ac:sourceSystemId>
                  <xsl:value-of select="./*[local-name()='sourceSystemId']"/>
                </ac:sourceSystemId>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='application']) != 0">
                <ac:application>
                  <xsl:value-of select="./*[local-name()='application']"/>
                </ac:application>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='businessAreaCode']) != 0">
                <ac:businessAreaCode>
                  <xsl:value-of select="./*[local-name()='businessAreaCode']"/>
                </ac:businessAreaCode>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='actionLevelCode']) != 0">
                <ac:actionLevelCode>
                  <xsl:value-of select="./*[local-name()='actionLevelCode']"/>
                </ac:actionLevelCode>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='mgiInternalIssueScreeningID']) != 0">
                <ac:mgiInternalIssueScreeningID>
                  <xsl:value-of select="./*[local-name()='mgiInternalIssueScreeningID']"/>
                </ac:mgiInternalIssueScreeningID>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='consumerId']) != 0">
                <ac:consumerID>
                  <xsl:value-of select="./*[local-name()='consumerId']"/>
                </ac:consumerID>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='consumerEntityId']) != 0">
                <ac:consumerEntityID>
                  <xsl:value-of select="./*[local-name()='consumerEntityId']"/>
                </ac:consumerEntityID>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='cleansedAddress']) != 0">
                <ac:cleansedAddress>
                  <xsl:value-of select="./*[local-name()='cleansedAddress']"/>
                </ac:cleansedAddress>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='alertStatusBeginDate']) != 0">
                <ac:alertStatusBeginDate>
                  <xsl:value-of select="./*[local-name()='alertStatusBeginDate']"/>
                </ac:alertStatusBeginDate>
              </xsl:if>
              <xsl:if test="string-length(*[local-name()='reaggregateIndFlag']) != 0">
                <ac:reaggregateInd>
                  <xsl:value-of select="./*[local-name()='reaggregateIndFlag']"/>
                </ac:reaggregateInd>
              </xsl:if>


              <xsl:for-each select="./*[local-name()='actionReasons']">
                <ac:actionReasons>
                  <!-- <xsl:for-each select="./*[local-name()='reason']"> -->
                  <xsl:apply-templates select="./*[local-name()='reason']"/>
                  <!-- </xsl:for-each> -->

                  <xsl:if test="string-length(*[local-name()='reasonBeginDate']) != 0">
                    <ac:reasonBeginDate>
                      <xsl:value-of select="./*[local-name()='reasonBeginDate']"/>
                    </ac:reasonBeginDate>
                  </xsl:if>


                  <!--  6/10/2015 - Specified element correct element name for rules to enable transformation -->
                  <xsl:for-each select="./*[local-name()='rulesInfo']">
                    <ac:rules>
                      <xsl:if test="string-length(*[local-name()='ruleConfigID']) != 0">
                        <ac:ruleConfigID>
                          <xsl:value-of select="./*[local-name()='ruleConfigID']"/>
                        </ac:ruleConfigID>
                      </xsl:if>
                      <xsl:if test="string-length(*[local-name()='ruleErrorCode']) != 0">
                        <ac:ruleErrorCode>
                          <xsl:value-of select="./*[local-name()='ruleErrorCode']"/>
                        </ac:ruleErrorCode>
                      </xsl:if>
                      <xsl:if test="string-length(*[local-name()='ruleSubErrorCode']) != 0">
                        <ac:ruleSubErrorCode>
                          <xsl:value-of select="./*[local-name()='ruleSubErrorCode']"/>
                        </ac:ruleSubErrorCode>
                      </xsl:if>
                      <xsl:if test="string-length(*[local-name()='rulePrtyNumber']) != 0">
                        <ac:rulePrtyNumber>
                          <xsl:value-of select="./*[local-name()='rulePrtyNumber']"/>
                        </ac:rulePrtyNumber>
                      </xsl:if>
                    </ac:rules>
                  </xsl:for-each>
                </ac:actionReasons>
              </xsl:for-each>
            </ac:alerts>
          </xsl:for-each>


        </ac:commitTransactionResponse>
      </soapenv:Body>
    </soapenv:Envelope>

  </xsl:template>

  <xsl:template match="reason">

    <ac:reason xmlns:ac="http://www.moneygram.com/AgentConnect1603">
      <xsl:if test="string-length(*[local-name()='reasonCode']) != 0">
        <ac:reasonCode>
          <xsl:value-of select="./*[local-name()='reasonCode']"/>
        </ac:reasonCode>
      </xsl:if>
      <xsl:if test="string-length(*[local-name()='reasonBsnsDesc']) != 0">
        <ac:reasonBsnsDesc>
          <xsl:value-of select="./*[local-name()='reasonBsnsDesc']"/>
        </ac:reasonBsnsDesc>
      </xsl:if>
      <xsl:if test="string-length(*[local-name()='type']) != 0">
        <ac:type>
          <xsl:value-of select="./*[local-name()='type']"/>
        </ac:type>
      </xsl:if>
      <xsl:if test="string-length(*[local-name()='subType']) != 0">
        <ac:subType>
          <xsl:value-of select="./*[local-name()='subType']"/>
        </ac:subType>
      </xsl:if>
      <xsl:if test="string-length(*[local-name()='autoManualIndicator']) != 0">
        <ac:autoManualIndicator>
          <xsl:value-of select="./*[local-name()='autoManualIndicator']"/>
        </ac:autoManualIndicator>
      </xsl:if>
      <xsl:if test="string-length(*[local-name()='reasonSequence']) != 0">
        <ac:reasonSequence>
          <xsl:value-of select="./*[local-name()='reasonSequence']"/>
        </ac:reasonSequence>
      </xsl:if>
      <xsl:if test="string-length(*[local-name()='amendableFlag']) != 0">
        <ac:amendable>
          <xsl:value-of select="./*[local-name()='amendableFlag']"/>
        </ac:amendable>
      </xsl:if>
    </ac:reason>

  </xsl:template>

</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue="ExpectedResponseConversionXSL"/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="commitTransaction[RCV] Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='orchestrateReceiveValidationResponse']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="receiveValidation"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ReceiveValidation Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 
	Last edited by: Karan Garg
	Purpose: XSLT check for xsi and xsd
	Last edited date: Nov 15, 2015
 --><xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:variable name="orchestrateReceiveValidationResponse" select="//*[local-name()='orchestrateReceiveValidationResponse']"/>
   <xsl:param name="currentNameSpace"/>
  <xsl:template match="/">

    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <soapenv:Body>
        <ac:receiveValidationResponse xmlns:ac="${currentNameSpace}">
          <ac:doCheckIn>
            <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='doCheckInFlag']"/>
          </ac:doCheckIn>
          <ac:timeStamp>
            <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='timeStamp']"/>
          </ac:timeStamp>
          <ac:flags>
            <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='flags']"/>
          </ac:flags>
          <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='mgiTransactionSessionID'])!=0">
            <ac:mgiTransactionSessionID>
              <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='mgiTransactionSessionID']"/>
            </ac:mgiTransactionSessionID>
          </xsl:if>
          <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='token'])!=0">
            <ac:token>
              <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='token']"/>
            </ac:token>
          </xsl:if>
          <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='readyForCommitFlag'])!=0">
            <ac:readyForCommit>
              <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='readyForCommitFlag']"/>
            </ac:readyForCommit>
          </xsl:if>
          <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='disclosureText'])!=0">
            <ac:disclosureText>
              <ac:longLanguageCode>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='disclosureText']/*[local-name()='longLanguageCode']"/>
              </ac:longLanguageCode>
              <ac:textTranslation>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='disclosureText']/*[local-name()='textTranslation']"/>
              </ac:textTranslation>
            </ac:disclosureText>
          </xsl:if>
        </ac:receiveValidationResponse>
      </soapenv:Body>
    </soapenv:Envelope>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="receiveValidation Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='orchestrateTransactionLookupResponse']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="referenceNumber"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="--ReferenceNumber Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 
	Last edited by: Karan Garg
	Purpose: XSLT check for xsi and xsd
	Last edited date: Nov 15, 2015
 --><xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="no" method="xml"/>
  <xsl:param name="currentNameSpace"/>
  <xsl:variable name="orchestrateTransactionLookupResponse" select="//*[local-name()='orchestrateTransactionLookupResponse']"/>
  <xsl:variable name="redirectInfo" select="$orchestrateTransactionLookupResponse/*[local-name()='redirectInfo']"/>
  <xsl:template match="/">
    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <soapenv:Body>
        <ac:referenceNumberResponse xmlns:ac="${currentNameSpace}">
          <ac:doCheckIn>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='doCheckInFlagFlag']"/>
          </ac:doCheckIn>
          <ac:timeStamp>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='timeStamp']"/>
          </ac:timeStamp>
          <ac:flags>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='flags']"/>
          </ac:flags>

          <ac:mgiTransactionSessionID>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='mgiReceiveTransactionSessionID']"/>
          </ac:mgiTransactionSessionID>

          <ac:senderFirstName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderFirstName'],1,40)"/>
          </ac:senderFirstName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderMiddleName'])!=0">
            <ac:senderMiddleName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderMiddleName'],1,40)"/>
            </ac:senderMiddleName>
          </xsl:if>
          <ac:senderLastName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderLastName'],1,40)"/>
          </ac:senderLastName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderLastName2'])!=0">
            <ac:senderLastName2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderLastName2'],1,40)"/>
            </ac:senderLastName2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderPrimaryPhone'])!=0">
            <ac:senderHomePhone>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderPrimaryPhone'],1,14)"/>
            </ac:senderHomePhone>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderAddress'])!=0">
            <ac:senderAddress>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderAddress'],1,80)"/>
            </ac:senderAddress>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderAddress2'])!=0">
            <ac:senderAddress2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderAddress2'],1,80)"/>
            </ac:senderAddress2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderAddress3'])!=0">
            <ac:senderAddress3>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderAddress3'],1,80)"/>
            </ac:senderAddress3>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderAddress4'])!=0">
            <ac:senderAddress4>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderAddress4'],1,80)"/>
            </ac:senderAddress4>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderCity'])!=0">
            <ac:senderCity>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderCity'],1,40)"/>
            </ac:senderCity>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderState'])!=0">
            <ac:senderState>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='senderState']"/>
            </ac:senderState>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderPostalCode'])!=0">
            <ac:senderZipCode>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderPostalCode'],1,10)"/>
            </ac:senderZipCode>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderCountry'])!=0">
            <ac:senderCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='senderCountry']"/>
            </ac:senderCountry>
          </xsl:if>
          <ac:receiverFirstName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverFirstName'],1,40)"/>
          </ac:receiverFirstName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverMiddleName'])!=0">
            <ac:receiverMiddleName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverMiddleName'],1,40)"/>
            </ac:receiverMiddleName>
          </xsl:if>
          <ac:receiverLastName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverLastName'],1,40)"/>
          </ac:receiverLastName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverLastName2'])!=0">
            <ac:receiverLastName2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverLastName2'],1,40)"/>
            </ac:receiverLastName2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress'])!=0">
            <ac:receiverAddress>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress'],1,80)"/>
            </ac:receiverAddress>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress2'])!=0">
            <ac:receiverAddress2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress2'],1,80)"/>
            </ac:receiverAddress2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress3'])!=0">
            <ac:receiverAddress3>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress3'],1,80)"/>
            </ac:receiverAddress3>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress4'])!=0">
            <ac:receiverAddress4>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress4'],1,80)"/>
            </ac:receiverAddress4>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='direction1'])!=0">
            <ac:direction1>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='direction1'],1,40)"/>
            </ac:direction1>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='direction2'])!=0">
            <ac:direction2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='direction2'],1,40)"/>
            </ac:direction2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='direction3'])!=0">
            <ac:direction3>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='direction3'],1,40)"/>
            </ac:direction3>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverCity'])!=0">
            <ac:receiverCity>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverCity'],1,40)"/>
            </ac:receiverCity>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverState'])!=0">
            <ac:receiverState>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverState']"/>
            </ac:receiverState>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPostalCode'])!=0">
            <ac:receiverZipCode>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPostalCode'],1,10)"/>
            </ac:receiverZipCode>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverCountry'])!=0">
            <ac:receiverCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverCountry']"/>
            </ac:receiverCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPrimaryPhone'])!=0">
            <ac:receiverPhone>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPrimaryPhone'],1,14)"/>
            </ac:receiverPhone>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='testQuestion'])!=0">
            <ac:testQuestion>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='testQuestion']"/>
            </ac:testQuestion>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='testAnswer'])!=0">
            <ac:testAnswer>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='testAnswer']"/>
            </ac:testAnswer>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='messageField1'])!=0">
            <ac:messageField1>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='messageField1']"/>
            </ac:messageField1>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='messageField2'])!=0">
            <ac:messageField2>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='messageField2']"/>
            </ac:messageField2>
          </xsl:if>
          <ac:agentCheckNumber>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='agentCheckNumber'],1,12)"/>
          </ac:agentCheckNumber>
          <ac:agentCheckAmount>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='agentCheckAmount']"/>
          </ac:agentCheckAmount>
          <ac:agentCheckAuthorizationNumber>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='agentCheckAuthorizationNumber']"/>
          </ac:agentCheckAuthorizationNumber>
          <ac:customerCheckNumber>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='customerCheckNumber'],1,12)"/>
          </ac:customerCheckNumber>
          <ac:customerCheckAmount>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='customerCheckAmount']"/>
          </ac:customerCheckAmount>
          <ac:okForAgent>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='okForAgentFlag']"/>
          </ac:okForAgent>
          <ac:deliveryOption>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='deliveryOption']"/>
          </ac:deliveryOption>
          <ac:transactionStatus>
            <xsl:call-template name="transactionStatusMapping">
              <xsl:with-param name="esbTransactionStatus">
                <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='transactionStatus']"/>
              </xsl:with-param>
            </xsl:call-template>
          </ac:transactionStatus>
          <ac:dateTimeSent>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='dateTimeSent']"/>
          </ac:dateTimeSent>
          <ac:receiveCurrency>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAmounts']/*[local-name()='receiveCurrency']"/>
          </ac:receiveCurrency>
          <ac:receiveAmount>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAmounts']/*[local-name()='receiveAmount']"/>
          </ac:receiveAmount>
          <ac:referenceNumber>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='referenceNumber']"/>
          </ac:referenceNumber>
          <ac:originatingCountry>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='originatingCountry']"/>
          </ac:originatingCountry>
          <ac:validIndicator>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='validFlag']"/>
          </ac:validIndicator>
          <ac:indicativeReceiveAmount>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='indicativeReceiveAmount']"/>
          </ac:indicativeReceiveAmount>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='indicativeReceiveCurrency'])!=0">
            <ac:indicativeReceiveCurrency>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='indicativeReceiveCurrency']"/>
            </ac:indicativeReceiveCurrency>
          </xsl:if>
          <ac:indicativeExchangeRate>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='indicativeExchangeRate']"/>
          </ac:indicativeExchangeRate>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='customerReceiveNumber'])!=0">
            <ac:customerReceiveNumber>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='customerReceiveNumber']"/>
            </ac:customerReceiveNumber>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiveAgentID'])!=0">
            <ac:receiveAgentID>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAgentID']"/>
            </ac:receiveAgentID>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiveAgentName'])!=0">
            <ac:receiveAgentName>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAgentName']"/>
            </ac:receiveAgentName>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiveAgentAbbreviation'])!=0">
            <ac:receiveAgentAbbreviation>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAgentAbbreviation']"/>
            </ac:receiveAgentAbbreviation>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='expectedDateOfDelivery'])!=0">
            <ac:expectedDateOfDelivery>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='expectedDateOfDelivery']"/>
            </ac:expectedDateOfDelivery>
          </xsl:if>
          <ac:originalSendAmount>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='originalSendAmount']"/>
          </ac:originalSendAmount>
          <ac:originalSendCurrency>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='originalSendCurrency']"/>
          </ac:originalSendCurrency>
          <ac:originalSendFee>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='originalSendFee']"/>
          </ac:originalSendFee>
          <ac:originalExchangeRate>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='originalExchangeRate']"/>
          </ac:originalExchangeRate>
          <ac:redirectIndicator>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='redirectFlag']"/>
          </ac:redirectIndicator>
          <xsl:if test="string($orchestrateTransactionLookupResponse/*[local-name()='redirectFlag'])='true'">
            <ac:redirectInfo>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalSendAmount'])!=0">
                <ac:originalSendAmount>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalSendAmount']"/>
                </ac:originalSendAmount>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalSendCurrency'])!=0">
                <ac:originalSendCurrency>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalSendCurrency']"/>
                </ac:originalSendCurrency>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalSendFee'])!=0">
                <ac:originalSendFee>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalSendFee']"/>
                </ac:originalSendFee>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalExchangeRate'])!=0">
                <ac:originalExchangeRate>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalExchangeRate']"/>
                </ac:originalExchangeRate>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalReceiveAmount'])!=0">
                <ac:originalReceiveAmount>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalReceiveAmount']"/>
                </ac:originalReceiveAmount>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalReceiveCurrency'])!=0">
                <ac:originalReceiveCurrency>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalReceiveCurrency']"/>
                </ac:originalReceiveCurrency>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='originalReceiveCountry'])!=0">
                <ac:originalReceiveCountry>
                  <xsl:value-of select="$redirectInfo/*[local-name()='originalReceiveCountry']"/>
                </ac:originalReceiveCountry>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='newSendFee'])!=0">
                <ac:newSendFee>
                  <xsl:value-of select="$redirectInfo/*[local-name()='newSendFee']"/>
                </ac:newSendFee>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='newExchangeRate'])!=0">
                <ac:newExchangeRate>
                  <xsl:value-of select="$redirectInfo/*[local-name()='newExchangeRate']"/>
                </ac:newExchangeRate>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='newReceiveAmount'])!=0">

                <ac:newReceiveAmount>
                  <xsl:value-of select="$redirectInfo/*[local-name()='newReceiveAmount']"/>
                </ac:newReceiveAmount>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='newReceiveCurrency'])!=0">

                <ac:newReceiveCurrency>
                  <xsl:value-of select="$redirectInfo/*[local-name()='newReceiveCurrency']"/>
                </ac:newReceiveCurrency>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='feeDifference'])!=0">
                <ac:feeDifference>
                  <xsl:value-of select="$redirectInfo/*[local-name()='feeDifference']"/>
                </ac:feeDifference>
              </xsl:if>
              <xsl:if test="string-length($redirectInfo/*[local-name()='redirectType'])!=0">
                <ac:redirectType>
                  <xsl:value-of select="$redirectInfo/*[local-name()='redirectType']"/>
                </ac:redirectType>
              </xsl:if>
            </ac:redirectInfo>
          </xsl:if>
          <ac:okForPickup>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='okForPickupFlag']"/>
          </ac:okForPickup>
          <ac:notOkForPickupReasonCode>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='notOkForPickupReasonCode']"/>
          </ac:notOkForPickupReasonCode>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='notOkForPickupReasonDescription'])!=0">
            <ac:notOkForPickupReasonDescription>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='notOkForPickupReasonDescription']"/>
            </ac:notOkForPickupReasonDescription>
          </xsl:if>
          <ac:minutesUntilOkForPickup>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='minutesUntilOkForPickup']"/>
          </ac:minutesUntilOkForPickup>
        </ac:referenceNumberResponse>
      </soapenv:Body>
    </soapenv:Envelope>
  </xsl:template>
  <xsl:template name="transactionStatusMapping">
    <xsl:param name="esbTransactionStatus"/>
    <xsl:choose>
      <xsl:when test="$esbTransactionStatus = 'SEN'">AVAIL</xsl:when>
      <xsl:when test="$esbTransactionStatus = 'CAN'">CANCL</xsl:when>
      <xsl:when test="$esbTransactionStatus = 'REC'">RECVD</xsl:when>
      <xsl:when test="$esbTransactionStatus = 'REF'">REFND</xsl:when>
      <xsl:when test="$esbTransactionStatus = 'AFR'">REFND</xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='transactionStatus']"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="referenceNumber Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='orchestrateReceiveValidationResponse']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="getFieldsForProduct"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="GetFieldsForProduct Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 
	Last edited by: Karan Garg
	Purpose: XSLT check for xsi and xsd
	Last edited date: Nov 15, 2015
 --><xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="no" method="xml"/>
 <xsl:param name="currentNameSpace"/>
  <xsl:variable name="orchestrateReceiveValidationResponse" select="//*[local-name()='orchestrateReceiveValidationResponse']"/>


  <xsl:template match="/">
    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <soapenv:Body>
        <ac:getFieldsForProductResponse xmlns:ac="${currentNameSpace}">
          <ac:doCheckIn>
            <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='doCheckInFlag']"/>
          </ac:doCheckIn>
          <ac:timeStamp>
            <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='timeStamp']"/>
          </ac:timeStamp>
          <ac:flags>
            <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='flags']"/>
          </ac:flags>
          <ac:fqdoInfo>
            <ac:receiveCountry>
              <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveCountry']"/>
            </ac:receiveCountry>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='deliveryOption'])!=0">
              <ac:deliveryOption>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='deliveryOption']"/>
              </ac:deliveryOption>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveAgentID'])!=0">
              <ac:receiveAgentID>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveAgentID']"/>
              </ac:receiveAgentID>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveCurrency'])!=0">
              <ac:receiveCurrency>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveCurrency']"/>
              </ac:receiveCurrency>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveAgentName'])!=0">
              <ac:receiveAgentName>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveAgentName']"/>
              </ac:receiveAgentName>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveAgentAbbreviation'])!=0">
              <ac:receiveAgentAbbreviation>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='receiveAgentAbbreviation']"/>
              </ac:receiveAgentAbbreviation>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='deliveryOptionDisplayName'])!=0">
              <ac:deliveryOptionDisplayName>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='deliveryOptionDisplayName']"/>
              </ac:deliveryOptionDisplayName>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='registrationAuthorizationText'])!=0">
              <ac:registrationAuthorizationText>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='registrationAuthorizationText']"/>
              </ac:registrationAuthorizationText>
            </xsl:if>
            <!--Optional:-->
            <xsl:if test="string-length($orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='speedOfDeliveryText'])!=0">
              <ac:speedOfDeliveryText>
                <xsl:value-of select="$orchestrateReceiveValidationResponse/*[local-name()='fqdoInfo']/*[local-name()='speedOfDeliveryText']"/>
              </ac:speedOfDeliveryText>
            </xsl:if>
          </ac:fqdoInfo>
          <!--Zero or more repetitions:-->
          <xsl:for-each select="$orchestrateReceiveValidationResponse/*[local-name()='fieldsToCollect']">
            <ac:productFieldInfo>
              <ac:xmlTag>
                <xsl:value-of select="current()/*[local-name()='xmlTag']"/>
              </ac:xmlTag>
              <ac:visibility>
                <xsl:value-of select="current()/*[local-name()='visibility']"/>
              </ac:visibility>
              <!--Optional:-->
              <ac:fieldLabel>
                <xsl:value-of select="current()/*[local-name()='fieldLabel']"/>
              </ac:fieldLabel>
              <ac:displayOrder>
                <xsl:value-of select="current()/*[local-name()='displayOrder']"/>
              </ac:displayOrder>
              <!--Optional:-->
              <xsl:if test="string-length(current()/*[local-name()='fieldCategory'])!=0">
                <ac:fieldCategory>
                  <xsl:value-of select="current()/*[local-name()='fieldCategory']"/>
                </ac:fieldCategory>
              </xsl:if>
              <!--Optional:-->
              <ac:dynamic>
                <xsl:value-of select="current()/*[local-name()='dynamicFlag']"/>
              </ac:dynamic>
              <ac:fieldMax>
                <xsl:value-of select="current()/*[local-name()='fieldMax']"/>
              </ac:fieldMax>
              <ac:fieldMin>
                <xsl:value-of select="current()/*[local-name()='fieldMin']"/>
              </ac:fieldMin>
              <ac:dataType>
                <xsl:value-of select="current()/*[local-name()='dataType']"/>
              </ac:dataType>
              <ac:enumerated>
                <xsl:value-of select="current()/*[local-name()='EnumeratedFlag']"/>
              </ac:enumerated>
              <!--Optional:-->
              <ac:defaultValue>
                <xsl:value-of select="current()/*[local-name()='defaultValue']"/>
              </ac:defaultValue>
              <ac:validationRegEx>
                <xsl:value-of select="current()/*[local-name()='validationRegEx']"/>
              </ac:validationRegEx>
              <ac:arrayName>
                <xsl:value-of select="current()/*[local-name()='arrayName']"/>
              </ac:arrayName>
              <!--Optional:-->
              <ac:arrayLength>
                <xsl:value-of select="current()/*[local-name()='arrayLength']"/>
              </ac:arrayLength>

              <!--Optional:-->
              <ac:exampleFormat>
                <xsl:value-of select="current()/*[local-name()='exampleFormat']"/>
              </ac:exampleFormat>
              <!--Optional:-->
              <xsl:if test="string-length(current()/*[local-name()='extendedHelpText'])!=0">
                <ac:extendedHelpText>
                  <xsl:value-of select="current()/*[local-name()='extendedHelpText']"/>
                </ac:extendedHelpText>
              </xsl:if>
              <!--Optional:-->
              <ac:enumeratedValues>
                <xsl:for-each select="current()/*[local-name()='enumeratedValueInfo']">
                  <!--Zero or more repetitions:-->
                  <ac:enumeratedValueInfo>
                    <ac:value>
                      <xsl:value-of select="current()/*[local-name()='value']"/>
                    </ac:value>
                    <ac:label>
                      <xsl:value-of select="current()/*[local-name()='label']"/>
                    </ac:label>
                  </ac:enumeratedValueInfo>
                </xsl:for-each>
              </ac:enumeratedValues>

              <!--Zero or more repetitions:-->
              <ac:supplementalFieldInfo>
                <!--<ac:xmlTag>

                </ac:xmlTag>
                <ac:visibility>

                </ac:visibility>
                -->
                <!--Optional:-->
                <!--

                <ac:fieldLabel>

                </ac:fieldLabel>


                <ac:displayOrder>

                </ac:displayOrder>
                -->
                <!--Optional:-->
                <!--
                <ac:fieldCategory>
                </ac:fieldCategory>
                -->
                <!--Optional:-->
                <!--
                <ac:dynamic>
                </ac:dynamic>
                <ac:fieldMax>
                </ac:fieldMax>
                <ac:fieldMin>
                </ac:fieldMin>
                <ac:dataType>
                </ac:dataType>
                -->
                <!--Optional:-->
                <!--
                <ac:enumerated>
                </ac:enumerated>
                -->
                <!--Optional:-->
                <!--
                <ac:defaultValue>
                </ac:defaultValue>
                -->
                <!--Optional:-->
                <!--
                <ac:validationRegEx>
                </ac:validationRegEx>
                -->
                <!--Optional:-->
                <!--
                <ac:arrayName>
                </ac:arrayName>
                -->
                <!--Optional:-->
                <!--
                <ac:arrayLength>
                </ac:arrayLength>
                -->
                <!--Optional:-->
                <!--
                <ac:exampleFormat>
                </ac:exampleFormat>
                <ac:extendedHelpText>
                </ac:extendedHelpText>
                <ac:enumeratedValues>
                  -->
                <!--Zero or more repetitions:-->
                <!--
                  <ac:enumeratedValueInfo>
                    <ac:value>
                    </ac:value>
                    <ac:label>
                    </ac:label>
                  </ac:enumeratedValueInfo>
                </ac:enumeratedValues>
                -->
                <!--Zero or more repetitions:-->
                <!--
                <ac:supplementalFieldInfo>
                </ac:supplementalFieldInfo>
                <ac:extendedHelpText>
                </ac:extendedHelpText>
                <ac:apiName>?</ac:apiName>
                -->
                <!--Optional:-->
                <!--
                <ac:extendedHelpText>
                </ac:extendedHelpText>
                <ac:currentHierarchyLevel>
                </ac:currentHierarchyLevel>
                -->
                <!--Optional:-->
                <!--
                <ac:childApiXmlTag>
                </ac:childApiXmlTag>-->
              </ac:supplementalFieldInfo>
            </ac:productFieldInfo>
          </xsl:for-each>
          <!--Zero or more repetitions:-->
          <!--
          <ac:dynamicFieldInfo>
            <ac:xmlTag>
            </ac:xmlTag>
            -->
          <!--Optional:-->
          <!--
            <ac:visibility>
            </ac:visibility>

            <ac:fieldMax>
            </ac:fieldMax>
            -->
          <!--Optional:-->
          <!--
            <ac:fieldMin>
            </ac:fieldMin>

            <ac:scale>
            </ac:scale>
            <ac:dataType>
            </ac:dataType>
            -->
          <!--Optional:-->
          <!--
            <ac:fieldLabel>
            </ac:fieldLabel>
            -->
          <!--Optional:-->
          <!--
            <ac:displayOrder>
            </ac:displayOrder>
            <ac:enumerated>
            </ac:enumerated>
            -->
          <!--Optional:-->
          <!--
            <ac:defaultValue>
            </ac:defaultValue>
            -->
          <!--Optional:-->
          <!--
            <ac:validationRegEx>
            </ac:validationRegEx>
            -->
          <!--Optional:-->
          <!--
            <ac:exampleFormat>
            </ac:exampleFormat>
            -->
          <!--Optional:-->
          <!--
            <ac:enumeratedValues>
              -->
          <!--Zero or more repetitions:-->
          <!--
              <ac:enumeratedValueInfo>
                <ac:value>
                </ac:value>
                <ac:label>
                </ac:label>
              </ac:enumeratedValueInfo>
            </ac:enumeratedValues>
          </ac:dynamicFieldInfo>-->
        </ac:getFieldsForProductResponse>

      </soapenv:Body>
    </soapenv:Envelope>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="getFieldsForProduct Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='orchestrateTransactionLookupResponse']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="formFreeReceiveLookup"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="--FormFreeReceiveLookup Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!--
Updated: 03 May 2016
By: Nishikant
--><xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="no" method="xml"/>
  <xsl:param name="currentNameSpace"/>
  <xsl:variable name="orchestrateTransactionLookupResponse" select="//*[local-name()='orchestrateTransactionLookupResponse']"/>
  <xsl:variable name="redirectInfo" select="$orchestrateTransactionLookupResponse/*[local-name()='redirectInfo']"/>
  <xsl:template match="/">
    <soapenv:Envelope>
      <soapenv:Body>
        <ac:formFreeReceiveLookupResponse xmlns:ac="${currentNameSpace}">
          <ac:doCheckIn>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='doCheckInFlagFlag']"/>
          </ac:doCheckIn>
          <ac:timeStamp>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='timeStamp']"/>
          </ac:timeStamp>
          <ac:flags>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='flags']"/>
          </ac:flags>
          <ac:referenceNumber>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='referenceNumber']"/>
          </ac:referenceNumber>
          <ac:receiveAmount>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAmounts']/*[local-name()='receiveAmount']"/>
          </ac:receiveAmount>
          <ac:receiveCurrency>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveAmounts']/*[local-name()='receiveCurrency']"/>
          </ac:receiveCurrency>
          <ac:senderFirstName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderFirstName'],1,40)"/>
          </ac:senderFirstName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderMiddleName'])!=0">
            <ac:senderMiddleName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderMiddleName'],1,40)"/>
            </ac:senderMiddleName>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderLastName'])!=0">
            <ac:senderLastName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderLastName'],1,40)"/>
            </ac:senderLastName>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderLastName2'])!=0">
            <ac:senderLastName2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderLastName2'],1,40)"/>
            </ac:senderLastName2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='senderPrimaryPhone'])!=0">
            <ac:senderHomePhone>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='senderPrimaryPhone'],1,14)"/>
            </ac:senderHomePhone>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='originatingCountry'])!=0">
            <ac:originatingCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='originatingCountry']"/>
            </ac:originatingCountry>
          </xsl:if>
          <ac:dateTimeSent>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='dateTimeSent']"/>
          </ac:dateTimeSent>
          <ac:receiverFirstName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverFirstName'],1,40)"/>
          </ac:receiverFirstName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverMiddleName'])!=0">
            <ac:receiverMiddleName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverMiddleName'],1,40)"/>
            </ac:receiverMiddleName>
          </xsl:if>
          <ac:receiverLastName>
            <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverLastName'],1,40)"/>
          </ac:receiverLastName>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverLastName2'])!=0">
            <ac:receiverLastName2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverLastName2'],1,40)"/>
            </ac:receiverLastName2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress'])!=0">
            <ac:receiverAddress>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress'],1,80)"/>
            </ac:receiverAddress>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress2'])!=0">
            <ac:receiverAddress2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress2'],1,80)"/>
            </ac:receiverAddress2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress3'])!=0">
            <ac:receiverAddress3>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress3'],1,80)"/>
            </ac:receiverAddress3>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress4'])!=0">
            <ac:receiverAddress4>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverAddress4'],1,80)"/>
            </ac:receiverAddress4>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverCity'])!=0">
            <ac:receiverCity>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverCity'],1,40)"/>
            </ac:receiverCity>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverState'])!=0">
            <ac:receiverState>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverState']"/>
            </ac:receiverState>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPostalCode'])!=0">
            <ac:receiverZipCode>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPostalCode'],1,10)"/>
            </ac:receiverZipCode>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverCountry'])!=0">
            <ac:receiverCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverCountry']"/>
            </ac:receiverCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='messageField1'])!=0">
            <ac:messageField1>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='messageField1']"/>
            </ac:messageField1>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='messageField2'])!=0">
            <ac:messageField2>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='messageField2']"/>
            </ac:messageField2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Type'])!=0">
            <ac:receiverPhotoIdType>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Type']"/>
            </ac:receiverPhotoIdType>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Number'])!=0">
            <ac:receiverPhotoIdNumber>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Number']"/>
            </ac:receiverPhotoIdNumber>
		   </xsl:if>
			<xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1State'])!=0">
            <ac:receiverPhotoIdState>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1State'],1,4)"/>
            </ac:receiverPhotoIdState>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueCountry'])!=0">
            <ac:receiverPhotoIdCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueCountry']"/>
            </ac:receiverPhotoIdCountry>
          </xsl:if>
          
		  
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2Type'])!=0">
            <ac:receiverLegalIdType>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2Type']"/>
            </ac:receiverLegalIdType>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2Number'])!=0">
            <ac:receiverLegalIdNumber>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2Number']"/>
            </ac:receiverLegalIdNumber>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverDOB'])!=0">
            <ac:receiverDOB>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverDOB']"/>
            </ac:receiverDOB>
          </xsl:if>

          <!-- If receiverOccupationOther is not equal to null, map it to receiverOccupation -->
          <xsl:choose>
            <xsl:when test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverOccupationOther'])!=0">
              <ac:receiverOccupation>
                <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverOccupationOther']"/>
              </ac:receiverOccupation>
            </xsl:when>
            <xsl:otherwise>
              <ac:receiverOccupation>
                <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverOccupation']"/>
              </ac:receiverOccupation>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverFirstName'])!=0">
            <ac:thirdPartyFirstName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverFirstName'],1,40)"/>
            </ac:thirdPartyFirstName>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverMiddleName'])!=0">
            <ac:thirdPartyMiddleName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverMiddleName'],1,40)"/>
            </ac:thirdPartyMiddleName>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverLastName'])!=0">
            <ac:thirdPartyLastName>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverLastName'],1,40)"/>
            </ac:thirdPartyLastName>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverLastName2'])!=0">
            <ac:thirdPartyLastName2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverLastName2'],1,40)"/>
            </ac:thirdPartyLastName2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress'])!=0">
            <ac:thirdPartyAddress>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress'],1,80)"/>
            </ac:thirdPartyAddress>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress2'])!=0">
            <ac:thirdPartyAddress2>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress2'],1,80)"/>
            </ac:thirdPartyAddress2>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress3'])!=0">
            <ac:thirdPartyAddress3>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress3'],1,80)"/>
            </ac:thirdPartyAddress3>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress4'])!=0">
            <ac:thirdPartyAddress4>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverAddress4'],1,80)"/>
            </ac:thirdPartyAddress4>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverCity'])!=0">
            <ac:thirdPartyCity>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverCity'],1,40)"/>
            </ac:thirdPartyCity>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverState'])!=0">
            <ac:thirdPartyState>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverState']"/>
            </ac:thirdPartyState>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPostalCode'])!=0">
            <ac:thirdPartyZipCode>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPostalCode'],1,10)"/>
            </ac:thirdPartyZipCode>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverCountry'])!=0">
            <ac:thirdPartyCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverCountry']"/>
            </ac:thirdPartyCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2Type'])!=0">
            <ac:thirdPartyLegalIdType>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2Type']"/>
            </ac:thirdPartyLegalIdType>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2Number'])!=0">
            <ac:thirdPartyLegalIdNumber>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2Number']"/>
            </ac:thirdPartyLegalIdNumber>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverDOB'])!=0">
            <ac:thirdPartyDOB>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverDOB']"/>
            </ac:thirdPartyDOB>
          </xsl:if>
          <!-- If thirdPartyReceiverOccupationOther is not null, map to thirdPartyOccupation -->
          <xsl:choose>
            <xsl:when test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverOccupationOther'])!=0">
              <ac:thirdPartyOccupation>
                <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverOccupationOther']"/>
              </ac:thirdPartyOccupation>
            </xsl:when>
            <xsl:otherwise>
              <ac:thirdPartyOccupation>
                <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverOccupation']"/>
              </ac:thirdPartyOccupation>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverOrganization'])!=0">
            <ac:thirdPartyOrg>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverOrganization']"/>
            </ac:thirdPartyOrg>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverBirthCity'])!=0">
            <ac:receiverBirthCity>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverBirthCity'],1,40)"/>
            </ac:receiverBirthCity>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverBirthCountry'])!=0">
            <ac:receiverBirthCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverBirthCountry']"/>
            </ac:receiverBirthCountry>
          </xsl:if>
          		  
		  <xsl:choose>
	  	<xsl:when test="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Type']='PAS'">
		  <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueDay'])!=0">
            <ac:receiverPassportIssueDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueDay']"/>
            </ac:receiverPassportIssueDate>
            </xsl:if>
		  
		  <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueCity'])!=0">
            <ac:receiverPassportIssueCity>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueCity'],1,40)"/>
            </ac:receiverPassportIssueCity>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueCountry'])!=0">
            <ac:receiverPassportIssueCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueCountry']"/>
            </ac:receiverPassportIssueCountry>
			</xsl:if>
	             
	  </xsl:when>
	  </xsl:choose>
                 
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiveConsumerId'])!=0">
          <ac:consumerId>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiveConsumerId']"/>
          </ac:consumerId>
          </xsl:if>
	  
	  
	  
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='freqCustCardNumber'])!=0">
            <ac:freqCustCardNumber>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='freqCustCardNumber']"/>
            </ac:freqCustCardNumber>
          </xsl:if>
          
		  
		  
		  <xsl:choose>
		  <xsl:when test="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Type']='PAS'">
		  <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPrimaryPhone'])!=0">
            <ac:receiverPhone>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPrimaryPhone'],1,14)"/>
            </ac:receiverPhone>
          </xsl:if>
		  
		  </xsl:when>
		  <xsl:otherwise>
		  <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPrimaryPhone'])!=0">
            <ac:receiverPhone>
              <xsl:value-of select="substring($orchestrateTransactionLookupResponse/*[local-name()='receiverPrimaryPhone'],1,14)"/>
            </ac:receiverPhone>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationDay'])!=0">
            <ac:receiverPhotoIdExpDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationDay']"/>
            </ac:receiverPhotoIdExpDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueDay'])!=0">
            <ac:receiverPhotoIdIssueDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1IssueDay']"/>
            </ac:receiverPhotoIdIssueDate>
          </xsl:if>
		  </xsl:otherwise>
		  </xsl:choose>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPhotoIdStored'])!=0">
            <ac:receiverPhotoIdStored>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPhotoIdStored']"/>
            </ac:receiverPhotoIdStored>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2ExpirationDay'])!=0">
            <ac:receiverLegalIdExpDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2ExpirationYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2ExpirationMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2ExpirationDay']"/>
            </ac:receiverLegalIdExpDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2IssueDay'])!=0">
            <ac:receiverLegalIdIssueDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2IssueYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2IssueMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2IssueDay']"/>
            </ac:receiverLegalIdIssueDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2IssueCountry'])!=0">
            <ac:receiverLegalIdIssueCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId2IssueCountry']"/>
            </ac:receiverLegalIdIssueCountry>
          </xsl:if>
		  
		  <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverLegalIdStored'])!=0">
            <ac:receiverLegalIdStored>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverLegalIdStored']"/>
            </ac:receiverLegalIdStored>
          </xsl:if>
         
           <xsl:choose>
	  <xsl:when test="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1Type']='PAS'">
		  
		  
		  <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationDay'])!=0">
            <ac:receiverPassportExpDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPersonalId1ExpirationDay']"/>
            </ac:receiverPassportExpDate>
			</xsl:if>			
		  </xsl:when>
		  
		  
		  </xsl:choose>
		            
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverPassportStored'])!=0">
            <ac:receiverPassportStored>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverPassportStored']"/>
            </ac:receiverPassportStored>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverNationality'])!=0">
            <ac:receiverNationalityCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverNationality']"/>
            </ac:receiverNationalityCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverDualCitizenshipAtBirthCountry'])!=0">
            <ac:receiverNationalityAtBirthCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverDualCitizenshipAtBirthCountry']"/>
            </ac:receiverNationalityAtBirthCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='additionalDocumentationNeededFlag'])!=0">
            <ac:additionalDocumentationNeeded>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='additionalDocumentationNeededFlag']"/>
            </ac:additionalDocumentationNeeded>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receivePurposeOfTransaction'])!=0">
            <ac:purposeOfTransaction>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receivePurposeOfTransaction']"/>
            </ac:purposeOfTransaction>
          </xsl:if>
		  
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='relationshipToSender'])!=0">
            <ac:relationToSender>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='relationshipToSender']"/>
            </ac:relationToSender>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverEmailAddress'])!=0">
            <ac:receiverEmailAddress>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverEmailAddress']"/>
            </ac:receiverEmailAddress>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='receiverSecondaryPhone'])!=0">
            <ac:receiverMobilePhone>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='receiverSecondaryPhone']"/>
            </ac:receiverMobilePhone>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='marketingOptInFlag'])!=0">
            <ac:marketingOptIn>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='marketingOptInFlag']"/>
            </ac:marketingOptIn>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1Type'])!=0">
            <ac:thirdPartyPhotoIdType>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1Type']"/>
            </ac:thirdPartyPhotoIdType>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1Number'])!=0">
            <ac:thirdPartyPhotoIdNumber>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1Number']"/>
            </ac:thirdPartyPhotoIdNumber>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1ExpirationDay'])!=0">
            <ac:thirdPartyPhotoIdExpDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1ExpirationYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1ExpirationMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1ExpirationDay']"/>
            </ac:thirdPartyPhotoIdExpDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='additionalDocumentationNeededFlag'])!=0">
            <ac:thirdPartyPhotoIdIssueDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1IssueYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1IssueMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1IssueDay']"/>
            </ac:thirdPartyPhotoIdIssueDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1IssueCountry'])!=0">
            <ac:thirdPartyPhotoIdIssueCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId1IssueCountry']"/>
            </ac:thirdPartyPhotoIdIssueCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyPhotoIdStored'])!=0">
            <ac:thirdPartyPhotoIdStored>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyPhotoIdStored']"/>
            </ac:thirdPartyPhotoIdStored>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2ExpirationDay'])!=0">
            <ac:thirdPartyLegalIdExpDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2ExpirationYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2ExpirationMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2ExpirationDay']"/>
            </ac:thirdPartyLegalIdExpDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2IssueDay'])!=0">
            <ac:thirdPartyLegalIdIssueDate>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2IssueYear']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2IssueMonth']"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2IssueDay']"/>
            </ac:thirdPartyLegalIdIssueDate>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2IssueCountry'])!=0">
            <ac:thirdPartyLegalIdIssueCountry>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyReceiverPersonalId2IssueCountry']"/>
            </ac:thirdPartyLegalIdIssueCountry>
          </xsl:if>
          <xsl:if test="string-length($orchestrateTransactionLookupResponse/*[local-name()='thirdPartyLegalIdStored'])!=0">
            <ac:thirdPartyLegalIdStored>
              <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='thirdPartyLegalIdStored']"/>
            </ac:thirdPartyLegalIdStored>
          </xsl:if>
          <ac:mgiTransactionSessionID>
            <xsl:value-of select="$orchestrateTransactionLookupResponse/*[local-name()='mgiReceiveTransactionSessionID']"/>
          </ac:mgiTransactionSessionID>
        </ac:formFreeReceiveLookupResponse>
      </soapenv:Body>
    </soapenv:Envelope>
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="FormFreeReceiveLookup Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='SendDetailReportResponse']"/>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="check wsdl operation"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:OperationName stringValue="moneyGramSendDetailReportWithTax"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="--moneyGramSendDetailReportWithTaxResponse"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- Created: 29 Dec 2015 By: Karthick --><xsl:stylesheet version="1.0" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output indent="no" method="xml"/>
   <xsl:variable name="SendDetailReportResponse" select="//*[local-name()='SendDetailReportResponse']"/>
   <xsl:param name="currentNameSpace"/>
   <xsl:template match="/">
      <soapenv:Envelope>
      <soapenv:Header/>
         <soapenv:Body>
            <ac:moneyGramSendDetailReportWithTaxResponse xmlns:ac="${currentNameSpace}">	
	        <ac:doCheckIn>
	                    <xsl:value-of select="$SendDetailReportResponse/*[local-name()='doCheckIn']"/>
	        </ac:doCheckIn>
	        <ac:timeStamp>
	                    <xsl:value-of select="$SendDetailReportResponse/*[local-name()='timeStamp']"/>
	       </ac:timeStamp>
	       <ac:flags>
	                    <xsl:value-of select="$SendDetailReportResponse/*[local-name()='flags']"/>
	       </ac:flags>
	       <xsl:for-each select="$SendDetailReportResponse/*[local-name()='reportingInfo']">
		<ac:reportInfo>
		        <ac:referenceNumber>
	                                        <xsl:value-of select="current()/*[local-name()='referenceNumber']"/>
		        </ac:referenceNumber>
		        <ac:faceAmount>
		                 <xsl:value-of select="current()/*[local-name()='faceAmount']"/>
		        </ac:faceAmount>
		        <ac:feeAmount>
		                <xsl:value-of select="current()/*[local-name()='feeAmount']"/>
		        </ac:feeAmount>
		        <ac:totalAmount>
		                <xsl:value-of select="current()/*[local-name()='totalAmount']"/>
		        </ac:totalAmount>
		        <ac:sendCurrency>
		                <xsl:value-of select="current()/*[local-name()='sendCurrancy']"/>
		        </ac:sendCurrency>
		        <ac:paymentType>
		                <xsl:value-of select="current()/*[local-name()='paymentType']"/>
		         </ac:paymentType>
		         <ac:agentName>
		                <xsl:value-of select="current()/*[local-name()='agentName']"/>
		         </ac:agentName>
		         <xsl:if test="string-length(current()/*[local-name()='taxAmount'])!=0">
		               <ac:taxAmount>
		                            <xsl:value-of select="current()/*[local-name()='taxAmount']"/>
		               </ac:taxAmount>
		         </xsl:if>
		         <xsl:if test="string-length(current()/*[local-name()='taxPercentage'])!=0">
		               <ac:taxPercentage>
			      <xsl:value-of select="current()/*[local-name()='taxPercentage']"/>
		               </ac:taxPercentage>
		        </xsl:if>
	                    </ac:reportInfo>
	</xsl:for-each>
            </ac:moneyGramSendDetailReportWithTaxResponse>                     
         </soapenv:Body>
      </soapenv:Envelope>
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="moneyGramSendDetailReportWithTax"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue=""/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="//*[local-name()='orchestrateSendReversalValidationResponse']"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                    </L7p:ResponseXpathAssertion>
                                    <L7p:WSDLOperation>
                                    <L7p:OperationName stringValue="sendReversal"/>
                                    </L7p:WSDLOperation>
                                    <L7p:XslTransformation>
                                    <L7p:AssertionComment assertionComment="included">
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="--SendReversal Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:AssertionComment>
                                    <L7p:Direction intValue="2"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<!-- 	Created by: Rekha Kandasamy
	Purpose: SendReversal Implementation
	Last edited date: Apr 11, 2016
 --><xsl:stylesheet version="1.0" xmlns:p="http://moneygram.com/core/service/OrchestrateSendReversalValidation1607" xmlns:p1="http://moneygram.com/core/domain/transaction_v1" xmlns:p2="http://moneygram.com/core/common_v3" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output encoding="UTF-8" indent="no" method="xml" omit-xml-declaration="no"/>
<xsl:param name="currentNameSpace"/>
  <xsl:variable name="orchestrateSendReversalValidationResponse" select="//*[local-name()='orchestrateSendReversalValidationResponse']"/>
  <xsl:variable name="serviceError" select="//*[local-name()='esbEnvelope']/*[local-name()='serviceErrors']/*[local-name()='serviceError']"/>

  <xsl:template match="/">
    <soapenv:Envelope xmlns:ac="${currentNameSpace}" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
          <soapenv:Body>
        <ac:sendReversalResponse>
        
          <ac:doCheckIn>
            <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='doCheckInFlag']"/>
          </ac:doCheckIn>
          
          <ac:timeStamp>
            <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='timeStamp']"/>
          </ac:timeStamp>
          
          <ac:flags>
            <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='flags']"/>
          </ac:flags>          
          
           <ac:transactionDateTime>
                   <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='transactionDateTime']"/>
           </ac:transactionDateTime>
            
                   
          <xsl:if test="string-length($orchestrateSendReversalValidationResponse/*[local-name()='refundTotalAmount'])!=0">
                <ac:refundTotalAmount>
                      <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='refundTotalAmount']"/>
                </ac:refundTotalAmount>
             </xsl:if>

         <xsl:if test="string-length($orchestrateSendReversalValidationResponse/*[local-name()='refundFaceAmount'])!=0">
                <ac:refundFaceAmount>
                      <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='refundFaceAmount']"/>
                </ac:refundFaceAmount>
             </xsl:if>        
             
              <xsl:if test="string-length($orchestrateSendReversalValidationResponse/*[local-name()='refundFeeAmount'])!=0">
                <ac:refundFeeAmount>
                      <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='refundFeeAmount']"/>
                </ac:refundFeeAmount>
             </xsl:if>
             
              <xsl:if test="string-length($orchestrateSendReversalValidationResponse/*[local-name()='refundTaxAmount'])!=0">
                <ac:refundTaxAmount>
                      <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='refundTaxAmount']"/>
                </ac:refundTaxAmount>
             </xsl:if>
             
              <xsl:if test="string-length($orchestrateSendReversalValidationResponse/*[local-name()='totalCheckAmount'])!=0">
                <ac:totalCheckAmount>
                      <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='totalCheckAmount']"/>
                </ac:totalCheckAmount>
             </xsl:if>
                          
          <ac:reversalType>
                 <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='reversalType']"/>
          </ac:reversalType>
                  
          <xsl:if test="string-length($orchestrateSendReversalValidationResponse/*[local-name()='agentCheckAuthorizationNumber'])!=0"> 
                 <ac:agentCheckAuthorizationNumber>
                         <xsl:value-of select="$orchestrateSendReversalValidationResponse/*[local-name()='agentCheckAuthorizationNumber']"/>
                 </ac:agentCheckAuthorizationNumber>
          </xsl:if>         
          
      </ac:sendReversalResponse>
 </soapenv:Body>
</soapenv:Envelope>      
  </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="RESPONSE"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="SendReversal Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle ESB Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                </wsp:OneOrMore>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ESB Response"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:OneOrMore>
                            <L7p:Encapsulated>
                                <L7p:EncapsulatedAssertionConfigGuid stringValue="910cb930-904b-4a60-9e59-01a2f9e0576e"/>
                                <L7p:EncapsulatedAssertionConfigName stringValue="Log XML Response Message"/>
                                <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="CustomLoggerName"/>
                                    <L7p:value stringValue="${customLoggerName}"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="logResponse"/>
                                    <L7p:value stringValue="response"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="messagePrefix"/>
                                    <L7p:value stringValue="OUTGOING from Layer7 to Client"/>
                                    </L7p:entry>
                                </L7p:Parameters>
                            </L7p:Encapsulated>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Handle ESB  Operations"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                    <L7p:Include>
                        <L7p:PolicyGuid stringValue="0d9962ca-c32a-496a-a459-d2499b6b02bd"/>
                    </L7p:Include>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="Layer7 Handled Operations"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="Core Functionality"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:OneOrMore>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="3fecf6b4-43c2-4677-ae74-1a5cd6ef11a4"/>
            </L7p:Include>
        </wsp:All>
    </wsp:Policy>
</exp:Export>
